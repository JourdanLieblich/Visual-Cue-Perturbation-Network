// ta_Dump File v3.0 -- code v8.0.4.0 rev10446
LeabraProject .projects["bg"] { 
 Doc_Group @.docs = [2] {
  taDoc @["ProjectDocs"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };
  };
  taDoc @["ChangeLog"] { };
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @["LeabraWizard_0"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["NO_CLIP"] { };
    UserDataItem @["user_pinned"] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [3] {
  ControlPanel @["ControlPanel"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [7] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem @[2] { };
    EditMbrItem @[3] { };
    EditMbrItem @[4] { };
    EditMbrItem @[5] { };
    EditMbrItem @[6] { };
   };

   EditMthItem_Group @.mths = [4] {
    EditMthItem @[0] { };
    EditMthItem @[1] { };
    EditMthItem @[2] { };
    EditMthItem @[3] { };
   };
  };
  ClusterRun @["ClusterRun"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [0] {
   };

   EditMthItem_Group @.mths = [0] {
   };

   DataTableCols @.jobs_running.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_running.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_running.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_done.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_done.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_done.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_deleted.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_deleted.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_deleted.control_panel_cells = [0] {
   };

   DataTableCols @.jobs_archive.data = [33] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["tag"] { };
    String_Data @["status"] { };
    String_Data @["label"] { };
    String_Data @["notes"] { };
    String_Data @["filename"] { };
    String_Data @["params"] { };
    String_Data @["status_info"] { };
    String_Data @["submit_time"] { };
    String_Data @["start_time"] { };
    String_Data @["end_time"] { };
    String_Data @["running_time"] { };
    String_Data @["job_no"] { };
    String_Data @["job_out"] { };
    String_Data @["job_out_file"] { };
    String_Data @["dat_files"] { };
    String_Data @["other_files"] { };
    int_Data @["command_id"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["command"] { };
    String_Data @["repo_url"] { };
    String_Data @["queue"] { };
    String_Data @["run_time"] { };
    int_Data @["ram_gb"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["n_threads"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["mpi_per_node"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_batches"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    int_Data @["pb_nodes"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
    String_Data @["submit_svn"] { };
    String_Data @["submit_job"] { };
    String_Data @["done_svn"] { };
    String_Data @["last_svn"] { };
   };

   DataOpList @.jobs_archive.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.jobs_archive.control_panel_cells = [0] {
   };

   DataTableCols @.file_list.data = [11] {
    String_Data @["cluster"] { };
    String_Data @["user"] { };
    String_Data @["file_name"] { };
    String_Data @["tag"] { };
    String_Data @["size"] { };
    String_Data @["kind"] { };
    String_Data @["date_modified"] { };
    String_Data @["date_created"] { };
    String_Data @["svn_file_path"] { };
    String_Data @["proj_file_path"] { };
    String_Data @["file_path"] { };
   };

   DataOpList @.file_list.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.file_list.control_panel_cells = [0] {
   };

   DataTableCols @.cluster_info.data = [6] {
    String_Data @["queue"] { };
    String_Data @["job_no"] { };
    String_Data @["user"] { };
    String_Data @["state"] { };
    String_Data @["procs"] { };
    String_Data @["start_time"] { };
   };

   DataOpList @.cluster_info.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.cluster_info.control_panel_cells = [0] {
   };

   DataTableCols @.clusterscript_timestamp.data = [2] {
    String_Data @["timestamp"] { };
    int_Data @["version"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["NARROW"] { };
     };
    };
   };

   DataOpList @.clusterscript_timestamp.last_sort_spec.ops = [0] {
   };

   DataTableCell_List @.clusterscript_timestamp.control_panel_cells = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
  ControlPanel @["PBWM"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["user_pinned"] { };
   };

   EditMbrItem_Group @.mbrs = [2] {
    EditMbrItem @[0] { };
    EditMbrItem @[1] { };
    EditMbrItem_Group @.gp["PFC"] = [11] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
     EditMbrItem @[2] { };
     EditMbrItem @[3] { };
     EditMbrItem @[4] { };
     EditMbrItem @[5] { };
     EditMbrItem @[6] { };
     EditMbrItem @[7] { };
     EditMbrItem @[8] { };
     EditMbrItem @[9] { };
     EditMbrItem @[10] { };
    };
    EditMbrItem_Group @.gp["BG"] = [16] { 
     EditMbrItem @[0] { };
     EditMbrItem @[1] { };
     EditMbrItem @[2] { };
     EditMbrItem @[3] { };
     EditMbrItem @[4] { };
     EditMbrItem @[5] { };
     EditMbrItem @[6] { };
     EditMbrItem @[7] { };
     EditMbrItem @[8] { };
     EditMbrItem @[9] { };
     EditMbrItem @[10] { };
     EditMbrItem @[11] { };
     EditMbrItem @[12] { };
     EditMbrItem @[13] { };
     EditMbrItem @[14] { };
     EditMbrItem @[15] { };
    };
   };

   EditMthItem_Group @.mths = [0] {
   };
  };
 };

 ParamSet_Group @.param_sets = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp["InputData"] = [1] { 
   DataTable @["StdInputData"] { 
    DataTableCols @.data = [3] {
     String_Data @["Name"] { };
     float_Data @["Input"] { };
     float_Data @["SNc"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["OutputData"] = [4] { 
   DataTable @["TrialOutputData"] { 
    DataTableCols @.data = [45] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["train_mode"] { };
     int_Data @["group"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["tick"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["PFCout_lay_sse"] { };
     float_Data @["PFCout_lay_norm_err"] { };
     float_Data @["PFCout_lay_cos_err"] { };
     float_Data @["GPeNoGo_lay_net_sd"] { };
     float_Data @["GPi_Thalamus_lay_net_sd"] { };
     float_Data @["MatrixGo_lay_net_sd"] { };
     float_Data @["MatrixNoGo_lay_net_sd"] { };
     float_Data @["PFCout_lay_net_sd"] { };
     float_Data @["PFCout_deep_lay_net_sd"] { };
     float_Data @["net_cos_diff"] { };
     float_Data @["net_trial_cos_diff"] { };
     float_Data @["net_avg_act_diff"] { };
     float_Data @["GPeNoGo_cos_diff"] { };
     float_Data @["GPi_Thalamus_cos_diff"] { };
     float_Data @["MatrixGo_cos_diff"] { };
     float_Data @["MatrixNoGo_cos_diff"] { };
     float_Data @["PFCout_cos_diff"] { };
     float_Data @["PFCout_deep_cos_diff"] { };
     float_Data @["GPeNoGo_trial_cos_diff"] { };
     float_Data @["GPi_Thalamus_trial_cos_diff"] { };
     float_Data @["MatrixGo_trial_cos_diff"] { };
     float_Data @["MatrixNoGo_trial_cos_diff"] { };
     float_Data @["PFCout_trial_cos_diff"] { };
     float_Data @["PFCout_deep_trial_cos_diff"] { };
     float_Data @["GPeNoGo_avg_act_diff"] { };
     float_Data @["GPi_Thalamus_avg_act_diff"] { };
     float_Data @["MatrixGo_avg_act_diff"] { };
     float_Data @["MatrixNoGo_avg_act_diff"] { };
     float_Data @["PFCout_avg_act_diff"] { };
     float_Data @["PFCout_deep_avg_act_diff"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["EpochOutputData"] { 
    DataTableCols @.data = [75] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["PFCout_lay_avg_sse"] { };
     float_Data @["PFCout_lay_cnt_err"] { };
     float_Data @["PFCout_lay_pct_cor"] { };
     float_Data @["PFCout_lay_pct_err"] { };
     float_Data @["PFCout_lay_avg_norm_err"] { };
     float_Data @["PFCout_lay_avg_cos_err"] { };
     float_Data @["net_avg_cos_diff"] { };
     float_Data @["net_avg_trial_cos_diff"] { };
     float_Data @["net_avg_avg_act_diff"] { };
     float_Data @["GPeNoGo_avg_cos_diff"] { };
     float_Data @["GPi_Thalamus_avg_cos_diff"] { };
     float_Data @["MatrixGo_avg_cos_diff"] { };
     float_Data @["MatrixNoGo_avg_cos_diff"] { };
     float_Data @["PFCout_avg_cos_diff"] { };
     float_Data @["PFCout_deep_avg_cos_diff"] { };
     float_Data @["GPeNoGo_avg_trial_cos_diff"] { };
     float_Data @["GPi_Thalamus_avg_trial_cos_diff"] { };
     float_Data @["MatrixGo_avg_trial_cos_diff"] { };
     float_Data @["MatrixNoGo_avg_trial_cos_diff"] { };
     float_Data @["PFCout_avg_trial_cos_diff"] { };
     float_Data @["PFCout_deep_avg_trial_cos_diff"] { };
     float_Data @["GPeNoGo_avg_avg_act_diff"] { };
     float_Data @["GPi_Thalamus_avg_avg_act_diff"] { };
     float_Data @["MatrixGo_avg_avg_act_diff"] { };
     float_Data @["MatrixNoGo_avg_avg_act_diff"] { };
     float_Data @["PFCout_avg_avg_act_diff"] { };
     float_Data @["PFCout_deep_avg_avg_act_diff"] { };
     float_Data @["GPeNoGo_avg_net_sd"] { };
     float_Data @["GPi_Thalamus_avg_net_sd"] { };
     float_Data @["MatrixGo_avg_net_sd"] { };
     float_Data @["MatrixNoGo_avg_net_sd"] { };
     float_Data @["PFCout_avg_net_sd"] { };
     float_Data @["PFCout_deep_avg_net_sd"] { };
     float_Data @["GPeNoGo_hog_pct"] { };
     float_Data @["GPi_Thalamus_hog_pct"] { };
     float_Data @["MatrixGo_hog_pct"] { };
     float_Data @["MatrixNoGo_hog_pct"] { };
     float_Data @["PFCout_hog_pct"] { };
     float_Data @["PFCout_deep_hog_pct"] { };
     float_Data @["GPeNoGo_dead_pct"] { };
     float_Data @["GPi_Thalamus_dead_pct"] { };
     float_Data @["MatrixGo_dead_pct"] { };
     float_Data @["MatrixNoGo_dead_pct"] { };
     float_Data @["PFCout_dead_pct"] { };
     float_Data @["PFCout_deep_dead_pct"] { };
     float_Data @["GPeNoGo_netmax"] { };
     float_Data @["GPi_Thalamus_netmax"] { };
     float_Data @["MatrixGo_netmax"] { };
     float_Data @["MatrixNoGo_netmax"] { };
     float_Data @["PFCout_netmax"] { };
     float_Data @["PFCout_deep_netmax"] { };
     float_Data @["GPeNoGo_avg_act"] { };
     float_Data @["GPi_Thalamus_avg_act"] { };
     float_Data @["MatrixGo_avg_act"] { };
     float_Data @["MatrixNoGo_avg_act"] { };
     float_Data @["PFCout_avg_act"] { };
     float_Data @["PFCout_deep_avg_act"] { };
     float_Data @["GPeNoGo_netrel"] { };
     float_Data @["GPi_Thalamus_netrel"] { };
     float_Data @["MatrixGo_netrel"] { };
     float_Data @["MatrixNoGo_netrel"] { };
     float_Data @["PFCout_netrel"] { };
     float_Data @["PFCout_deep_netrel"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestTrialOutputData"] { 
    DataTableCols @.data = [24] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     String_Data @["train_mode"] { };
     int_Data @["group"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["trial"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["tick"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["time"] { };
     String_Data @["trial_name"] { };
     String_Data @["group_name"] { };
     String_Data @["output_name"] { };
     float_Data @["rt_cycles"] { };
     float_Data @["sse"] { };
     float_Data @["norm_err"] { };
     float_Data @["cos_err"] { };
     float_Data @["ext_rew"] { };
     float_Data @["PFCout_lay_sse"] { };
     float_Data @["PFCout_lay_norm_err"] { };
     float_Data @["PFCout_lay_cos_err"] { };
     float_Data @["GPeNoGo_lay_net_sd"] { };
     float_Data @["GPi_Thalamus_lay_net_sd"] { };
     float_Data @["MatrixGo_lay_net_sd"] { };
     float_Data @["MatrixNoGo_lay_net_sd"] { };
     float_Data @["PFCout_lay_net_sd"] { };
     float_Data @["PFCout_deep_lay_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
   DataTable @["TestEpochOutputData"] { 
    DataTableCols @.data = [24] {
     int_Data @["batch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     int_Data @["epoch"] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @["NARROW"] { };
      };
     };
     float_Data @["avg_sse"] { };
     float_Data @["cnt_err"] { };
     float_Data @["pct_cor"] { };
     float_Data @["pct_err"] { };
     float_Data @["avg_norm_err"] { };
     float_Data @["avg_cos_err"] { };
     float_Data @["avg_ext_rew"] { };
     float_Data @["avg_cycles"] { };
     float_Data @["epoch_time_tot"] { };
     float_Data @["epoch_time_usr"] { };
     float_Data @["PFCout_lay_avg_sse"] { };
     float_Data @["PFCout_lay_cnt_err"] { };
     float_Data @["PFCout_lay_pct_cor"] { };
     float_Data @["PFCout_lay_pct_err"] { };
     float_Data @["PFCout_lay_avg_norm_err"] { };
     float_Data @["PFCout_lay_avg_cos_err"] { };
     float_Data @["GPeNoGo_avg_net_sd"] { };
     float_Data @["GPi_Thalamus_avg_net_sd"] { };
     float_Data @["MatrixGo_avg_net_sd"] { };
     float_Data @["MatrixNoGo_avg_net_sd"] { };
     float_Data @["PFCout_avg_net_sd"] { };
     float_Data @["PFCout_deep_avg_net_sd"] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };

    DataTableCell_List @.control_panel_cells = [0] {
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] { 
  };
 };

 Program_TopGroup @.programs = [1] {
  Program @["LeabraStartup"] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @["DocLink"] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [2] {
    ProgVar @["network"] { };
    ProgVar @["input_data"] { };
   };

   ProgVar_List @.vars = [12] {
    ProgVar @["train_prog"] { };
    ProgVar @["batch_prog"] { };
    ProgVar @["param_set"] { };
    ProgVar @["tag"] { };
    ProgVar @["batch_str"] { };
    ProgVar @["log_dir"] { };
    ProgVar @["log_file_nm"] { };
    ProgVar @["batch_start"] { };
    ProgVar @["EpochOutputData"] { };
    ProgVar @["TrialOutputData"] { };
    ProgVar @["MyClusterRun"] { };
    ProgVar @["param_sets"] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [30] {
    RegisterArgs @[0] { };
    PrintExpr @[1] { };
    Comment @[2] { };
    ProgVarFmArg @[3] { };
    ProgVarFmArg @[4] { };
    ProgVarFmArg @[5] { };
    ProgVarFmArg @[6] { };
    ProgVarFmArg @[7] { };
    ProgVarFmArg @[8] { };
    ProgVarFmArg @[9] { };
    ProgVarFmArg @[10] { };
    ProgVarFmArg @[11] { };
    ControlPanelsFmArgs @[12] { };
    If @[13] { 
     ProgEl_List @.true_code = [1] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    Comment @[14] { };
    Comment @[15] { };
    If @[16] { 
     ProgEl_List @.true_code = [4] {
      ProgVarFmArg @[0] { };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [2] {
	ProgArg @[0] { };
	ProgArg @[1] { };
       };
      };
      VarIncr @[2] { };
      If @[3] { 
       ProgEl_List @.true_code = [2] {
	MethodCall @[0] { 
	 ProgArg_List @.meth_args = [4] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	  ProgArg @[2] { };
	  ProgArg @[3] { };
	 };
	};
	MiscCall @[1] { 
	 ProgArg_List @.meth_args = [1] {
	  ProgArg @[0] { };
	 };
	};
       };
      };
     };
    };
    Else @[17] { 
     ProgEl_List @.true_code = [2] {
      MethodCall @[0] { 
       ProgArg_List @.meth_args = [4] {
	ProgArg @[0] { };
	ProgArg @[1] { };
	ProgArg @[2] { };
	ProgArg @[3] { };
       };
      };
      MiscCall @[1] { 
       ProgArg_List @.meth_args = [1] {
	ProgArg @[0] { };
       };
      };
     };
    };
    MiscCall @[18] { 
     ProgArg_List @.meth_args = [1] {
      ProgArg @[0] { };
     };
    };
    Comment @[19] { };
    MethodCall @[20] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[21] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[22] { };
    Comment @[23] { };
    MethodCall @[24] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
    MethodCall @[25] { 
     ProgArg_List @.meth_args = [3] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
     };
    };
    PrintVar @[26] { };
    OtherProgramVar @[27] { };
    PrintExpr @[28] { };
    ProgramCall @[29] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Std"] = [10] { 
   Program @["LeabraBatch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["batch"] { };
     ProgVar @["batch_start"] { };
     ProgVar @["n_batches"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [4] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["i"] { };
      };
     };
     AssignExpr @[1] { };
     MemberAssign @[2] { };
     ForLoop @[3] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [3] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	 ProgArg @[2] { };
	};
       };
       NetCounterIncr @[1] { };
      };
     };
    };
   };
   Program @["LeabraTrain"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [2] {
     RndSeed_List @["rnd_seeds"] { 
      taList @.seeds = [25] {
       RndSeed @["RndSeed_1"] { };
       RndSeed @["RndSeed_2"] { };
       RndSeed @["RndSeed_3"] { };
       RndSeed @["RndSeed_4"] { };
       RndSeed @["RndSeed_5"] { };
       RndSeed @["RndSeed_6"] { };
       RndSeed @["RndSeed_7"] { };
       RndSeed @["RndSeed_8"] { };
       RndSeed @["RndSeed_9"] { };
       RndSeed @["RndSeed_10"] { };
       RndSeed @["RndSeed_11"] { };
       RndSeed @["RndSeed_12"] { };
       RndSeed @["RndSeed_13"] { };
       RndSeed @["RndSeed_14"] { };
       RndSeed @["RndSeed_15"] { };
       RndSeed @["RndSeed_16"] { };
       RndSeed @["RndSeed_17"] { };
       RndSeed @["RndSeed_18"] { };
       RndSeed @["RndSeed_19"] { };
       RndSeed @["RndSeed_20"] { };
       RndSeed @["RndSeed_21"] { };
       RndSeed @["RndSeed_22"] { };
       RndSeed @["RndSeed_23"] { };
       RndSeed @["RndSeed_24"] { };
       RndSeed @["RndSeed_25"] { };
      };
     };
     RndSeed @["rnd_seed"] { };
    };

    ProgType_List @.types = [1] {
     DynEnumType @["RndInitType"] { 
      DynEnumItem_List @.enums = [3] {
       DynEnumItem @["OLD_SEED"] { };
       DynEnumItem @["NEW_SEED"] { };
       DynEnumItem @["BATCH_SEEDS"] { };
      };
     };
    };

    ProgVar_List @.args = [3] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
     ProgVar @["no_prompts"] { };
    };

    ProgVar_List @.vars = [12] {
     ProgVar @["max_epoch"] { };
     ProgVar @["epoch"] { };
     ProgVar @["train_mode"] { };
     ProgVar @["rnd_init"] { };
     ProgVar @["err_stopcrit"] { };
     ProgVar @["n_under_thr"] { };
     ProgVar @["save_final_wts"] { };
     ProgVar @["save_wts_interval"] { };
     ProgVar @["n_under_cnt"] { };
     ProgVar @["rnd_seeds"] { };
     ProgVar @["train_timer"] { };
     ProgVar @["rnd_seed"] { };
    };

    Function_List @.functions = [1] {
     Function @["GetRandomSeed"] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [2] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       Switch @[1] { 
	ProgEl_List @.cases = [3] {
	 CaseBlock @[0] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[1] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	   };
	  };
	 };
	 CaseBlock @[2] { 
	  ProgEl_List @.prog_code = [1] {
	   MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [7] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     AssignExpr @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     WtInitPrompt @[5] { 
      ProgEl_List @.yes_code = [3] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[2] { };
      };
     };
     AssignExpr @[6] { };
    };

    ProgEl_List @.prog_code = [10] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     AssignExpr @[2] { };
     MemberAssign @[3] { };
     FunctionCall @[4] { 
      ProgArg_List @.fun_args = [0] {
      };
     };
     If @[5] { 
      ProgEl_List @.true_code = [2] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       PrintExpr @[1] { };
      };
     };
     AssignExpr @[6] { };
     WhileLoop @[7] { 
      ProgEl_List @.loop_code = [5] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       NetCounterIncr @[1] { };
       If @[2] { 
	ProgEl_List @.true_code = [2] {
	 VarIncr @[0] { };
	 IfBreak @[1] { };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[4] { 
	ProgEl_List @.true_code = [1] {
	 If @[0] { 
	  ProgEl_List @.true_code = [1] {
	   ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [1] {
	     ProgArg @[0] { };
	    };
	   };
	  };
	 };
	};
       };
      };
     };
     If @[8] { 
      ProgEl_List @.true_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
     MethodCall @[9] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraEpoch"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["step_on_err"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [10] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       If @[1] { 
	ProgEl_List @.true_code = [1] {
	 StopStepPoint @[0] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
    };
   };
   Program @["LeabraTrial"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarter"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycle"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputs"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["layer_writer_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [25] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
       NetMonItem @["net_cos_diff"] { };
       NetMonItem @["net_trial_cos_diff"] { };
       NetMonItem @["net_avg_act_diff"] { };
       NetMonItem @["cos_diff"] { };
       NetMonItem @["trial_cos_diff"] { };
       NetMonItem @["avg_act_diff"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitor"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [30] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["net_avg_cos_diff"] { };
       NetMonItem @["net_avg_trial_cos_diff"] { };
       NetMonItem @["net_avg_avg_act_diff"] { };
       NetMonItem @["avg_cos_diff"] { };
       NetMonItem @["avg_trial_cos_diff"] { };
       NetMonItem @["avg_avg_act_diff"] { };
       NetMonItem @["avg_net_sd"] { };
       NetMonItem @["hog_pct"] { };
       NetMonItem @["dead_pct"] { };
       NetMonItem @["netmax"] { };
       NetMonItem @["avg_act"] { };
       NetMonItem @["netrel"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [7] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[6] { };
    };
   };
   Program @["SaveWeights"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["tag"] { };
     ProgVar @["wts_subdir"] { };
     ProgVar @["fname"] { };
     ProgVar @["epoch_str"] { };
     ProgVar @["batch_str"] { };
     ProgVar @["final_tag"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [6] {
     If @[0] { 
      ProgEl_List @.true_code = [1] {
       ReturnExpr @[0] { };
      };
     };
     MiscCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MiscCall @[2] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     AssignExpr @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] = [7] { 
   Program @["LeabraEpochTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [6] {
     ProgVar @["input_data"] { };
     ProgVar @["data_loop_order"] { };
     ProgVar @["trial"] { };
     ProgVar @["trial_mon_data"] { };
     ProgVar @["epoch_timer"] { };
     ProgVar @["data_loop_index"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     AssignExpr @[1] { };
    };

    ProgEl_List @.prog_code = [11] {
     NetCounterInit @[0] { };
     MemberAssign @[1] { };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetDataLoop @[5] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     If @[6] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[9] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     MemberAssign @[10] { };
    };
   };
   Program @["LeabraTrialTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [1] {
       ProgVar @["qtr"] { };
      };
     };
     If @[1] { 
      ProgEl_List @.true_code = [1] {
       MethodCall @[0] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     Comment @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[5] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [1] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[8] { 
      ProgArg_List @.prog_args = [1] {
       ProgArg @[0] { };
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraQuarterTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["cycle"] { };
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [10] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [2] {
       ProgVar @["cycle_max"] { };
       ProgVar @["cyc"] { };
      };
     };
     Comment @[1] { };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ProgramCall @[3] { 
      ProgArg_List @.prog_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     ForLoop @[6] { 
      ProgEl_List @.loop_code = [2] {
       ProgramCall @[0] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       AssignExpr @[1] { };
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[9] { };
    };
   };
   Program @["LeabraCycleTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["update_net_view"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[1] { };
    };
   };
   Program @["ApplyInputsTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     LayerWriter @["LayerWriter_0"] { 
      LayerDataEl_List @.layer_data = [3] {
       LayerWriterEl @[0] { };
       LayerWriterEl @[1] { };
       LayerWriterEl @[2] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @["network"] { };
     ProgVar @["input_data"] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @["LayerWriter_0"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [2] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
   Program @["LeabraTrialMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["trial_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["train_mode"] { };
       NetMonItem @["group"] { };
       NetMonItem @["trial"] { };
       NetMonItem @["tick"] { };
       NetMonItem @["time"] { };
       NetMonItem @["trial_name"] { };
       NetMonItem @["group_name"] { };
       NetMonItem @["output_name"] { };
       NetMonItem @["rt_cycles"] { };
       NetMonItem @["sse"] { };
       NetMonItem @["norm_err"] { };
       NetMonItem @["cos_err"] { };
       NetMonItem @["ext_rew"] { };
       NetMonItem @["lay_sse"] { };
       NetMonItem @["lay_norm_err"] { };
       NetMonItem @["lay_cos_err"] { };
       NetMonItem @["lay_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [2] {
     ProgVar @["trial_mon_data"] { };
     ProgVar @["trial_netmon"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [4] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
   Program @["LeabraEpochMonitorTest"] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @["DocLink"] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @["epoch_netmon"] { 
      NetMonItem_List @.items = [19] {
       NetMonItem @["batch"] { };
       NetMonItem @["epoch"] { };
       NetMonItem @["avg_sse"] { };
       NetMonItem @["cnt_err"] { };
       NetMonItem @["pct_cor"] { };
       NetMonItem @["pct_err"] { };
       NetMonItem @["avg_norm_err"] { };
       NetMonItem @["avg_cos_err"] { };
       NetMonItem @["avg_ext_rew"] { };
       NetMonItem @["avg_cycles"] { };
       NetMonItem @["epoch_time_tot"] { };
       NetMonItem @["epoch_time_usr"] { };
       NetMonItem @["lay_avg_sse"] { };
       NetMonItem @["lay_cnt_err"] { };
       NetMonItem @["lay_pct_cor"] { };
       NetMonItem @["lay_pct_err"] { };
       NetMonItem @["lay_avg_norm_err"] { };
       NetMonItem @["lay_avg_cos_err"] { };
       NetMonItem @["avg_net_sd"] { };
      };
     };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @["network"] { };
    };

    ProgVar_List @.vars = [3] {
     ProgVar @["epoch_mon_data"] { };
     ProgVar @["epoch_netmon"] { };
     ProgVar @["epoch_timer"] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [4] {
     AssignExpr @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [6] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[2] { };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [4] {
       ProgArg @[0] { };
       ProgArg @[1] { };
       ProgArg @[2] { };
       ProgArg @[3] { };
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @["Browser2"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["view_win_lft"] { };
    UserDataItem @["view_win_top"] { };
    UserDataItem @["view_win_wd"] { };
    UserDataItem @["view_win_ht"] { };
    UserDataItem @["view_win_iconified"] { };
    UserDataItem @["view_splitter_state"] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @["Application"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_visible"] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @["Navigator"] { };
    PanelViewer @["Editor"] { };
    T3PanelViewer @["Visualizer"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_panel_selected"] { };
     };

     T3Panel_List @.panels = [4] {
      T3Panel @["BgNet"] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @["BgNet_View"] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [18] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	  ScaleRange @[15] { };
	  ScaleRange @[16] { };
	  ScaleRange @[17] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["StdInputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["StdInputData_Grid"] { 
	 T3DataView_List @.children = [3] {
	  GridColView @["Name"] { };
	  GridColView @["Input"] { };
	  GridColView @["SNc"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["EpochOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @["EpochOutputData_Graph"] { 
	 T3DataView_List @.children = [75] {
	  GraphColView @["batch"] { };
	  GraphColView @["epoch"] { };
	  GraphColView @["avg_sse"] { };
	  GraphColView @["cnt_err"] { };
	  GraphColView @["pct_cor"] { };
	  GraphColView @["pct_err"] { };
	  GraphColView @["avg_norm_err"] { };
	  GraphColView @["avg_cos_err"] { };
	  GraphColView @["avg_ext_rew"] { };
	  GraphColView @["avg_cycles"] { };
	  GraphColView @["epoch_time_tot"] { };
	  GraphColView @["epoch_time_usr"] { };
	  GraphColView @["PFCout_lay_avg_sse"] { };
	  GraphColView @["PFCout_lay_cnt_err"] { };
	  GraphColView @["PFCout_lay_pct_cor"] { };
	  GraphColView @["PFCout_lay_pct_err"] { };
	  GraphColView @["PFCout_lay_avg_norm_err"] { };
	  GraphColView @["PFCout_lay_avg_cos_err"] { };
	  GraphColView @["net_avg_cos_diff"] { };
	  GraphColView @["net_avg_trial_cos_diff"] { };
	  GraphColView @["net_avg_avg_act_diff"] { };
	  GraphColView @["GPeNoGo_avg_cos_diff"] { };
	  GraphColView @["GPi_Thalamus_avg_cos_diff"] { };
	  GraphColView @["MatrixGo_avg_cos_diff"] { };
	  GraphColView @["MatrixNoGo_avg_cos_diff"] { };
	  GraphColView @["PFCout_avg_cos_diff"] { };
	  GraphColView @["PFCout_deep_avg_cos_diff"] { };
	  GraphColView @["GPeNoGo_avg_trial_cos_diff"] { };
	  GraphColView @["GPi_Thalamus_avg_trial_cos_diff"] { };
	  GraphColView @["MatrixGo_avg_trial_cos_diff"] { };
	  GraphColView @["MatrixNoGo_avg_trial_cos_diff"] { };
	  GraphColView @["PFCout_avg_trial_cos_diff"] { };
	  GraphColView @["PFCout_deep_avg_trial_cos_diff"] { };
	  GraphColView @["GPeNoGo_avg_avg_act_diff"] { };
	  GraphColView @["GPi_Thalamus_avg_avg_act_diff"] { };
	  GraphColView @["MatrixGo_avg_avg_act_diff"] { };
	  GraphColView @["MatrixNoGo_avg_avg_act_diff"] { };
	  GraphColView @["PFCout_avg_avg_act_diff"] { };
	  GraphColView @["PFCout_deep_avg_avg_act_diff"] { };
	  GraphColView @["GPeNoGo_avg_net_sd"] { };
	  GraphColView @["GPi_Thalamus_avg_net_sd"] { };
	  GraphColView @["MatrixGo_avg_net_sd"] { };
	  GraphColView @["MatrixNoGo_avg_net_sd"] { };
	  GraphColView @["PFCout_avg_net_sd"] { };
	  GraphColView @["PFCout_deep_avg_net_sd"] { };
	  GraphColView @["GPeNoGo_hog_pct"] { };
	  GraphColView @["GPi_Thalamus_hog_pct"] { };
	  GraphColView @["MatrixGo_hog_pct"] { };
	  GraphColView @["MatrixNoGo_hog_pct"] { };
	  GraphColView @["PFCout_hog_pct"] { };
	  GraphColView @["PFCout_deep_hog_pct"] { };
	  GraphColView @["GPeNoGo_dead_pct"] { };
	  GraphColView @["GPi_Thalamus_dead_pct"] { };
	  GraphColView @["MatrixGo_dead_pct"] { };
	  GraphColView @["MatrixNoGo_dead_pct"] { };
	  GraphColView @["PFCout_dead_pct"] { };
	  GraphColView @["PFCout_deep_dead_pct"] { };
	  GraphColView @["GPeNoGo_netmax"] { };
	  GraphColView @["GPi_Thalamus_netmax"] { };
	  GraphColView @["MatrixGo_netmax"] { };
	  GraphColView @["MatrixNoGo_netmax"] { };
	  GraphColView @["PFCout_netmax"] { };
	  GraphColView @["PFCout_deep_netmax"] { };
	  GraphColView @["GPeNoGo_avg_act"] { };
	  GraphColView @["GPi_Thalamus_avg_act"] { };
	  GraphColView @["MatrixGo_avg_act"] { };
	  GraphColView @["MatrixNoGo_avg_act"] { };
	  GraphColView @["PFCout_avg_act"] { };
	  GraphColView @["PFCout_deep_avg_act"] { };
	  GraphColView @["GPeNoGo_netrel"] { };
	  GraphColView @["GPi_Thalamus_netrel"] { };
	  GraphColView @["MatrixGo_netrel"] { };
	  GraphColView @["MatrixNoGo_netrel"] { };
	  GraphColView @["PFCout_netrel"] { };
	  GraphColView @["PFCout_deep_netrel"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @["EpochOutputData_Graph_plot_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_plot_16"] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @["EpochOutputData_Graph_err_1"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_2"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_3"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_4"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_5"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_6"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_7"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_8"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_9"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_10"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_11"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_12"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_13"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_14"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_15"] { };
	  GraphPlotView @["EpochOutputData_Graph_err_16"] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
      T3Panel @["TestTrialOutputData"] { 
       T3DataView_List @.root_view.children = [1] {
	GridTableView @["TestTrialOutputData_Grid"] { 
	 T3DataView_List @.children = [24] {
	  GridColView @["batch"] { };
	  GridColView @["epoch"] { };
	  GridColView @["train_mode"] { };
	  GridColView @["group"] { };
	  GridColView @["trial"] { };
	  GridColView @["tick"] { };
	  GridColView @["time"] { };
	  GridColView @["trial_name"] { };
	  GridColView @["group_name"] { };
	  GridColView @["output_name"] { };
	  GridColView @["rt_cycles"] { };
	  GridColView @["sse"] { };
	  GridColView @["norm_err"] { };
	  GridColView @["cos_err"] { };
	  GridColView @["ext_rew"] { };
	  GridColView @["PFCout_lay_sse"] { };
	  GridColView @["PFCout_lay_norm_err"] { };
	  GridColView @["PFCout_lay_cos_err"] { };
	  GridColView @["GPeNoGo_lay_net_sd"] { };
	  GridColView @["GPi_Thalamus_lay_net_sd"] { };
	  GridColView @["MatrixGo_lay_net_sd"] { };
	  GridColView @["MatrixNoGo_lay_net_sd"] { };
	  GridColView @["PFCout_lay_net_sd"] { };
	  GridColView @["PFCout_deep_lay_net_sd"] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @["Vw_0"] { };
	T3SavedView @["Vw_1"] { };
	T3SavedView @["Vw_2"] { };
	T3SavedView @["Vw_3"] { };
	T3SavedView @["Vw_4"] { };
	T3SavedView @["Vw_5"] { };
	T3SavedView @["Vw_6"] { };
	T3SavedView @["Vw_7"] { };
	T3SavedView @["Vw_8"] { };
	T3SavedView @["Vw_9"] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @["Tools"] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @["view_win_lft"] { };
      UserDataItem @["view_win_top"] { };
      UserDataItem @["view_win_wd"] { };
      UserDataItem @["view_win_ht"] { };
      UserDataItem @["view_win_iconified"] { };
      UserDataItem @["view_visible"] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @["BgNet"] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @["cos_err"] { };
    UserDataItem @["norm_err"] { };
    UserDataItem @["ext_rew"] { };
    UserDataItem @["minus_output_name"] { };
    UserDataItem @["rt_cycles"] { };
    UserDataItem @["tot_cycle"] { };
    UserDataItem @["phase"] { };
    UserDataItem @["quarter"] { };
    UserDataItem @["sse"] { };
    UserDataItem @["output_name"] { };
    UserDataItem @["trial_name"] { };
    UserDataItem @["group_name"] { };
    UserDataItem @["total_trials"] { };
    UserDataItem @["time"] { };
    UserDataItem @["cycle"] { };
    UserDataItem @["tick"] { };
    UserDataItem @["trial"] { };
    UserDataItem @["group"] { };
    UserDataItem @["epoch"] { };
    UserDataItem @["batch"] { };
    UserDataItem @["trial_cos_diff"] { };
    UserDataItem @["avg_act_diff"] { };
    UserDataItem @["cos_diff"] { };
    UserDataItem @["minus_cycles"] { };
    UserDataItem @["ct_cycle"] { };
    UserDataItem @["phase_no"] { };
    UserDataItem @["maxda"] { };
   };

   BaseSpec_Group @.specs = [5] {
    LeabraLayerSpec @["HiddenLayer"] { 
     BaseSpec_Group @.children = [1] {
      LeabraLayerSpec @["Input_Output"] { 
       BaseSpec_Group @.children = [0] {
       };
      };
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    ClampDaUnitSpec @["ClampDaUnitSpec_1"] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @["LeabraConSpec_0"] { 
     BaseSpec_Group @.children = [2] {
      LeabraBiasSpec @["LeabraBiasSpec_0"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
      LeabraConSpec @["TopDownCons"] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    BaseSpec_Group @.gp["PBWM"] = [11] { 
     LeabraUnitSpec @["PBWMUnits"] { 
      BaseSpec_Group @.children = [8] {
       MSNUnitSpec @["MatrixGoUnits"] { 
	BaseSpec_Group @.children = [1] {
	 MSNUnitSpec @["MatrixNoGoUnits"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};
       };
       GPiInvUnitSpec @["ThalUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @["GPeNoGoUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       PatchUnitSpec @["PatchUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       PFCUnitSpec @["PFCmntUnits"] { 
	BaseSpec_Group @.children = [1] {
	 PFCUnitSpec @["PFCmntdUnits"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };

	  DataTableCols @.dyn_table.data = [5] {
	   String_Data @["name"] { };
	   String_Data @["desc"] { };
	   float_Data @["init"] { };
	   float_Data @["rise_tau"] { };
	   float_Data @["decay_tau"] { };
	  };

	  DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	  };

	  DataTableCell_List @.dyn_table.control_panel_cells = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};

	DataTableCols @.dyn_table.data = [5] {
	 String_Data @["name"] { };
	 String_Data @["desc"] { };
	 float_Data @["init"] { };
	 float_Data @["rise_tau"] { };
	 float_Data @["decay_tau"] { };
	};

	DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	};

	DataTableCell_List @.dyn_table.control_panel_cells = [0] {
	};
       };
       PFCUnitSpec @["PFCoutUnits"] { 
	BaseSpec_Group @.children = [1] {
	 PFCUnitSpec @["PFCoutdUnits"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };

	  DataTableCols @.dyn_table.data = [5] {
	   String_Data @["name"] { };
	   String_Data @["desc"] { };
	   float_Data @["init"] { };
	   float_Data @["rise_tau"] { };
	   float_Data @["decay_tau"] { };
	  };

	  DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	  };

	  DataTableCell_List @.dyn_table.control_panel_cells = [0] {
	  };
	 };
	};

	Schedule @.noise_sched = [0] {
	};

	DataTableCols @.dyn_table.data = [5] {
	 String_Data @["name"] { };
	 String_Data @["desc"] { };
	 float_Data @["init"] { };
	 float_Data @["rise_tau"] { };
	 float_Data @["decay_tau"] { };
	};

	DataOpList @.dyn_table.last_sort_spec.ops = [0] {
	};

	DataTableCell_List @.dyn_table.control_panel_cells = [0] {
	};
       };
       LeabraUnitSpec @["PFCtrcUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
       LeabraUnitSpec @["PFCInputUnits"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.noise_sched = [0] {
	};
       };
      };

      Schedule @.noise_sched = [0] {
      };
     };
     LeabraConSpec @["BgLrnCons"] { 
      BaseSpec_Group @.children = [2] {
       MSNConSpec @["MatrixConsGo"] { 
	BaseSpec_Group @.children = [2] {
	 MSNConSpec @["MatrixConsNoGo"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	 MSNConSpec @["MatrixConsFmPFC"] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	 };
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraDeltaConSpec @["ToTANs"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraConSpec @["PfcLrnCons"] { 
      BaseSpec_Group @.children = [5] {
       DeepCtxtConSpec @["PFCDeepCtxt"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["ToPFC"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["PFCfmTRC"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["PFCtoTRC"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["PFCtoOutput"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraConSpec @["PBWMFixedCons"] { 
      BaseSpec_Group @.children = [5] {
       LeabraBiasSpec @["PBWMFixedBias"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       MarkerConSpec @["PBWMMarkerCons"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepModConSpec @["PFCSendDeepMod"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       LeabraConSpec @["PFCdMntToOut"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
       SendDeepRawConSpec @["PBWMDeepRawPlus"] { 
	BaseSpec_Group @.children = [0] {
	};

	Schedule @.lrate_sched = [0] {
	};
       };
      };

      Schedule @.lrate_sched = [0] {
      };
     };
     LeabraLayerSpec @["PBWMLayers"] { 
      BaseSpec_Group @.children = [4] {
       LeabraLayerSpec @["MatrixLayer"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @["PatchLayer"] { 
	BaseSpec_Group @.children = [0] {
	};
       };
       LeabraLayerSpec @["ThalLayer"] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @["GPeNoGoLayer"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
       LeabraLayerSpec @["PFCLayer"] { 
	BaseSpec_Group @.children = [1] {
	 LeabraLayerSpec @["PFCtrcLayer"] { 
	  BaseSpec_Group @.children = [0] {
	  };
	 };
	};
       };
      };
     };
     FullPrjnSpec @["PBWMFullPrjn"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     OneToOnePrjnSpec @["PBWMOneToOne"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     GpOneToOnePrjnSpec @["PBWMGpOneToOne"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     BgPfcPrjnSpec @["BgPfcPrjn"] { 
      BaseSpec_Group @.children = [2] {
       BgPfcPrjnSpec @["BgPfcPrjnToOut"] { 
	BaseSpec_Group @.children = [0] {
	};

	DataTableCols @.bg_table.data = [5] {
	 String_Data @["pfc_name"] { };
	 int_Data @["size_x"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["size_y"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["start_x"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["start_y"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	};

	DataOpList @.bg_table.last_sort_spec.ops = [0] {
	};

	DataTableCell_List @.bg_table.control_panel_cells = [0] {
	};
       };
       BgPfcPrjnSpec @["BgPfcPrjnToMnt"] { 
	BaseSpec_Group @.children = [0] {
	};

	DataTableCols @.bg_table.data = [5] {
	 String_Data @["pfc_name"] { };
	 int_Data @["size_x"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["size_y"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["start_x"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	 int_Data @["start_y"] { 
	  UserDataItem_List @*(.user_data_) {
	   UserDataItem @["NARROW"] { };
	  };
	 };
	};

	DataOpList @.bg_table.last_sort_spec.ops = [0] {
	};

	DataTableCell_List @.bg_table.control_panel_cells = [0] {
	};
       };
      };

      DataTableCols @.bg_table.data = [5] {
       String_Data @["pfc_name"] { };
       int_Data @["size_x"] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @["NARROW"] { };
	};
       };
       int_Data @["size_y"] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @["NARROW"] { };
	};
       };
       int_Data @["start_x"] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @["NARROW"] { };
	};
       };
       int_Data @["start_y"] { 
	UserDataItem_List @*(.user_data_) {
	 UserDataItem @["NARROW"] { };
	};
       };
      };

      DataOpList @.bg_table.last_sort_spec.ops = [0] {
      };

      DataTableCell_List @.bg_table.control_panel_cells = [0] {
      };
     };
     TiledGpRFPrjnSpec @["DeepToTRC"] { 
      BaseSpec_Group @.children = [0] {
      };
     };
     TesselPrjnSpec @["TesselOneToOne"] { 
      BaseSpec_Group @.children = [0] {
      };

      TessEl_List @.send_offs = [1] {
       TessEl @[0] { };
      };
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [2] {
    LeabraLayer @["Input"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [6] {
     };
    };
    LeabraLayer @["SNc"] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [1] {
     };
    };
    Layer_Group @.gp["PBWM"] = [6] { 
     LeabraLayer @["GPeNoGo"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Fm_MatrixNoGo"] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @["GPi_Thalamus"] { 
      Projection_Group @.projections = [2] {
       LeabraPrjn @["Fm_MatrixGo"] { };
       LeabraPrjn @["Fm_GPeNoGo"] { };
      };

      Unit_Group @.units = [1] {
      };
     };
     LeabraLayer @["MatrixGo"] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] { };
       LeabraPrjn @["Deep_Raw_Fm_GPeNoGo"] { };
       LeabraPrjn @["Fm_Input"] { };
       LeabraPrjn @["Fm_PFCout"] { };
       LeabraPrjn @["Marker_Fm_SNc"] { };
      };

      Unit_Group @.units = [6] {
      };
     };
     LeabraLayer @["MatrixNoGo"] { 
      Projection_Group @.projections = [5] {
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] { };
       LeabraPrjn @["Deep_Raw_Fm_GPeNoGo"] { };
       LeabraPrjn @["Fm_Input"] { };
       LeabraPrjn @["Fm_PFCout"] { };
       LeabraPrjn @["Marker_Fm_SNc"] { };
      };

      Unit_Group @.units = [6] {
      };
     };
     LeabraLayer @["PFCout"] { 
      Projection_Group @.projections = [3] {
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] { };
       LeabraPrjn @["Deep_Mod_Fm_PFCout_deep"] { };
       LeabraPrjn @["Fm_Input"] { };
      };

      Unit_Group @.units = [6] {
      };
     };
     LeabraLayer @["PFCout_deep"] { 
      Projection_Group @.projections = [1] {
       LeabraPrjn @["Ctxt_Fm_PFCout"] { };
      };

      Unit_Group @.units = [6] {
      };
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects["bg"] {
 user_data_=NULL;
 name="bg";
 desc="basal ganglia model showing how dopamine trains Go (direct) vs. NoGo (indirect) pathways";
 tags="Basal Ganglia, Dopamine, D1, D2, Reward Learning, Instrumental Conditioning, Thorndike Law of Effect";
 version {
  user_data_=NULL;
  major=8;
  minor=0;
  step=4;
 };
 author="Randall C. O'Reilly, Michael J. Frank";
 email="emergent-users@grey.colorado.edu";
 license {
  user_data_=NULL;
  license=GPLv2;
  owner_name="Regents of the University of Colorado";
  org="CCNLab at the University of Colorado Boulder";
  year="2016";
  custom=;
 };
 pub_cite="OReillyMunakataFrankEtAl12";
 wiki {
  user_data_=NULL;
  wiki="CCN";
  page_name="CCNBook/Sims/Motor/BG";
 };
 docs {
  user_data_=NULL;
  name="docs";
  el_typ=taDoc;
  el_def=0;
  taDoc @["ProjectDocs"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_263";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ProjectDocs";
   desc=;
   web_doc=1;
   wiki="CCN";
   url="CCNBook/Sims/Motor/BG";
   full_url="https://grey.colorado.edu/CompCogNeuro/index.php/CCNBook/Sims/Motor/BG";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text=;
  };
  taDoc @["ChangeLog"] {
   user_data_=NULL;
   name="ChangeLog";
   desc=;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>


<li>Sat Jan 14 00:59:55 2017 version: 8.0.4 user: oreilly file_name: <code>bg.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 svn 10466 update



<li>Thu Oct 13 02:27:10 2016 version: 8.0.3 user: oreilly file_name: <code>bg.proj</code> <br>
Project updated on wiki: CCN changes: docs updt



<li>Wed Oct 12 23:21:47 2016 version: 8.0.2 user: oreilly file_name: <code>bg.proj</code> <br>
Published on wiki: CCN page: CCNBook/Sims/Motor/BG with description: basal ganglia model showing how dopamine trains Go (direct) vs. NoGo (indirect) pathways tags: Basal Ganglia, Dopamine, D1, D2, Reward Learning, Instrumental Conditioning, Thorndike Law of Effect author: Randall C. O'Reilly, Michael J. Frank email: emergent-users@grey.colorado.edu version: 8.0.1 pub_cite: OReillyMunakataFrankEtAl12


<li>Wed Oct 12 22:50:37 2016 version: 8.0.1 user: oreilly file_name: <code>bg.proj</code> <br>
Published on wiki: CCN page: CCNBook/Sims/Motor/BG with description: basal ganglia model showing how dopamine trains Go (direct) vs. NoGo (indirect) pathways tags: Basal Ganglia, Dopamine, D1, D2, Reward Learning, Instrumental Conditioning, Thorndike Law of Effect author: Randall C. O'Reilly, Michael J. Frank email: emergent-users@grey.colorado.edu version: 8.0.0 pub_cite: OReillyMunakataFrankEtAl12
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<P>
<li>Sat Jan 14 00:59:55 2017 version: 8.0.4 user: oreilly file_name: <code>bg.proj</code> <br>
Project updated on wiki: CCN changes: 8.0.4 svn 10466 update
<P>
<P>
<P>
<li>Thu Oct 13 02:27:10 2016 version: 8.0.3 user: oreilly file_name: <code>bg.proj</code> <br>
Project updated on wiki: CCN changes: docs updt
<P>
<P>
<P>
<li>Wed Oct 12 23:21:47 2016 version: 8.0.2 user: oreilly file_name: <code>bg.proj</code> <br>
Published on wiki: CCN page: CCNBook/Sims/Motor/BG with description: basal ganglia model showing how dopamine trains Go (direct) vs. NoGo (indirect) pathways tags: Basal Ganglia, Dopamine, D1, D2, Reward Learning, Instrumental Conditioning, Thorndike Law of Effect author: Randall C. O'Reilly, Michael J. Frank email: emergent-users@grey.colorado.edu version: 8.0.1 pub_cite: OReillyMunakataFrankEtAl12
<P>
<P>
<li>Wed Oct 12 22:50:37 2016 version: 8.0.1 user: oreilly file_name: <code>bg.proj</code> <br>
Published on wiki: CCN page: CCNBook/Sims/Motor/BG with description: basal ganglia model showing how dopamine trains Go (direct) vs. NoGo (indirect) pathways tags: Basal Ganglia, Dopamine, D1, D2, Reward Learning, Instrumental Conditioning, Thorndike Law of Effect author: Randall C. O'Reilly, Michael J. Frank email: emergent-users@grey.colorado.edu version: 8.0.0 pub_cite: OReillyMunakataFrankEtAl12
</ul>
</body>
</html>
";
  };
 };
 wizards {
  user_data_=NULL;
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @["LeabraWizard_0"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_6";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["NO_CLIP"] {
     user_data_=NULL;
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_0";
  };
 };
 ctrl_panels {
  user_data_=NULL;
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  ControlPanel @["ControlPanel"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="ControlPanel";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     user_data_=NULL;
     label="cycle_qtr";
     desc="[Default: true]  one CycleRun runs for a full quarter number of actual cycles -- this greatly speeds up processing by reducing threading overhead, but prevents e.g., interactive viewing at the individual cycle level -- this is not saved -- have to re-engage it when needed, to prevent unintentionally slowing everything down";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].times$$;
     mbr=LeabraTimes::cycle_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=0;
      search=0;
      range="0:1:0.1";
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="turn this OFF to see cycle-by-cycle updating (or hit Cycle Step)";
     };
    };
    EditMbrItem @[1] {
     user_data_=NULL;
     label="matrix_burst_da_gain";
     desc=" multiplicative gain factor applied to positive dopamine signals -- this operates on the raw dopamine signal prior to any effect of D2 receptors in reversing its sign!";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$$;
     mbr=MSNConSpec::burst_da_gain;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="1 default -- reduce for PD OFF, increase for PD ON";
     };
    };
    EditMbrItem @[2] {
     user_data_=NULL;
     label="matrix_dip_da_gain";
     desc=" multiplicative gain factor applied to negative dopamine signals -- this operates on the raw dopamine signal prior to any effect of D2 receptors in reversing its sign!";
     cust_desc=0;
     base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$;
     mbr=MSNConSpec::dip_da_gain;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="1 default -- reduce to simulate D2 agonists";
     };
    };
    EditMbrItem @[3] {
     user_data_=NULL;
     label="thal_units_gpi_nogo";
     desc="[Default: 1;0.1]  how much to weight NoGo inputs relative to Go inputs (which have an implied weight of 1.0)";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["ThalUnits"].gpi$$;
     mbr=GPiMiscSpec::nogo;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="0.4 default -- strength of gpe nogo onto gpi";
     };
    };
    EditMbrItem @[4] {
     user_data_=NULL;
     label="matrix_noise_var";
     desc=" 'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"].noise$$;
     mbr=Random::var;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="0.001 default -- noise in matrix units";
     };
    };
    EditMbrItem @[5] {
     user_data_=NULL;
     label="gpe_noise_var";
     desc=" 'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["GPeNoGoUnits"].noise$$;
     mbr=Random::var;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="0.002 default -- noise in gpe units";
     };
    };
    EditMbrItem @[6] {
     user_data_=NULL;
     label="matrix_cons_go_lrate";
     desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
     cust_desc=0;
     base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes="0.1 default -- learning rate";
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     user_data_=NULL;
     label="Train_Init";
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     user_data_=NULL;
     label="Train_Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     user_data_=NULL;
     label="Train_Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     user_data_=NULL;
     label="Train_Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     mth=Program::Stop;
    };
   };
  };
  ClusterRun @["ClusterRun"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=0;
     val_type_fixed=0;
    };
   };
   name="ClusterRun";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   jobs_running {
    user_data_=NULL;
    name="jobs_running";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_done {
    user_data_=NULL;
    name="jobs_done";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_deleted {
    user_data_=NULL;
    name="jobs_deleted";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   jobs_archive {
    user_data_=NULL;
    name="jobs_archive";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="name of cluster to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="unique tag id for this job -- all files etc are named according to this tag";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status"] {
      user_data_=NULL;
      name="status";
      desc="status of job: REQUESTED, CANCELLED, SUBMITTED, QUEUED, RUNNING, DONE, KILLED";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["label"] {
      user_data_=NULL;
      name="label";
      desc="label for the job -- a brief description that you can use to label this job's results on your graph -- in general notes should have more general info and then label should JUST describe what is unique about the current run";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["notes"] {
      user_data_=NULL;
      name="notes";
      desc="notes for the job -- describe any specific information about the model configuration etc -- can use this for searching and sorting results";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["filename"] {
      user_data_=NULL;
      name="filename";
      desc="name of the specific project used for this job -- because multiple versions of a model are often run under the same project name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["params"] {
      user_data_=NULL;
      name="params";
      desc="emergent parameters based on currently selected items in the ClusterRun";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["status_info"] {
      user_data_=NULL;
      name="status_info";
      desc="more detailed information about status";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_time"] {
      user_data_=NULL;
      name="submit_time";
      desc="when was the job submitted (tracks time from emergent client submission)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="when did the job actually start running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["end_time"] {
      user_data_=NULL;
      name="end_time";
      desc="when did the job finish running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["running_time"] {
      user_data_=NULL;
      name="running_time";
      desc="total running time in days/hours/minutes";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number on cluster -- assigned once the job is submitted to the cluster";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out"] {
      user_data_=NULL;
      name="job_out";
      desc="job output information -- contains (top of) the job standard output and standard error output as the job is running (truncated to top 2048 characters if longer than that) -- full information available in job_out_file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_out_file"] {
      user_data_=NULL;
      name="job_out_file";
      desc="job output file -- file name containing full job output information -- file name should be tag.out";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["dat_files"] {
      user_data_=NULL;
      name="dat_files";
      desc="list of data table output (results) files generated by model (space separated) -- these files have the tag in their name, and end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["other_files"] {
      user_data_=NULL;
      name="other_files";
      desc="list of other output (results) files generated by model (space separated) -- these files have the tag in their name but do not end in .dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["command_id"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="command_id";
      desc="id for this command, assigned by the search algorithm in an algorithm-specific manner (optional)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     String_Data @["command"] {
      user_data_=NULL;
      name="command";
      desc="emergent command line, up to point of parameters";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["repo_url"] {
      user_data_=NULL;
      name="repo_url";
      desc="name of repository to run job on";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="if specified, indicate a particular queue on the computing resource";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["run_time"] {
      user_data_=NULL;
      name="run_time";
      desc="how long will the jobs take to run -- syntax is number followed by unit indicator -- m=minutes, h=hours, d=days -- e.g., 30m, 12h, or 2d -- typically the job will be killed if it exceeds this amount of time, so be sure to not underestimate";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     int_Data @["ram_gb"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ram_gb";
      desc="how many gigabytes of ram is required?  0 means do not specify this parameter for the job submission -- for large memory jobs, it can be important to specify this to ensure proper allocation of resources";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     int_Data @["n_threads"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="n_threads";
      desc="number of parallel threads to use for running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_nodes";
      desc="number of physical nodes to use for mpi run -- 0 or -1 means not to use mpi";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
     };
     int_Data @["mpi_per_node"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="mpi_per_node";
      desc="number of processes to use per MPI node to use for mpi run - total nodes is mpi_nodes * mpi_per_node";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
     };
     int_Data @["pb_batches"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_batches";
      desc="if > 0, use parallel batch mode with this number of batches";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
     };
     int_Data @["pb_nodes"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="pb_nodes";
      desc="actually pb_n_batches_per -- re-using this parameter that was previously used for a different purpose -- number of batches to run sequentially within a single job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
     };
     String_Data @["submit_svn"] {
      user_data_=NULL;
      name="submit_svn";
      desc="svn revision for the original job submission";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["submit_job"] {
      user_data_=NULL;
      name="submit_job";
      desc="index of job number within a given submission -- equal to the row number of the original set of jobs submitted in submit_svn jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["done_svn"] {
      user_data_=NULL;
      name="done_svn";
      desc="svn revision when this job was moved from running to done -- this will contain full set of files generated when running -- for deleted jobs can also recover to this";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["last_svn"] {
      user_data_=NULL;
      name="last_svn";
      desc="last svn revision for command submission that affected this job in some significant way -- for deleted jobs, this is the svn revision that we recover to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=2;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   file_list {
    user_data_=NULL;
    name="file_list";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["cluster"] {
      user_data_=NULL;
      name="cluster";
      desc="cluster where this job was submitted / run";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user who ran this job";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_name"] {
      user_data_=NULL;
      name="file_name";
      desc="name of file -- does not include any path information";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["tag"] {
      user_data_=NULL;
      name="tag";
      desc="job tag associated with this file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["size"] {
      user_data_=NULL;
      name="size";
      desc="size of file -- with typical suffixes (K = kilobytes, M = megabytes, G = gigabytes)";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["kind"] {
      user_data_=NULL;
      name="kind";
      desc="type of file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_modified"] {
      user_data_=NULL;
      name="date_modified";
      desc="timestamp for when the file was last modified";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["date_created"] {
      user_data_=NULL;
      name="date_created";
      desc="timestamp for when the file was first created";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["svn_file_path"] {
      user_data_=NULL;
      name="svn_file_path";
      desc="path to file in SVN repository, relative to root of svn_repo repository";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["proj_file_path"] {
      user_data_=NULL;
      name="proj_file_path";
      desc="path to file relative to the parent project directory -- e.g., results/filename.dat";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["file_path"] {
      user_data_=NULL;
      name="file_path";
      desc="full path to file on local file system, including all parent directories and name of file -- takes you directly to the file";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   cluster_info {
    user_data_=NULL;
    name="cluster_info";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["queue"] {
      user_data_=NULL;
      name="queue";
      desc="queue that this info relates to";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["job_no"] {
      user_data_=NULL;
      name="job_no";
      desc="job number or total number of actve jobs";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["user"] {
      user_data_=NULL;
      name="user";
      desc="user name";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["state"] {
      user_data_=NULL;
      name="state";
      desc="current scheduler state -- or description of global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["procs"] {
      user_data_=NULL;
      name="procs";
      desc="number of processors for this job or for global state info";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
     String_Data @["start_time"] {
      user_data_=NULL;
      name="start_time";
      desc="timestamp for when the job was submitted or started running";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   clusterscript_timestamp {
    user_data_=NULL;
    name="clusterscript_timestamp";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["timestamp"] {
      user_data_=NULL;
      name="timestamp";
      desc="Timestamp of last interaction from the cluster run script";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
     int_Data @["version"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="version";
      desc="Version number of cluster run script ";
      col_flags=SAVE_DATA|READ_ONLY|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=0;
      matrix_col_width=10;
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    last_sort_spec {
     user_data_=NULL;
     name=;
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name=;
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   search_algos {
    user_data_=NULL;
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=-1;
   n_threads=2;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
  ControlPanel @["PBWM"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_252";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["user_pinned"] {
     user_data_=NULL;
     name="user_pinned";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="PBWM";
   updt_while_running=0;
   desc=;
   mbrs {
    user_data_=NULL;
    name="mbrs";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     user_data_=NULL;
     label="pbwmunits_deep_raw_qtr";
     desc="set to Q2, Q4 for beta frequency updating -- Q4 for just alpha -- coordinate with bg_lrn_learn_qtr setting!";
     cust_desc=1;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"]$$;
     mbr=LeabraUnitSpec::deep_raw_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem @[1] {
     user_data_=NULL;
     label="bg_lrn_cons_learn_qtr";
     desc=" quarters after which learning (Compute_dWt) should take place<br> * Q1:  first quarter<br> * Q2:  second quarter<br> * Q3:  third quarter -- posterior cortical minus phase<br> * Q4:  fourth quarter -- posterior cortical plus phase";
     cust_desc=0;
     base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"]$$;
     mbr=LeabraConSpec::learn_qtr;
     is_numeric=0;
     is_single=1;
     param_search {
      user_data_=NULL;
      record=1;
      search=0;
      range=;
     };
     param_set_value {
      user_data_=NULL;
      saved_value=;
     };
     notes {
      user_data_=NULL;
      notes=;
     };
    };
    EditMbrItem_Group @.gp["PFC"] {
     user_data_=NULL;
     name="PFC";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      user_data_=NULL;
      label="pfcmnt_units_gate";
      desc=" PFC specifications for gating-related parameters<br>  out gate:  if true, this PFC layer is an output gate layer, which means that it only has transient activation during gating<br>  mnt thal: [Default: 1]  effective thal activation to use in computing the deep_raw activation sent from super to deep layers, for continued maintenance beyond the initial thal signal provided by the BG -- also sets and effective minimum thal value regardless of the actual gating thal value<br>  gate thr: [Default: 0.2]  threshold on thalamic gating signal to drive gating -- when using GpiInvUnitSpec gpi, this parameter ususally doesn't matter! set the gpi.gate_thr value instead -- the only constraint is that this value be <= gpi.min_thal as that determines the minimum thalamic value for gated stripes<br>  prv qtr:  does gating happen in the previous quarter or otherwise in the same quarter as the deep_raw_qtr? for maintenance layers, typically you set Q2_Q4 for deep_raw_qtr, and gating happens in quarters 1 and 3, so prv_qtr should be true -- for output layers, gating in Q1 and prv_qtr = false allows gating to happen after first quarter instead of waiting until later -- this allows the output gating to happen quicker to influence responses within the trial";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCmntUnits"]$$;
      mbr=PFCUnitSpec::gate;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[1] {
      user_data_=NULL;
      label="pfcmnt_units_maint";
      desc=" PFC specifications for maintenance-related parameters<br>  s mnt min: [Default: 0.3]  for superficial neurons, how much of deep_lrn to add into excitatory net input to support maintenance, from deep maintenance signal -- 0.25 is generally minimum to support maintenance -- this is the minimum amount to add as a function of the strength of afferent netinput (less maint current with stronger afferents) -- see<br>  s mnt max: [Default: 0.5]  for superficial neurons, how much of deep_lrn to add into excitatory net input to support maintenance, from deep maintenance signal -- 0.25 is generally minimum to support maintenance -- this is the maximum amount to add as a function of the strength of afferent netinput (less maint current with stronger afferents)<br>  mnt net max: [Default: 0.5]  maximum netin_raw.max value required to drive the minimum s_mnt_min maintenance current from deep -- anything above this drives the same s_mnt_min value -- below this value scales the effective mnt current between s_mnt_min to s_mnt_max in reverse proportion to netin_raw.max value<br>  clear: [Default: 0.5]  how much to clear out (decay) super activations when the stripe itself gates and was previously maintaining something, or for maint pfc stripes, when output go fires and clears<br>  use dyn:  use fixed dynamics for updating deep_ctxt activations -- defined in dyn_table -- this also preserves the initial gating deep_ctxt value in misc_1 -- otherwise it is up to the recurrent loops between super and deep for maintenance<br>  max mnt: [Default: 1;100]  maximum duration of maintenance for any stripe -- beyond this limit, the maintenance is just automatically cleared -- typically 1 for output gating and 100 for maintenance gating";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCmntUnits"]$;
      mbr=PFCUnitSpec::maint;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[2] {
      user_data_=NULL;
      label="pfcmnt_units_n_dyns";
      desc=" number of different temporal dynamic profiles for different PFC units, all triggered by a single gating event -- each row of units within a PFC unit group shares the same dynamics -- there should be an even multiple of n_dyns rows (y unit group size) per unit group";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCmntUnits"]$;
      mbr=PFCUnitSpec::n_dyns;
      is_numeric=1;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[3] {
      user_data_=NULL;
      label="pfcout_units_gate";
      desc=" PFC specifications for gating-related parameters<br>  out gate:  if true, this PFC layer is an output gate layer, which means that it only has transient activation during gating<br>  mnt thal: [Default: 1]  effective thal activation to use in computing the deep_raw activation sent from super to deep layers, for continued maintenance beyond the initial thal signal provided by the BG -- also sets and effective minimum thal value regardless of the actual gating thal value<br>  gate thr: [Default: 0.2]  threshold on thalamic gating signal to drive gating -- when using GpiInvUnitSpec gpi, this parameter ususally doesn't matter! set the gpi.gate_thr value instead -- the only constraint is that this value be <= gpi.min_thal as that determines the minimum thalamic value for gated stripes<br>  prv qtr:  does gating happen in the previous quarter or otherwise in the same quarter as the deep_raw_qtr? for maintenance layers, typically you set Q2_Q4 for deep_raw_qtr, and gating happens in quarters 1 and 3, so prv_qtr should be true -- for output layers, gating in Q1 and prv_qtr = false allows gating to happen after first quarter instead of waiting until later -- this allows the output gating to happen quicker to influence responses within the trial";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCoutUnits"]$$;
      mbr=PFCUnitSpec::gate;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[4] {
      user_data_=NULL;
      label="pfcout_units_maint";
      desc=" PFC specifications for maintenance-related parameters<br>  s mnt min: [Default: 0.3]  for superficial neurons, how much of deep_lrn to add into excitatory net input to support maintenance, from deep maintenance signal -- 0.25 is generally minimum to support maintenance -- this is the minimum amount to add as a function of the strength of afferent netinput (less maint current with stronger afferents) -- see<br>  s mnt max: [Default: 0.5]  for superficial neurons, how much of deep_lrn to add into excitatory net input to support maintenance, from deep maintenance signal -- 0.25 is generally minimum to support maintenance -- this is the maximum amount to add as a function of the strength of afferent netinput (less maint current with stronger afferents)<br>  mnt net max: [Default: 0.5]  maximum netin_raw.max value required to drive the minimum s_mnt_min maintenance current from deep -- anything above this drives the same s_mnt_min value -- below this value scales the effective mnt current between s_mnt_min to s_mnt_max in reverse proportion to netin_raw.max value<br>  clear: [Default: 0.5]  how much to clear out (decay) super activations when the stripe itself gates and was previously maintaining something, or for maint pfc stripes, when output go fires and clears<br>  use dyn:  use fixed dynamics for updating deep_ctxt activations -- defined in dyn_table -- this also preserves the initial gating deep_ctxt value in misc_1 -- otherwise it is up to the recurrent loops between super and deep for maintenance<br>  max mnt: [Default: 1;100]  maximum duration of maintenance for any stripe -- beyond this limit, the maintenance is just automatically cleared -- typically 1 for output gating and 100 for maintenance gating";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCoutUnits"]$;
      mbr=PFCUnitSpec::maint;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[5] {
      user_data_=NULL;
      label="pfclayer_unit_gp_inhib";
      desc=" how to compute unit-group-level inhibition (only relevant if layer actually has unit groups -- net inhibition is MAX of all operative inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- any inhibitory unit inhibition is just added on top of this computed inhibition<br>  on:  enable this form of inhibition (layer or unit group) -- if only using inhibitory interneurons, both can be turned off<br>  gi: [Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init<br>  ff: [Default: 1]  overall inhibitory contribution from feedforward inhibition -- multiplies average netinput (i.e., synaptic drive into layer) -- this anticipates upcoming changes in excitation, but if set too high, it can make activity slow to emerge -- see also ff0 for a zero-point for this value<br>  fb: [Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)<br>  fb tau: [Default: 1.4]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating feedback inhibitory values -- prevents oscillations that otherwise occur -- relatively rapid 1.4 typically works, but may need to go longer if oscillations are a problem<br>  max vs avg: [Default: 0;0.5;1]  what proportion of the maximum vs. average netinput to use in the feedforward inhibition computation -- 0 = all average, 1 = all max, and values in between = proportional mix between average and max (ff_netin = avg + ff_max_vs_avg * (max - avg)) -- including more max can be beneficial especially in situations where the average can vary significantly but the activity should not -- max is more robust in many situations but less flexible and sensitive to the overall distribution -- max is better for cases more closely approximating single or strictly fixed winner-take-all behavior -- 0.5 is a good compromize in many cases and generally requires a reduction of .1 or slightly more (up to .3-.5) from the gi value for 0<br>  ff0: [Default: 0.1]  feedforward zero point for average netinput -- below this level, no FF inhibition is computed based on avg netinput, and this value is subtraced from the ff inhib contribution above this value -- the 0.1 default should be good for most cases (and helps FF_FB produce k-winner-take-all dynamics), but if average netinputs are lower than typical, you may need to lower it";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["PFCLayer"]$$;
      mbr=LeabraLayerSpec::unit_gp_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[6] {
      user_data_=NULL;
      label="pfclayer_lay_inhib";
      desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition<br>  on:  enable this form of inhibition (layer or unit group) -- if only using inhibitory interneurons, both can be turned off<br>  gi: [Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init<br>  ff: [Default: 1]  overall inhibitory contribution from feedforward inhibition -- multiplies average netinput (i.e., synaptic drive into layer) -- this anticipates upcoming changes in excitation, but if set too high, it can make activity slow to emerge -- see also ff0 for a zero-point for this value<br>  fb: [Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)<br>  fb tau: [Default: 1.4]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating feedback inhibitory values -- prevents oscillations that otherwise occur -- relatively rapid 1.4 typically works, but may need to go longer if oscillations are a problem<br>  max vs avg: [Default: 0;0.5;1]  what proportion of the maximum vs. average netinput to use in the feedforward inhibition computation -- 0 = all average, 1 = all max, and values in between = proportional mix between average and max (ff_netin = avg + ff_max_vs_avg * (max - avg)) -- including more max can be beneficial especially in situations where the average can vary significantly but the activity should not -- max is more robust in many situations but less flexible and sensitive to the overall distribution -- max is better for cases more closely approximating single or strictly fixed winner-take-all behavior -- 0.5 is a good compromize in many cases and generally requires a reduction of .1 or slightly more (up to .3-.5) from the gi value for 0<br>  ff0: [Default: 0.1]  feedforward zero point for average netinput -- below this level, no FF inhibition is computed based on avg netinput, and this value is subtraced from the ff inhib contribution above this value -- the 0.1 default should be good for most cases (and helps FF_FB produce k-winner-take-all dynamics), but if average netinputs are lower than typical, you may need to lower it";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["PFCLayer"]$;
      mbr=LeabraLayerSpec::lay_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[7] {
      user_data_=NULL;
      label="pfclayer_avg_act";
      desc=" expected average activity levels in the layer -- used for computing running-average computation that is then used for netinput scaling (also specifies time constant for updating average), and for the target value for adapting inhibition in inhib_adapt<br>  targ init:  [typically 0.1 - 0.2] target value for adapting inhibition (see inhib_adapt params) and initial estimated average activity level in the layer -- used as a starting point for running average actual activity level (acts_m_avg and acts_p_avg) -- acts_p_avg is used primarily for automatic netinput scaling, to balance out layers that have different activity levels -- thus it is important that init be relatively accurate -- good idea to update from recorded acts_p_avg levels (see LayerAvgAct button, here and on network) -- see also adjust parameter<br>  fixed: [Default: false]  if true, then the init value is used as a constant for acts_p_avg_eff (the effective value used for netinput rescaling), instead of using the actual running average activation<br>  use ext act: [Default: false]  if true, then use the activation level computed from the external inputs to this layer (avg of targ or ext unit vars) -- this will only be applied to layers with INPUT or TARGET / OUTPUT layer types, and falls back on the targ_init value if external inputs are not available or have a zero average -- implies fixed behavior<br>  tau: [Default: 100]  time constant in trials for integrating time-average values at the layer level -- used for computing acts_m_avg and acts_p_avg<br>  adjust: [Default: 1]  adjustment multiplier on the computed acts_p_avg value that is used to compute acts_p_avg_eff, which is actually used for netinput rescaling -- if based on connectivity patterns or other factors the actual running-average value is resulting in netinputs that are too high or low, then this can be used to adjust the effective average activity value -- reducing the average activity with a factor < 1 will increase netinput scaling (stronger net inputs from layers that receive from this layer), and vice-versa for increasing (decreases net inputs)";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["PFCLayer"]$;
      mbr=LeabraLayerSpec::avg_act;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[8] {
      user_data_=NULL;
      label="pfc_lrn_lrate";
      desc="[Default: 0.04]  learning rate -- how fast the weights change per experience -- since version 7.8.5, a hidden factor of 2 has been removed, so this should be 2x what you used to use previously (e.g., default used to be .02, now is .04) -- this governs the rate of change for the fastest adapting weights -- see slow_wts for a more slowly adapting factor";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PfcLrnCons"]$$;
      mbr=LeabraConSpec::lrate;
      is_numeric=1;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[9] {
      user_data_=NULL;
      label="pfc_lrn_learn_qtr";
      desc=" quarters after which learning (Compute_dWt) should take place<br> * Q1:  first quarter<br> * Q2:  second quarter<br> * Q3:  third quarter -- posterior cortical minus phase<br> * Q4:  fourth quarter -- posterior cortical plus phase";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PfcLrnCons"]$;
      mbr=LeabraConSpec::learn_qtr;
      is_numeric=0;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[10] {
      user_data_=NULL;
      label="pfcfm_trc_wt_scale";
      desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  no plus net: [Default: false]  do not send net input in the plus phase over this connection -- prevents this connection from driving error-driven learning in areas that it projects to -- typically used for projections to decoder output layers or in other specialized testing situations";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PfcLrnCons"].children["PFCfmTRC"]$$;
      mbr=LeabraConSpec::wt_scale;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
    };
    EditMbrItem_Group @.gp["BG"] {
     user_data_=NULL;
     name="BG";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      user_data_=NULL;
      label="matrix_go_units_matrix";
      desc=" parameters for Matrix activation dynamics<br>  out ach inhib: [Default: 0:0.3]  how much does the LACK of ACh from the TAN units drive extra inhibition to output-gating Matrix units -- gi += out_ach_inhib * (1-ach) -- provides a bias for output gating on reward trials -- do NOT apply to NoGo, only Go -- this is a key param -- between 0.1-0.3 usu good -- see how much output gating happening and change accordingly<br>  n mnt x: [Default: -1]  number of maintenance gating stripes along the x axis -- -1 = divide evenly between mnt and out -- if uneven numbers or only one or the other is present then you need to set this";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"]$$;
      mbr=MSNUnitSpec::matrix;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[1] {
      user_data_=NULL;
      label="matrix_go_units_noise";
      desc="generally var of around .001 works best";
      cust_desc=1;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"]$;
      mbr=LeabraUnitSpec::noise;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[2] {
      user_data_=NULL;
      label="matrix_go_units_deep_mod_min";
      desc="Controls strength of bias for output gating to occur in stripes that are already maintaining information -- PFCmnt deep modulation of output gating";
      cust_desc=1;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"].deep$$;
      mbr=DeepSpec::mod_min;
      is_numeric=1;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[3] {
      user_data_=NULL;
      label="matrix_layer_unit_gp_inhib";
      desc=" how to compute unit-group-level inhibition (only relevant if layer actually has unit groups -- net inhibition is MAX of all operative inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- any inhibitory unit inhibition is just added on top of this computed inhibition<br>  on:  enable this form of inhibition (layer or unit group) -- if only using inhibitory interneurons, both can be turned off<br>  gi: [Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init<br>  ff: [Default: 1]  overall inhibitory contribution from feedforward inhibition -- multiplies average netinput (i.e., synaptic drive into layer) -- this anticipates upcoming changes in excitation, but if set too high, it can make activity slow to emerge -- see also ff0 for a zero-point for this value<br>  fb: [Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)<br>  fb tau: [Default: 1.4]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating feedback inhibitory values -- prevents oscillations that otherwise occur -- relatively rapid 1.4 typically works, but may need to go longer if oscillations are a problem<br>  max vs avg: [Default: 0;0.5;1]  what proportion of the maximum vs. average netinput to use in the feedforward inhibition computation -- 0 = all average, 1 = all max, and values in between = proportional mix between average and max (ff_netin = avg + ff_max_vs_avg * (max - avg)) -- including more max can be beneficial especially in situations where the average can vary significantly but the activity should not -- max is more robust in many situations but less flexible and sensitive to the overall distribution -- max is better for cases more closely approximating single or strictly fixed winner-take-all behavior -- 0.5 is a good compromize in many cases and generally requires a reduction of .1 or slightly more (up to .3-.5) from the gi value for 0<br>  ff0: [Default: 0.1]  feedforward zero point for average netinput -- below this level, no FF inhibition is computed based on avg netinput, and this value is subtraced from the ff inhib contribution above this value -- the 0.1 default should be good for most cases (and helps FF_FB produce k-winner-take-all dynamics), but if average netinputs are lower than typical, you may need to lower it";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$$;
      mbr=LeabraLayerSpec::unit_gp_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[4] {
      user_data_=NULL;
      label="matrix_layer_lay_inhib";
      desc=" how to compute layer-wide inhibition -- uses feedforward (FF) and feedback (FB) inhibition (FFFB) based on average netinput (FF) and activation (FB) -- net inhibition is MAX of all operative inhibition -- any inhibitory unit inhibition is just added on top of this computed inhibition<br>  on:  enable this form of inhibition (layer or unit group) -- if only using inhibitory interneurons, both can be turned off<br>  gi: [Default: 1.8]  [1.5-2.3 typical, can go lower or higher as needed] overall inhibition gain -- this is main paramter to adjust to change overall activation levels -- it scales both the the ff and fb factors uniformly -- also see inhib_adapt which will adapt an additional multiplier on this overall inhibition to keep layer near target activation value specified in avg_act.targ_init<br>  ff: [Default: 1]  overall inhibitory contribution from feedforward inhibition -- multiplies average netinput (i.e., synaptic drive into layer) -- this anticipates upcoming changes in excitation, but if set too high, it can make activity slow to emerge -- see also ff0 for a zero-point for this value<br>  fb: [Default: 1]  overall inhibitory contribution from feedback inhibition -- multiplies average activation -- this reacts to layer activation levels and works more like a thermostat (turning up when the 'heat' in the layer is too high)<br>  fb tau: [Default: 1.4]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating feedback inhibitory values -- prevents oscillations that otherwise occur -- relatively rapid 1.4 typically works, but may need to go longer if oscillations are a problem<br>  max vs avg: [Default: 0;0.5;1]  what proportion of the maximum vs. average netinput to use in the feedforward inhibition computation -- 0 = all average, 1 = all max, and values in between = proportional mix between average and max (ff_netin = avg + ff_max_vs_avg * (max - avg)) -- including more max can be beneficial especially in situations where the average can vary significantly but the activity should not -- max is more robust in many situations but less flexible and sensitive to the overall distribution -- max is better for cases more closely approximating single or strictly fixed winner-take-all behavior -- 0.5 is a good compromize in many cases and generally requires a reduction of .1 or slightly more (up to .3-.5) from the gi value for 0<br>  ff0: [Default: 0.1]  feedforward zero point for average netinput -- below this level, no FF inhibition is computed based on avg netinput, and this value is subtraced from the ff inhib contribution above this value -- the 0.1 default should be good for most cases (and helps FF_FB produce k-winner-take-all dynamics), but if average netinputs are lower than typical, you may need to lower it";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$;
      mbr=LeabraLayerSpec::lay_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[5] {
      user_data_=NULL;
      label="matrix_layer_inhib_misc";
      desc=" extra parameters for special forms of inhibition beyond the basic FFFB dynamic specified in inhib<br>  net thr: [Default: 0;0.2]  threshold on net input for inclusion in the computation of the average netinput, which in turn drives feedforward inhibition -- this is important for preventing units that don't have any significant input from diluting the overall level of inhibition -- prior to version 7.8.7 this was effectively 0 -- set to 0.2 if inhibition is being inappropriately diluted by these off units (not all such cases benefit from this filtering -- experiment) -- see also thr_rel and thr_act options for whether this is a relative vs. absolute threshold, and whether it applies to activations or not<br>  thr rel: [Default: true]  if true, net_thr is relative to the maximum net input within the layer (from the previous cycle) -- this is useful because net input values evolve over time and a fixed threshold prevents any ff inhibition early in settling when net inputs are low<br>  self fb: [Default: 0.5;0.02;0;1]  individual unit self feedback inhibition -- can produce proportional activation behavior in individual units for specialized cases (e.g., scalar val or BG units), but not so good for typical hidden layers<br>  self tau: [Default: 1.4]  time constant in cycles, which should be milliseconds typically (roughly, how long it takes for value to change significantly -- 1.4x the half-life) for integrating unit self feedback inhibitory values -- prevents oscillations that otherwise occur -- relatively rapid 1.4 typically works, but may need to go longer if oscillations are a problem<br>  fb up immed:  should the feedback inhibition rise immediately to the driving value, and then decay with fb_tau time constant? this is important for spiking activation function. otherwise, all feedback component changes are goverened by fb_tau, which works better for rate-code case";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$;
      mbr=LeabraLayerSpec::inhib_misc;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[6] {
      user_data_=NULL;
      label="matrix_layer_del_inhib";
      desc=" delayed inhibition, as a function of per-unit net input on prior trial and/or phase -- produces temporal derivative effects<br>  on:  enable delayed inhibition <br>  prv trl:  proportion of per-unit net input on previous trial to add in as inhibition <br>  prv q:  proportion of per-unit net input on previous gamma-frequency quarter to add in as inhibition ";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$;
      mbr=LeabraLayerSpec::del_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[7] {
      user_data_=NULL;
      label="matrix_cons_go_lrate";
      desc="Default Matrix lrate is .01";
      cust_desc=1;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$;
      mbr=LeabraConSpec::lrate;
      is_numeric=1;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[8] {
      user_data_=NULL;
      label="matrix_cons_go_trace";
      desc=" parameters for trace-based learning <br>  ach reset thr: [Default: 0.5]  threshold on receiving unit ach value, sent by TAN units, for reseting the trace -- only applicable for trace-based learning<br>  msn deriv: [Default: true]  use the sigmoid derivative factor msn * (1-msn) in modulating learning -- otherwise just multiply by msn activation directly -- this is generally beneficial for learning to prevent weights from continuing to increase when activations are already strong (and vice-versa for decreases)<br>  max vs deep mod:  for VS matrix TRACE_NO_THAL_VS and DA_HEBB_VS learning rules, this is the maximum value that the deep_mod_net modulatory inputs from the basal amygdala (up state enabling signal) can contribute to learning";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$;
      mbr=MSNConSpec::trace;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[9] {
      user_data_=NULL;
      label="matrix_cons_go_tr_thal";
      desc=" gain parameters for trace-based thalamic-gated learning <br>  full params: [Default: false]  use the full set of 2x2x2=8 parameters for all combinations of gating, go/nogo, and positive/negative dopamine -- otherwise just use the two key parameters that typically matter (other values are all 1.0f)<br>  not gated: [Default: 0.7]  learning rate for all not-gated stripes, which learn in the opposite direction to the gated stripes, and typically with a slightly lower learning rate -- although there are different learning logics associated with each of these different not-gated cases (click full_params on to see each of them), it turns out in practice that the same learning rate for all works best, and is simplest<br>  gate go pos: [Default: 1]  learning rate for gated, Go (D1), positive dopamine (weights increase) -- this is main direct pathway learning for positive reinforcement (outcomes better than expected), and defaults to 1 as the 'reference' learning rate -- per Thorndike's Law of Effect, actions that result in positive outcomes should be reinforced -- even though the action is already successful, it should be strengthened to better compete with other possible actions in the future, and make the action more vigorous<br>  gate go neg: [Default: 1]  learning rate for gated, Go (D1), negative dopamine (weights decrease) -- this is the complementary main direct pathway learning for negative reinforcement (outcomes worse than expected), and defaults to 1 to balance the positive case, and allow learning here to track rate of success essentially linearly in an unbiased manner<br>  gate nogo pos: [Default: 0.1]  learning rate for gated, NoGo (D2), positive dopamine (weights decrease) -- this is the single most important learning parameter here -- by making this relatively small (but non-zero), an asymmetry in the role of Go vs. NoGo is established, whereby the NoGo pathway focuses largely on punishing and preventing actions associated with negative outcomes, while those assoicated with positive outcomes only very slowly get relief from this NoGo pressure -- this is critical for causing the model to explore other possible actions even when a given action SOMETIMES produces good results -- NoGo demands a very high, consistent level of good outcomes in order to have a net decrease in these avoidance weights. Note that the gating signal applies to both Go and NoGo MSN's for gated stripes, ensuring learning is about the action that was actually selected (see not_ cases for logic for actions that were close but not taken)<br>  gate nogo neg: [Default: 1]  learning rate for gated, NoGo (D2), negative dopamine (weights increase) -- strong (1.0) learning here to drive more NoGo for actions associated with negative outcomes -- the asymmetry with gate_nogo_pos is key as described there -- this remains at the default 1 maximal learning rate<br>  not go pos: [Default: 0.7]  learning rate for not-gated, Go (D1), positive dopamine (weights decrease) -- serves to 'preventatively' tune the timing of Go firing, by decreasing weights to the extent that the Go unit fires but does not win the competition, and yet performance is still good (i.e., positive dopamine)<br>  not go neg: [Default: 0.7]  learning rate for not-gated, Go (D1), negative dopamine (weights increase) -- increases weights to alternative Go firing pathways during errors, to help explore alternatives that work better, given that there are still errors -- because learning is proportional to level of MSN activation, those neurons that are most active, while still not winning the overall gating competition at the GPi stripe level, learn the most<br>  not nogo pos: [Default: 0.7]  learning rate for not-gated, NoGo (D2), positive dopamine (weights increase) -- these are NoGo units that were active and, because this stripe was not gated, effectively blocked the gating of this action, and performance was overall successful (positive dopamine) -- thus, this learning reinforces that successful blocking to maintain and reinforce it further to the extent that it continues to be successful -- overall this learning must be well balanced with the not_nogo_neg learning -- having the same assymmetry that is present in the gated nogo pos vs. neg is NOT beneficial here -- because these are non-gated stripes, there are presumably a larger population of them and the non-gated nature means that we don't have that good of a credit assignment signal about how critical these are, so the strong punishment-oriented asymmetry doesn't work here -- instead a basic balanced accounting of pos vs. neg for these stripes (using the same values for pos vs. neg) works best<br>  not nogo neg: [Default: 0.7]  learning rate for not-gated, NoGo (D2), negative dopamine (weights decrease) -- these are NoGo units that were active and therefore caused the corresponding stripe to NOT win the gating competition, and yet the outcome was NOT successful, so weights decrease here to STOP blocking these actions and explore more whether this action might be useful -- see not_nogo_pos for logic about these being balanced values, not strongly asymmetric as in the gated case";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$;
      mbr=MSNConSpec::tr_thal;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[10] {
      user_data_=NULL;
      label="matrix_cons_fm_pfc_wt_scale";
      desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  no plus net: [Default: false]  do not send net input in the plus phase over this connection -- prevents this connection from driving error-driven learning in areas that it projects to -- typically used for projections to decoder output layers or in other specialized testing situations";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"].children["MatrixConsFmPFC"]$$;
      mbr=LeabraConSpec::wt_scale;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[11] {
      user_data_=NULL;
      label="thal_units_gpi";
      desc=" parameters controlling the gpi functionality: how to weight the Go vs. NoGo pathway inputs, and gating threshold<br>  net gain: [Default: 3]  extra netinput gain factor to compensate for reduction in netinput from subtracting away nogo -- this is IN ADDITION to adding the nogo factor as an extra gain: net = (net_gain + nogo) * (go_in - nogo * nogo_in)<br>  nogo: [Default: 1;0.1]  how much to weight NoGo inputs relative to Go inputs (which have an implied weight of 1.0)<br>  gate thr: [Default: 0.2]  threshold applied to activation to drive gating -- when any unit activation gets above this threshold, it sends the activation through sending projections to the thal field in Matrix units, otherwise it sends a 0<br>  thr act: [Default: true]  apply threshold to unit act_eq activations (i.e., turn off units that are below threshold) -- this is what is sent to the InvertUnitSpec, so we effectively threshold the gating output<br>  min thal: [Default: 0.2]  minimum thal value to send to thal on layers we project to -- range between gate_thr and 1.0 is mapped into min_thal:1.0 range -- e.g., setting to 1.0 will effectively produce binary gating outputs -- set to 0 (or < gate_thr) to retain raw gate_thr to 1.0 range";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["ThalUnits"]$$;
      mbr=GPiInvUnitSpec::gpi;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[12] {
      user_data_=NULL;
      label="thal_layer_lay_inhib";
      desc="gpi inhib is key param -- between .6 and .8 or so gi seems good overall -- determines how many stripes gate on average";
      cust_desc=1;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["ThalLayer"]$$;
      mbr=LeabraLayerSpec::lay_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[13] {
      user_data_=NULL;
      label="gpe_no_go_layer_lay_inhib";
      desc="gpe nogo inhib also key -- between 1.6 and 2.2 gi is generally good -- gpe does selective editing of gating -- don't want too much activity but need some..";
      cust_desc=1;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["ThalLayer"].children["GPeNoGoLayer"]$$;
      mbr=LeabraLayerSpec::lay_inhib;
      is_numeric=0;
      is_single=0;
      param_search {
       user_data_=NULL;
       record=0;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[14] {
      user_data_=NULL;
      label="patch_units_shunt_factor";
      desc="[Default: 0.2;0.5]  multiplies the dopamine value by this factor -- 0 = complete shunting -- should be a factor < 1.0";
      cust_desc=0;
      base=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PatchUnits"]$$;
      mbr=PatchUnitSpec::shunt_factor;
      is_numeric=1;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
     EditMbrItem @[15] {
      user_data_=NULL;
      label="patch_units_shunt_ach";
      desc="[Default: true]  also shunt the ACh value driven from TAN units -- this prevents clearing of MSNConSpec traces -- more plausibly the patch units directly interfere with the effects of TAN's rather than through ach, but it is easier to implement with ach shunting here.";
      cust_desc=0;
      base=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PatchUnits"]$;
      mbr=PatchUnitSpec::shunt_ach;
      is_numeric=0;
      is_single=1;
      param_search {
       user_data_=NULL;
       record=1;
       search=0;
       range=;
      };
      param_set_value {
       user_data_=NULL;
       saved_value=;
      };
      notes {
       user_data_=NULL;
       notes=;
      };
     };
    };
   };
   mths {
    user_data_=NULL;
    name="mths";
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 param_sets {
  user_data_=NULL;
  name="param_sets";
  el_typ=ParamSet;
  el_def=0;
 };
 data {
  user_data_=NULL;
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp["InputData"] {
   user_data_=NULL;
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["StdInputData"] {
    user_data_=NULL;
    name="StdInputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @["Name"] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [32] "a_rew_100";"b_rew_80";"c_rew_60";"d_rew_40";"ldiag";"random";"a_rew_100";"a_rew_100";"a_rew_100";"a_rew_100";
"b_rew_80";"b_rew_80";"b_rew_80";"b_rew_80";"c_rew_60";"c_rew_60";"c_rew_60";"c_rew_60";"d_rew_40";"d_rew_40";
"d_rew_40";"d_rew_40";"e_rew_20";"e_rew_20";"e_rew_20";"e_rew_20";"e_rew_20";"f_rew_00";"f_rew_00";"f_rew_00";
"f_rew_00";"f_rew_00";      };
     };
     float_Data @["Input"] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 6;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=6;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6 1 32] 1;0;0;0;0;0;0;1;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;1;      };
     };
     float_Data @["SNc"] {
      name="SNc";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [2] ;;      };
      width=3;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1 1 32] 1;1;1;1;1;1;1;1;1;1;
1;1;1;-1;1;1;-1;-1;1;-1;
-1;-1;1;-1;-1;-1;-1;-1;-1;-1;
-1;-1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [30] 0;6;7;8;9;1;10;11;12;13;
2;14;15;16;17;3;18;19;20;21;
22;23;24;25;26;27;28;29;30;31;
    };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["OutputData"] {
   user_data_=NULL;
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @["TrialOutputData"] {
    user_data_=NULL;
    name="TrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_47";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_48";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_134";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_49";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_646";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_sse"] {
      user_data_=NULL;
      name="PFCout_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_norm_err"] {
      user_data_=NULL;
      name="PFCout_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_cos_err"] {
      user_data_=NULL;
      name="PFCout_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_lay_net_sd"] {
      name="GPeNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_lay_net_sd"] {
      user_data_=NULL;
      name="GPi_Thalamus_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_lay_net_sd"] {
      name="MatrixGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_lay_net_sd"] {
      name="MatrixNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_net_sd"] {
      user_data_=NULL;
      name="PFCout_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_lay_net_sd"] {
      user_data_=NULL;
      name="PFCout_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_cos_diff"] {
      name="net_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_trial_cos_diff"] {
      name="net_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_avg_act_diff"] {
      name="net_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_cos_diff"] {
      name="GPeNoGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_cos_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_cos_diff"] {
      name="MatrixGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_cos_diff"] {
      name="MatrixNoGo_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_cos_diff"] {
      user_data_=NULL;
      name="PFCout_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_cos_diff"] {
      user_data_=NULL;
      name="PFCout_deep_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_trial_cos_diff"] {
      name="GPeNoGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_trial_cos_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_trial_cos_diff"] {
      name="MatrixGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_trial_cos_diff"] {
      name="MatrixNoGo_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_trial_cos_diff"] {
      user_data_=NULL;
      name="PFCout_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_trial_cos_diff"] {
      user_data_=NULL;
      name="PFCout_deep_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=26;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_act_diff"] {
      name="GPeNoGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_act_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_act_diff"] {
      name="MatrixGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_act_diff"] {
      name="MatrixNoGo_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_act_diff"] {
      user_data_=NULL;
      name="PFCout_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_act_diff"] {
      user_data_=NULL;
      name="PFCout_deep_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["EpochOutputData"] {
    user_data_=NULL;
    name="EpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_49";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_50";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      user_data_=NULL;
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      user_data_=NULL;
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      user_data_=NULL;
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      user_data_=NULL;
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_sse"] {
      user_data_=NULL;
      name="PFCout_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_cnt_err"] {
      user_data_=NULL;
      name="PFCout_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_pct_cor"] {
      user_data_=NULL;
      name="PFCout_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_pct_err"] {
      user_data_=NULL;
      name="PFCout_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_norm_err"] {
      user_data_=NULL;
      name="PFCout_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_cos_err"] {
      user_data_=NULL;
      name="PFCout_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_avg_cos_diff"] {
      user_data_=NULL;
      name="net_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="net_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["net_avg_avg_act_diff"] {
      user_data_=NULL;
      name="net_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_cos_diff"] {
      user_data_=NULL;
      name="GPeNoGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_cos_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_cos_diff"] {
      user_data_=NULL;
      name="MatrixGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_cos_diff"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_cos_diff"] {
      user_data_=NULL;
      name="PFCout_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_cos_diff"] {
      user_data_=NULL;
      name="PFCout_deep_avg_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="GPeNoGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=26;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=31;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="MatrixGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=29;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="PFCout_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_trial_cos_diff"] {
      user_data_=NULL;
      name="PFCout_deep_avg_trial_cos_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=30;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_avg_act_diff"] {
      user_data_=NULL;
      name="GPeNoGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=24;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_avg_act_diff"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=29;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_avg_act_diff"] {
      user_data_=NULL;
      name="MatrixGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=25;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_avg_act_diff"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=27;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_avg_act_diff"] {
      user_data_=NULL;
      name="PFCout_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_avg_act_diff"] {
      user_data_=NULL;
      name="PFCout_deep_avg_avg_act_diff";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=28;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_net_sd"] {
      user_data_=NULL;
      name="GPeNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_net_sd"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_net_sd"] {
      user_data_=NULL;
      name="MatrixGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_net_sd"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_net_sd"] {
      user_data_=NULL;
      name="PFCout_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_net_sd"] {
      user_data_=NULL;
      name="PFCout_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_hog_pct"] {
      user_data_=NULL;
      name="GPeNoGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_hog_pct"] {
      user_data_=NULL;
      name="GPi_Thalamus_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_hog_pct"] {
      user_data_=NULL;
      name="MatrixGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_hog_pct"] {
      user_data_=NULL;
      name="MatrixNoGo_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_hog_pct"] {
      user_data_=NULL;
      name="PFCout_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_hog_pct"] {
      user_data_=NULL;
      name="PFCout_deep_hog_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_dead_pct"] {
      user_data_=NULL;
      name="GPeNoGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_dead_pct"] {
      user_data_=NULL;
      name="GPi_Thalamus_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_dead_pct"] {
      user_data_=NULL;
      name="MatrixGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_dead_pct"] {
      user_data_=NULL;
      name="MatrixNoGo_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_dead_pct"] {
      user_data_=NULL;
      name="PFCout_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_dead_pct"] {
      user_data_=NULL;
      name="PFCout_deep_dead_pct";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_netmax"] {
      user_data_=NULL;
      name="GPeNoGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_netmax"] {
      user_data_=NULL;
      name="GPi_Thalamus_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_netmax"] {
      user_data_=NULL;
      name="MatrixGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_netmax"] {
      user_data_=NULL;
      name="MatrixNoGo_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_netmax"] {
      user_data_=NULL;
      name="PFCout_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=13;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_netmax"] {
      user_data_=NULL;
      name="PFCout_deep_netmax";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_act"] {
      user_data_=NULL;
      name="GPeNoGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=15;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_act"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=20;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_act"] {
      user_data_=NULL;
      name="MatrixGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_act"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_act"] {
      user_data_=NULL;
      name="PFCout_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_act"] {
      user_data_=NULL;
      name="PFCout_deep_avg_act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_netrel"] {
      user_data_=NULL;
      name="GPeNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1 1 1 1 0]       };
     };
     float_Data @["GPi_Thalamus_netrel"] {
      user_data_=NULL;
      name="GPi_Thalamus_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [1 1 1 1 0]       };
     };
     float_Data @["MatrixGo_netrel"] {
      user_data_=NULL;
      name="MatrixGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 6;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6 1 1 1 0]       };
     };
     float_Data @["MatrixNoGo_netrel"] {
      user_data_=NULL;
      name="MatrixNoGo_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 6;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6 1 1 1 0]       };
     };
     float_Data @["PFCout_netrel"] {
      user_data_=NULL;
      name="PFCout_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 6;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6 1 1 1 0]       };
     };
     float_Data @["PFCout_deep_netrel"] {
      user_data_=NULL;
      name="PFCout_deep_netrel";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 6;1;1;1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [4] ;;;;      };
      width=0;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [6 1 1 1 0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestTrialOutputData"] {
    user_data_=NULL;
    name="TestTrialOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["train_mode"] {
      name="train_mode";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["group"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name="UserDataItem_List_133";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="group";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["trial"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["tick"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="tick";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["time"] {
      name="time";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["trial_name"] {
      name="trial_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["group_name"] {
      name="group_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     String_Data @["output_name"] {
      name="output_name";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["rt_cycles"] {
      name="rt_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=9;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["sse"] {
      name="sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["norm_err"] {
      name="norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cos_err"] {
      name="cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["ext_rew"] {
      name="ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_sse"] {
      user_data_=NULL;
      name="PFCout_lay_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_norm_err"] {
      user_data_=NULL;
      name="PFCout_lay_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_cos_err"] {
      user_data_=NULL;
      name="PFCout_lay_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_lay_net_sd"] {
      user_data_=NULL;
      name="GPeNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_lay_net_sd"] {
      user_data_=NULL;
      name="GPi_Thalamus_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_lay_net_sd"] {
      user_data_=NULL;
      name="MatrixGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_lay_net_sd"] {
      user_data_=NULL;
      name="MatrixNoGo_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_net_sd"] {
      user_data_=NULL;
      name="PFCout_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_lay_net_sd"] {
      user_data_=NULL;
      name="PFCout_deep_lay_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
   DataTable @["TestEpochOutputData"] {
    user_data_=NULL;
    name="TestEpochOutputData";
    desc=;
    data {
     user_data_=NULL;
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @["batch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     int_Data @["epoch"] {
      UserDataItem_List @*(.user_data_) {
       user_data_=NULL;
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @["NARROW"] {
	user_data_=NULL;
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_sse"] {
      name="avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["cnt_err"] {
      name="cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_cor"] {
      name="pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["pct_err"] {
      name="pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_norm_err"] {
      name="avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=12;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cos_err"] {
      name="avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_ext_rew"] {
      name="avg_ext_rew";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=11;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["avg_cycles"] {
      name="avg_cycles";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=10;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_tot"] {
      name="epoch_time_tot";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["epoch_time_usr"] {
      name="epoch_time_usr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=14;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_sse"] {
      user_data_=NULL;
      name="PFCout_lay_avg_sse";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_cnt_err"] {
      user_data_=NULL;
      name="PFCout_lay_cnt_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_pct_cor"] {
      user_data_=NULL;
      name="PFCout_lay_pct_cor";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_pct_err"] {
      user_data_=NULL;
      name="PFCout_lay_pct_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_norm_err"] {
      user_data_=NULL;
      name="PFCout_lay_avg_norm_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_lay_avg_cos_err"] {
      user_data_=NULL;
      name="PFCout_lay_avg_cos_err";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPeNoGo_avg_net_sd"] {
      user_data_=NULL;
      name="GPeNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=18;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["GPi_Thalamus_avg_net_sd"] {
      user_data_=NULL;
      name="GPi_Thalamus_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=23;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixGo_avg_net_sd"] {
      user_data_=NULL;
      name="MatrixGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=19;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["MatrixNoGo_avg_net_sd"] {
      user_data_=NULL;
      name="MatrixNoGo_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=21;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_avg_net_sd"] {
      user_data_=NULL;
      name="PFCout_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=17;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
     float_Data @["PFCout_deep_avg_net_sd"] {
      user_data_=NULL;
      name="PFCout_deep_avg_net_sd";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       user_data_=NULL;
       expr=;
      };
      dim_names {
       user_data_=NULL;
       name="dim_names";
      [0]       };
      width=22;
      matrix_col_width=10;
      ar {
       user_data_=NULL;
       name="ar";
      [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     user_data_=NULL;
     name="row_indexes";
    [0]     };
    last_sort_spec {
     user_data_=NULL;
     name="last_sort_spec";
     ops {
      user_data_=NULL;
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
    control_panel_cells {
     user_data_=NULL;
     name="control_panel_cells";
     el_typ=DataTableCell;
     el_def=0;
    };
   };
  };
  DataTable_Group @.gp["AnalysisData"] {
   user_data_=NULL;
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
  };
 };
 programs {
  user_data_=NULL;
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @["LeabraStartup"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @["DocLink"] {
     user_data_=NULL;
     name="DocLink";
     doc=.projects["bg"].programs["LeabraStartup"].doc$$;
    };
   };
   name="LeabraStartup";
   short_nm="Startup";
   tags="Leabra, Startup";
   desc="run project in the background command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batch_start=xxx] [n_batches=xx} [tag=xxx] and other opts -- see code";
   version {
    user_data_=NULL;
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=STARTUP_RUN;
   stop_step_cond {
    user_data_=NULL;
    expr=;
   };
   objs {
    user_data_=NULL;
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   types {
    user_data_=NULL;
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    user_data_=NULL;
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["network"] {
     user_data_=NULL;
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects["bg"].networks["BgNet"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @["input_data"] {
     user_data_=NULL;
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["bg"].data.gp["InputData"]["StdInputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    user_data_=NULL;
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @["train_prog"] {
     user_data_=NULL;
     name="train_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|EDIT_VAL;
     reference=0;
     desc="set this to point to your train process";
     init_from=NULL;
    };
    ProgVar @["batch_prog"] {
     user_data_=NULL;
     name="batch_prog";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @["param_set"] {
     user_data_=NULL;
     name="param_set";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of saved parameter set to apply at startup";
     init_from=NULL;
    };
    ProgVar @["tag"] {
     user_data_=NULL;
     name="tag";
     var_type=T_String;
     string_val="_gui";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["batch_str"] {
     user_data_=NULL;
     name="batch_str";
     var_type=T_String;
     string_val="00";
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch number as a string (leading zeros)";
     init_from=NULL;
    };
    ProgVar @["log_dir"] {
     user_data_=NULL;
     name="log_dir";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @["log_file_nm"] {
     user_data_=NULL;
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @["batch_start"] {
     user_data_=NULL;
     name="batch_start";
     var_type=T_Int;
     int_val=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="batch starting number";
     init_from=NULL;
    };
    ProgVar @["EpochOutputData"] {
     user_data_=NULL;
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["bg"].data.gp["OutputData"]["EpochOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["TrialOutputData"] {
     user_data_=NULL;
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects["bg"].data.gp["OutputData"]["TrialOutputData"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["MyClusterRun"] {
     user_data_=NULL;
     name="MyClusterRun";
     var_type=T_Object;
     object_type=ClusterRun;
     object_val=.projects["bg"].ctrl_panels["ClusterRun"]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @["param_sets"] {
     user_data_=NULL;
     name="param_sets";
     var_type=T_Object;
     object_type=ParamSet_Group;
     object_val=.projects["bg"].param_sets$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    user_data_=NULL;
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    user_data_=NULL;
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    user_data_=NULL;
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    RegisterArgs @[0] {
     user_data_=NULL;
     desc="This is KEY!!! actually processes all args, including those from ProgVarFmArg guys below";
     flags=CAN_REVERT_TO_CODE;
     code_string="Register Args";
    };
    PrintExpr @[1] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Loaded project: \" << .projects[0].file_name";
     expr {
      user_data_=NULL;
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
     debug=0;
    };
    Comment @[2] {
     user_data_=NULL;
     desc="= Std variables in startup program itself =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Std variables in startup program itself =";
    };
    ProgVarFmArg @[3] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:tag in Program:LeabraStartup from Arg:tag";
     prog=.projects["bg"].programs["LeabraStartup"]$$;
     var_name="tag";
     arg_name="tag";
    };
    ProgVarFmArg @[4] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:log_dir in Program:LeabraStartup from Arg:log_dir";
     prog=$.projects["bg"].programs["LeabraStartup"]$;
     var_name="log_dir";
     arg_name="log_dir";
    };
    ProgVarFmArg @[5] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:param_set in Program:LeabraStartup from Arg:param_set";
     prog=$.projects["bg"].programs["LeabraStartup"]$;
     var_name="param_set";
     arg_name="param_set";
    };
    ProgVarFmArg @[6] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:max_epoch in Program:LeabraTrain from Arg:epochs";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[7] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:rnd_init in Program:LeabraTrain from Arg:rnd_init";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="rnd_init";
     arg_name="rnd_init";
    };
    ProgVarFmArg @[8] {
     user_data_=NULL;
     desc="starting batch -- replaces b_start";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:batch_start in Program:LeabraBatch from Arg:batch_start";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="batch_start";
     arg_name="batch_start";
    };
    ProgVarFmArg @[9] {
     user_data_=NULL;
     desc="number of batches to run";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="Set Var:n_batches in Program:LeabraBatch from Arg:n_batches";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     var_name="n_batches";
     arg_name="n_batches";
    };
    ProgVarFmArg @[10] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_wts_interval in Program:LeabraTrain from Arg:save_wts_interval";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_wts_interval";
     arg_name="save_wts_interval";
    };
    ProgVarFmArg @[11] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Set Var:save_final_wts in Program:LeabraTrain from Arg:save_final_wts";
     prog=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
     var_name="save_final_wts";
     arg_name="save_final_wts";
    };
    ControlPanelsFmArgs @[12] {
     user_data_=NULL;
     desc="sets any arg listed in the control panel";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="CtrlPanel Fm Args: var = MyClusterRun ";
     ctrl_panel_var=.projects["bg"].programs["LeabraStartup"].vars["MyClusterRun"]$$;
    };
    If @[13] {
     user_data_=NULL;
     desc="set variables to values stored in a param set";
     flags=CAN_REVERT_TO_CODE;
     code_string="if (param_set.nonempty())";
     cond {
      user_data_=NULL;
      expr="param_set.nonempty()";
     };
     true_code {
      user_data_=NULL;
      name="true_code";
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="param_sets->LoadParamSet(param_set)";
       result_var=NULL;
       obj=.projects["bg"].programs["LeabraStartup"].vars["param_sets"]$$;
       method=ParamSet_Group::LoadParamSet;
       meth_args {
	user_data_=NULL;
	name="meth_args";
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="set_name";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="param_set";
	 };
	};
       };
       meth_sig="bool LoadParamSet(taString& set_name)";
       meth_desc=;
      };
     };
    };
    Comment @[14] {
     user_data_=NULL;
     desc="= Add your own variables here =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Add your own variables here =";
    };
    Comment @[15] {
     user_data_=NULL;
     desc="= Below saves log files of standard data tables =";
     flags=CAN_REVERT_TO_CODE;
     code_string="// = Below saves log files of standard data tables =";
    };
    If @[16] {
     user_data_=NULL;
     desc="set tag for starting batch (new code in v 8.0)";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="if (taMisc::CheckArgByName(\"batch_start\"))";
     cond {
      user_data_=NULL;
      expr="taMisc::CheckArgByName(\"batch_start\")";
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      ProgVarFmArg @[0] {
       user_data_=NULL;
       desc="read in the arg to us too, so we can set file names based on it";
       flags=CAN_REVERT_TO_CODE;
       code_string="Set Var:batch_start in Program:LeabraStartup from Arg:batch_start";
       prog=$.projects["bg"].programs["LeabraStartup"]$;
       var_name="batch_start";
       arg_name="batch_start";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc="string version with leading zeros";
       flags=CAN_REVERT_TO_CODE;
       code_string="batch_str = taMisc::LeadingZeros(batch_start, 2)";
       result_var=.projects["bg"].programs["LeabraStartup"].vars["batch_str"]$$;
       object_type=taMisc;
       method=taMisc::LeadingZeros;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="num";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="batch_start";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=int;
	 type="int";
	 name="len";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="2";
	 };
	};
       };
      };
      VarIncr @[2] {
       user_data_=NULL;
       desc="add to tag for setting log file names";
       flags=CAN_REVERT_TO_CODE;
       code_string="tag += \".\" + batch_str";
       var=.projects["bg"].programs["LeabraStartup"].vars["tag"]$$;
       expr {
	user_data_=NULL;
	expr="\".\" + batch_str";
       };
      };
      If @[3] {
       user_data_=NULL;
       desc="save startup args: only for first job in parallel batch mode, or this should be 0 otherwise in any case";
       flags=CAN_REVERT_TO_CODE;
       code_string="if (batch_start == 0)";
       cond {
	user_data_=NULL;
	expr="batch_start == 0";
       };
       true_code {
	user_data_=NULL;
	name=;
	el_typ=ProgCode;
	el_def=0;
	MethodCall @[0] {
	 user_data_=NULL;
	 desc="save args to file: last arg is to include dmem proc number";
	 flags=CAN_REVERT_TO_CODE;
	 code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag.before(\".00\",-1), log_dir, false)";
	 result_var=.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$$;
	 obj=.projects["bg"].programs["LeabraStartup"].vars["EpochOutputData"]$$;
	 method=taBase::GetFileNameFmProject;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="ext";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="\".args\"";
	   };
	  };
	  ProgArg @[1] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="tag";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="tag.before(\".00\",-1)";
	   };
	  };
	  ProgArg @[2] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="subdir";
	   required=0;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_dir";
	   };
	  };
	  ProgArg @[3] {
	   user_data_=NULL;
	   arg_type=bool;
	   type="bool";
	   name="dmem_proc_no";
	   required=0;
	   def_val="false";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="false";
	   };
	  };
	 };
	 meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
	 meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
	};
	MiscCall @[1] {
	 user_data_=NULL;
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="taMisc::FullArgStringToFile(log_file_nm)";
	 result_var=NULL;
	 object_type=taMisc;
	 method=taMisc::FullArgStringToFile;
	 meth_args {
	  user_data_=NULL;
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   user_data_=NULL;
	   arg_type=const_taString_ref;
	   type="taString&";
	   name="fname";
	   required=1;
	   def_val="\"\"";
	   prev_expr=;
	   expr {
	    user_data_=NULL;
	    expr="log_file_nm";
	   };
	  };
	 };
	};
       };
      };
     };
    };
    Else @[17] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="else";
     cond {
      user_data_=NULL;
      expr=;
     };
     true_code {
      user_data_=NULL;
      name=;
      el_typ=ProgCode;
      el_def=0;
      MethodCall @[0] {
       user_data_=NULL;
       desc="save args to file: last arg is to include dmem proc number";
       flags=CAN_REVERT_TO_CODE;
       code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".args\", tag, log_dir, false)";
       result_var=$.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$;
       obj=$.projects["bg"].programs["LeabraStartup"].vars["EpochOutputData"]$;
       method=taBase::GetFileNameFmProject;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="ext";
	 required=1;
	 def_val=;
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="\".args\"";
	 };
	};
	ProgArg @[1] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="tag";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="tag";
	 };
	};
	ProgArg @[2] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="subdir";
	 required=0;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_dir";
	 };
	};
	ProgArg @[3] {
	 user_data_=NULL;
	 arg_type=bool;
	 type="bool";
	 name="dmem_proc_no";
	 required=0;
	 def_val="false";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="false";
	 };
	};
       };
       meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
       meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
      };
      MiscCall @[1] {
       user_data_=NULL;
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="taMisc::FullArgStringToFile(log_file_nm)";
       result_var=NULL;
       object_type=taMisc;
       method=taMisc::FullArgStringToFile;
       meth_args {
	user_data_=NULL;
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 user_data_=NULL;
	 arg_type=const_taString_ref;
	 type="taString&";
	 name="fname";
	 required=1;
	 def_val="\"\"";
	 prev_expr=;
	 expr {
	  user_data_=NULL;
	  expr="log_file_nm";
	 };
	};
       };
      };
     };
    };
    MiscCall @[18] {
     user_data_=NULL;
     desc="report any args that didn't get used!";
     flags=NEW_EL|CAN_REVERT_TO_CODE;
     code_string="taMisc::ReportUnusedArgs(true)";
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::ReportUnusedArgs;
     meth_args {
      user_data_=NULL;
      name="ProgArg_List_0";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="err";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
    };
    Comment @[19] {
     user_data_=NULL;
     desc="== Save epoch log -- on by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save epoch log -- on by default ==";
    };
    MethodCall @[20] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=CAN_REVERT_TO_CODE;
     code_string="log_file_nm = EpochOutputData->GetFileNameFmProject(\".epc.dat\", tag, log_dir, false)";
     result_var=$.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=$.projects["bg"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[21] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=CAN_REVERT_TO_CODE;
     code_string="EpochOutputData->SaveDataLog(log_file_nm, false, true)";
     result_var=NULL;
     obj=$.projects["bg"].programs["LeabraStartup"].vars["EpochOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[22] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving epoch log data to:\" log_file_nm";
     message="Saving epoch log data to:";
     print_var=$.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    Comment @[23] {
     user_data_=NULL;
     desc="== Save trial log -- OFF by default ==";
     flags=CAN_REVERT_TO_CODE;
     code_string="// == Save trial log -- OFF by default ==";
    };
    MethodCall @[24] {
     user_data_=NULL;
     desc="last arg is to include dmem proc number";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="log_file_nm = TrialOutputData->GetFileNameFmProject(\".trl.dat\", tag, log_dir, true)";
     result_var=$.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$;
     obj=.projects["bg"].programs["LeabraStartup"].vars["TrialOutputData"]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="ext";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="tag";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="true";
       };
      };
     };
     meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
     meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
    };
    MethodCall @[25] {
     user_data_=NULL;
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="TrialOutputData->SaveDataLog(log_file_nm, false, false)";
     result_var=NULL;
     obj=$.projects["bg"].programs["LeabraStartup"].vars["TrialOutputData"]$;
     method=DataTable::SaveDataLog;
     meth_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
      ProgArg @[2] {
       user_data_=NULL;
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="false";
       };
      };
     };
     meth_sig="void SaveDataLog(taString& fname, bool append = false, bool dmem_proc_0 = true)";
     meth_desc=" incrementally save each new row of data that is written to the datatable (at WriteClose()) to given file. writes the header first if not appending to existing file. if running under demem, dmem_proc_0 determines if only the first processor writes to the log file, or if all processors write";
    };
    PrintVar @[26] {
     user_data_=NULL;
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="Print  \"Saving trial log data to:\" log_file_nm";
     message="Saving trial log data to:";
     print_var=$.projects["bg"].programs["LeabraStartup"].vars["log_file_nm"]$;
     print_var2=NULL;
     print_var3=NULL;
     print_var4=NULL;
     print_var5=NULL;
     print_var6=NULL;
     debug=0;
    };
    OtherProgramVar @[27] {
     user_data_=NULL;
     desc="propagate the tag";
     flags=CAN_REVERT_TO_CODE;
     code_string="Vars To:  program=SaveWeights set=to  var_1=tag  var_2=?  var_3=?  var_4=? ";
     other_prog=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"]$$;
     set_other=1;
     var_1=$.projects["bg"].programs["LeabraStartup"].vars["tag"]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[28] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Print \"Running: \" << batch_prog.name";
     expr {
      user_data_=NULL;
      expr="\"Running: \" << batch_prog.name";
     };
     debug=0;
    };
    ProgramCall @[29] {
     user_data_=NULL;
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraBatch(network, input_data)";
     prog_args {
      user_data_=NULL;
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       user_data_=NULL;
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="network";
       };
      };
      ProgArg @[1] {
       user_data_=NULL;
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	user_data_=NULL;
	expr="input_data";
       };
      };
     };
     target=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    user_data_=NULL;
    name="doc";
    desc=;
    web_doc=1;
    wiki="emergent";
    url="Startup_program";
    full_url="https://grey.colorado.edu/emergent/index.php/Startup_program";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program_Group @.gp["LeabraAll_Std"] {
   user_data_=NULL;
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @["LeabraBatch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].doc$$;
     };
    };
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["batch"] {
      user_data_=NULL;
      name="batch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @["batch_start"] {
      user_data_=NULL;
      name="batch_start";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch number to start on";
      init_from=NULL;
     };
     ProgVar @["n_batches"] {
      user_data_=NULL;
      name="n_batches";
      var_type=T_Int;
      int_val=10;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of batches to run";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initializes local batch counter and batch field on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: batch";
      network_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$$;
      local_ctr_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["i"] {
	user_data_=NULL;
	name="i";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="start at the start";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch = batch_start";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
      expr {
       user_data_=NULL;
       expr="batch_start";
      };
     };
     MemberAssign @[2] {
      user_data_=NULL;
      desc="update network";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.batch = batch";
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
      path="batch";
      expr {
       user_data_=NULL;
       expr="batch";
      };
      update_after=0;
     };
     ForLoop @[3] {
      user_data_=NULL;
      desc="main loop over training runs";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (i=0; i<n_batches; i++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the training program -- sets the network and input_data args";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrain(network, input_data, true)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  user_data_=NULL;
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="true";
	  };
	 };
	};
	target=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the local batch counter and copy to network";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: batch";
	network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].args["network"]$;
	local_ctr_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraBatch"].vars["batch"]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      init {
       user_data_=NULL;
       expr="i=0";
      };
      test {
       user_data_=NULL;
       expr="i<n_batches";
      };
      iter {
       user_data_=NULL;
       expr="i++";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraBatch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraBatch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrain"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].doc$$;
     };
    };
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Train, RndSeedList";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task.  Also has a list of random seeds that are tied to the network batch counter, providing consistent runs regardless of what happens in the training of each network, or where it is run (e.g., on different processors)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=RndSeed;
     el_def=0;
     RndSeed_List @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      seeds {
       user_data_=NULL;
       name="seeds";
       el_typ=RndSeed;
       el_def=0;
       RndSeed @["RndSeed_1"] {
	user_data_=NULL;
	name="RndSeed_1";
	rnd_seed=2878175685;
       };
       RndSeed @["RndSeed_2"] {
	user_data_=NULL;
	name="RndSeed_2";
	rnd_seed=2878175686;
       };
       RndSeed @["RndSeed_3"] {
	user_data_=NULL;
	name="RndSeed_3";
	rnd_seed=2878175687;
       };
       RndSeed @["RndSeed_4"] {
	user_data_=NULL;
	name="RndSeed_4";
	rnd_seed=2878175688;
       };
       RndSeed @["RndSeed_5"] {
	user_data_=NULL;
	name="RndSeed_5";
	rnd_seed=2878175689;
       };
       RndSeed @["RndSeed_6"] {
	user_data_=NULL;
	name="RndSeed_6";
	rnd_seed=2878175690;
       };
       RndSeed @["RndSeed_7"] {
	user_data_=NULL;
	name="RndSeed_7";
	rnd_seed=2878175691;
       };
       RndSeed @["RndSeed_8"] {
	user_data_=NULL;
	name="RndSeed_8";
	rnd_seed=2878175692;
       };
       RndSeed @["RndSeed_9"] {
	user_data_=NULL;
	name="RndSeed_9";
	rnd_seed=2878175693;
       };
       RndSeed @["RndSeed_10"] {
	user_data_=NULL;
	name="RndSeed_10";
	rnd_seed=2878175694;
       };
       RndSeed @["RndSeed_11"] {
	user_data_=NULL;
	name="RndSeed_11";
	rnd_seed=2878175695;
       };
       RndSeed @["RndSeed_12"] {
	user_data_=NULL;
	name="RndSeed_12";
	rnd_seed=2878175696;
       };
       RndSeed @["RndSeed_13"] {
	user_data_=NULL;
	name="RndSeed_13";
	rnd_seed=2878175697;
       };
       RndSeed @["RndSeed_14"] {
	user_data_=NULL;
	name="RndSeed_14";
	rnd_seed=2878175698;
       };
       RndSeed @["RndSeed_15"] {
	user_data_=NULL;
	name="RndSeed_15";
	rnd_seed=2878175699;
       };
       RndSeed @["RndSeed_16"] {
	user_data_=NULL;
	name="RndSeed_16";
	rnd_seed=2878175700;
       };
       RndSeed @["RndSeed_17"] {
	user_data_=NULL;
	name="RndSeed_17";
	rnd_seed=2878175701;
       };
       RndSeed @["RndSeed_18"] {
	user_data_=NULL;
	name="RndSeed_18";
	rnd_seed=2878175702;
       };
       RndSeed @["RndSeed_19"] {
	user_data_=NULL;
	name="RndSeed_19";
	rnd_seed=2878175703;
       };
       RndSeed @["RndSeed_20"] {
	user_data_=NULL;
	name="RndSeed_20";
	rnd_seed=2878175704;
       };
       RndSeed @["RndSeed_21"] {
	user_data_=NULL;
	name="RndSeed_21";
	rnd_seed=2878175705;
       };
       RndSeed @["RndSeed_22"] {
	user_data_=NULL;
	name="RndSeed_22";
	rnd_seed=2878175706;
       };
       RndSeed @["RndSeed_23"] {
	user_data_=NULL;
	name="RndSeed_23";
	rnd_seed=2878175707;
       };
       RndSeed @["RndSeed_24"] {
	user_data_=NULL;
	name="RndSeed_24";
	rnd_seed=2878175708;
       };
       RndSeed @["RndSeed_25"] {
	user_data_=NULL;
	name="RndSeed_25";
	rnd_seed=2878175709;
       };
      };
     };
     RndSeed @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      rnd_seed=1208639044;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @["RndInitType"] {
      user_data_=NULL;
      name="RndInitType";
      desc=;
      enums {
       user_data_=NULL;
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @["OLD_SEED"] {
	user_data_=NULL;
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @["NEW_SEED"] {
	user_data_=NULL;
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
       DynEnumItem @["BATCH_SEEDS"] {
	user_data_=NULL;
	name="BATCH_SEEDS";
	value=2;
	desc="use a fixed list of random seeds with the current batch number selecting the seed to use -- provides a consistent set of initial conditions for each batch regardless..";
       };
      };
      bits=0;
     };
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["no_prompts"] {
      user_data_=NULL;
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["max_epoch"] {
      user_data_=NULL;
      name="max_epoch";
      var_type=T_Int;
      int_val=50;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["epoch"] {
      user_data_=NULL;
      name="epoch";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_mode"] {
      user_data_=NULL;
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_init"] {
      user_data_=NULL;
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       user_data_=NULL;
       enum_type=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].types["RndInitType"]$$;
       value=2;
      };
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @["err_stopcrit"] {
      user_data_=NULL;
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion for training, in terms of count of trials with errors in the epoch (nework cnt_err)";
      init_from=NULL;
     };
     ProgVar @["n_under_thr"] {
      user_data_=NULL;
      name="n_under_thr";
      var_type=T_Int;
      int_val=2;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="number of times network needs to be under stopcrit threshold to actually stop";
      init_from=NULL;
     };
     ProgVar @["save_final_wts"] {
      user_data_=NULL;
      name="save_final_wts";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the network's weights at the end of training?  ";
      init_from=NULL;
     };
     ProgVar @["save_wts_interval"] {
      user_data_=NULL;
      name="save_wts_interval";
      var_type=T_Int;
      int_val=-1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="save the weights every this many epochs, if number is >= 1 (otherwise do not save weights)";
      init_from=NULL;
     };
     ProgVar @["n_under_cnt"] {
      user_data_=NULL;
      name="n_under_cnt";
      var_type=T_Int;
      int_val=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current under threshold counter";
      init_from=NULL;
     };
     ProgVar @["rnd_seeds"] {
      user_data_=NULL;
      name="rnd_seeds";
      var_type=T_Object;
      object_type=RndSeed_List;
      object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seeds"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["train_timer"] {
      user_data_=NULL;
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["bg"].networks["BgNet"].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["rnd_seed"] {
      user_data_=NULL;
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].objs["rnd_seed"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @["GetRandomSeed"] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed() returns: int";
      name="GetRandomSeed";
      return_type=T_Int;
      object_type=taOBase;
      args {
       user_data_=NULL;
       name=;
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       Switch @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="switch(rnd_init)";
	switch_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_init"]$$;
	cases {
	 user_data_=NULL;
	 name=;
	 el_typ=CaseBlock;
	 el_def=0;
	 CaseBlock @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: OLD_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results) -- click on rnd_seed object to generate a new seed to use for this if you want";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->OldSeed()";
	    result_var=NULL;
	    obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$$;
	    method=RndSeed::OldSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void OldSeed()";
	    meth_desc=" restore current seed to random num generator";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="OLD_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[1] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: NEW_SEED";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seed->NewSeed()";
	    result_var=NULL;
	    obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seed"]$;
	    method=RndSeed::NewSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	    };
	    meth_sig="void NewSeed()";
	    meth_desc=" set the seed to a new random value (based on time and process id)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="NEW_SEED";
	  };
	  is_default=0;
	 };
	 CaseBlock @[2] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="case: BATCH_SEEDS";
	  prog_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   MethodCall @[0] {
	    user_data_=NULL;
	    desc="restore previous random seed (all runs produce same results); change to NewSeed to have new random numbers each time";
	    flags=CAN_REVERT_TO_CODE;
	    code_string="rnd_seeds->UseSeed(network.batch % rnd_seeds.seeds.size)";
	    result_var=NULL;
	    obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["rnd_seeds"]$$;
	    method=RndSeed_List::UseSeed;
	    meth_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=int;
	      type="int";
	      name="idx";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network.batch % rnd_seeds.seeds.size";
	      };
	     };
	    };
	    meth_sig="void UseSeed(int idx)";
	    meth_desc=" use seed at given index in the list (does OldSeed on it); wraps around (modulus) if idx is > list size (issues warning)";
	   };
	  };
	  case_val {
	   user_data_=NULL;
	   expr="BATCH_SEEDS";
	  };
	  is_default=0;
	 };
	};
       };
      };
     };
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="no_prompts = false";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["no_prompts"]$$;
      expr {
       user_data_=NULL;
       expr="false";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->CheckConfig(false)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WtInitPrompt @[5] {
      user_data_=NULL;
      desc="don't initialize weights without checking";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (gui && \"Do you want to Initialize Network Weights\")";
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="need to have built network by now in any case, so do it here to make double sure -- prevents errs when loading project with startup program";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Build()";
	result_var=NULL;
	obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Build;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Build()";
	meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
       };
       MethodCall @[1] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer = network.train_time";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="n_under_cnt = 0";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
      expr {
       user_data_=NULL;
       expr="0";
      };
     };
     MemberAssign @[3] {
      user_data_=NULL;
      desc="set network's training mode to our local value";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.train_mode = train_mode";
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="train_mode";
      };
      update_after=0;
     };
     FunctionCall @[4] {
      user_data_=NULL;
      desc="initialize random seed";
      flags=CAN_REVERT_TO_CODE;
      code_string="GetRandomSeed()";
      result_var=NULL;
      fun=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].functions["GetRandomSeed"]$;
      fun_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (no_prompts)";
      cond {
       user_data_=NULL;
       expr="no_prompts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Init_Weights()";
	result_var=NULL;
	obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	method=Network::Init_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Init_Weights()";
	meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
       };
       PrintExpr @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Print network.name << \" Weights Initialized\"";
	expr {
	 user_data_=NULL;
	 expr="network.name << \" Weights Initialized\"";
	};
	debug=0;
       };
      };
     };
     AssignExpr @[6] {
      user_data_=NULL;
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch = network.epoch";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch";
      };
     };
     WhileLoop @[7] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="while (epoch < max_epoch)";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraEpoch(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	user_data_=NULL;
	desc="increment the epoch counter";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: epoch";
	network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].args["network"]$;
	local_ctr_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["epoch"]$;
	counter=Network::epoch;
	update_after=0;
       };
       If @[2] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (network.cnt_err <= err_stopcrit)";
	cond {
	 user_data_=NULL;
	 expr="network.cnt_err <= err_stopcrit";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 VarIncr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt += 1";
	  var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="1";
	  };
	 };
	 IfBreak @[1] {
	  user_data_=NULL;
	  desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here too)";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if(n_under_cnt >=  n_under_thr) break";
	  cond {
	   user_data_=NULL;
	   expr="n_under_cnt >=  n_under_thr";
	  };
	 };
	};
       };
       Else @[3] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 user_data_=NULL;
	 expr=;
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="n_under_cnt = 0";
	  result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["n_under_cnt"]$;
	  expr {
	   user_data_=NULL;
	   expr="0";
	  };
	 };
	};
       };
       If @[4] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (save_wts_interval >= 1)";
	cond {
	 user_data_=NULL;
	 expr="save_wts_interval >= 1";
	};
	true_code {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (epoch % save_wts_interval == 0)";
	  cond {
	   user_data_=NULL;
	   expr="epoch % save_wts_interval == 0";
	  };
	  true_code {
	   user_data_=NULL;
	   name=;
	   el_typ=ProgCode;
	   el_def=0;
	   ProgramCall @[0] {
	    user_data_=NULL;
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="SaveWeights(network)";
	    prog_args {
	     user_data_=NULL;
	     name=;
	     el_typ=ProgArg;
	     el_def=0;
	     ProgArg @[0] {
	      user_data_=NULL;
	      arg_type=Network;
	      type="LeabraNetwork*";
	      name="network";
	      required=1;
	      def_val=;
	      prev_expr=;
	      expr {
	       user_data_=NULL;
	       expr="network";
	      };
	     };
	    };
	    target=$.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	    targ_ld_init="*SaveWeights*";
	   };
	  };
	 };
	};
       };
      };
      test {
       user_data_=NULL;
       expr="epoch < max_epoch";
      };
     };
     If @[8] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="if (save_final_wts)";
      cond {
       user_data_=NULL;
       expr="save_final_wts";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="SaveWeights(network)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=$.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"]$;
	targ_ld_init="*SaveWeights*";
       };
      };
     };
     MethodCall @[9] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="train_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrain"].vars["train_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
    };
    step_prog=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$$;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrain";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrain";
     text_size=1;
     text=;
     html_text="<!DOCTYPE html><html lang=\"en\" dir=\"ltr\" class=\"client-js\"><head>
<meta charset=\"UTF-8\">
<title>LeabraTrain - emergent</title>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\\s)client-nojs(\\s|$)/, \"$1client-js$2\" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgCanonicalNamespace\":\"\",\"wgCanonicalSpecialPageName\":!1,\"wgNamespaceNumber\":0,\"wgPageName\":\"LeabraTrain\",\"wgTitle\":\"LeabraTrain\",\"wgCurRevisionId\":11266,\"wgRevisionId\":11266,\"wgArticleId\":2767,\"wgIsArticle\":!0,\"wgIsRedirect\":!1,\"wgAction\":\"view\",\"wgUserName\":\"Oreilly\",\"wgUserGroups\":[\"bureaucrat\",\"svnadmins\",\"sysop\",\"*\",\"user\",\"autoconfirmed\"],\"wgCategories\":[],\"wgBreakFrames\":!1,\"wgPageContentLanguage\":\"en\",\"wgPageContentModel\":\"wikitext\",\"wgSeparatorTransformTable\":[\"\",\"\"],\"wgDigitTransformTable\":[\"\",\"\"],\"wgDefaultDateFormat\":\"dmy\",\"wgMonthNames\":[\"\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\"wgMonthNamesShort\":[\"\",\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],\"wgRelevantPageName\":\"LeabraTrain\",\"wgRelevantArticleId\":2767,\"wgUserId\":3,\"wgUserEditCount\":2418,\"wgUserRegistration\":1178051527000,\"wgUserNewMsgRevisionId\":null,\"wgIsProbablyEditable\":!0,
\"wgRestrictionEdit\":[],\"wgRestrictionMove\":[],\"sfgAutocompleteValues\":[],\"sfgAutocompleteOnAllChars\":!1,\"sfgFieldProperties\":[],\"sfgDependentFields\":[],\"sfgShowOnSelect\":[],\"sfgScriptPath\":\"/emergent/extensions/SemanticForms\",\"wgSVGEditEditor\":\"http://svg-edit.googlecode.com/svn/trunk/editor/svg-editor.html\",\"wgHeaderTabsTabIndexes\":[],\"wgWikiEditorEnabledModules\":{\"toolbar\":!0,\"dialogs\":!0,\"preview\":!0,\"publish\":!1},\"wgCategoryTreePageCategoryOptions\":\"{\\\"mode\\\":0,\\\"hideprefix\\\":20,\\\"showcount\\\":true,\\\"namespaces\\\":false}\"});mw.loader.implement(\"user.options\",function($,jQuery){mw.user.options.set({\"ccmeonemails\":\"1\",\"enotifminoredits\":\"1\",\"imagesize\":\"0\",\"previewontop\":\"\",\"rows\":\"30\",\"thumbsize\":\"0\",\"underline\":\"0\",\"watchmoves\":\"1\",\"editsection\":\"1\",\"rememberpassword\":\"1\",\"timecorrection\":\"ZoneInfo|-360|America/Denver\",\"watchlisttoken\":\"14fd6c804d78e99930123181974c128b983adb9e\"});});mw.loader.implement(\"user.tokens\",function($,jQuery){mw.user.tokens.set({\"editToken\":\"3b26cf5f182fe7fb29af6a6ca01dd6cb57342b95+\\\\\",\"patrolToken\":\"6f879f5a78cf8bf62c088b26f37a826a57342b95+\\\\\",\"watchToken\":\"0f5971aae38fcb23ba50cc900260a01757342b95+\\\\\"});});mw.loader.load([\"ext.smw.style\",\"ext.smw.tooltips\",\"mediawiki.page.startup\",\"mediawiki.legacy.wikibits\",\"skins.vector.js\"]);
} );</script>
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector\">
<link rel=\"stylesheet\" href=\"/emergent/extensions/HeaderTabs/skins/ext.headertabs.large.css\">
<meta name=\"ResourceLoaderDynamicStyles\" content=\"\">
<link rel=\"stylesheet\" href=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector\">
<style>a{text-decoration:none}</style>
<script async=\"\" src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector\"></script>
<meta name=\"generator\" content=\"MediaWiki 1.26.2\">
<link rel=\"ExportRDF\" type=\"application/rdf+xml\" title=\"LeabraTrain\" href=\"/emergent/index.php?title=Special:ExportRDF/LeabraTrain&amp;xmlmime=rdf\">
<link rel=\"alternate\" type=\"application/x-wiki\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"edit\" title=\"Edit\" href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\">
<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/emergent/opensearch_desc.php\" title=\"emergent (en)\">
<link rel=\"EditURI\" type=\"application/rsd+xml\" href=\"https://grey.colorado.edu/emergent/api.php?action=rsd\">
<link rel=\"alternate\" type=\"application/atom+xml\" title=\"emergent Atom feed\" href=\"/emergent/index.php?title=Special:RecentChanges&amp;feed=atom\">
<!--[if lt IE 7]><style type=\"text/css\">body{behavior:url(\"/emergent/skins/Vector/csshover.min.htc\")}</style><![endif]-->
<script src=\"/emergent/load.php?debug=false&amp;lang=en&amp;modules=jquery%2Cmediawiki&amp;only=scripts&amp;skin=vector&amp;version=EaPOpX%2FG\"></script></head>
<body class=\"mediawiki ltr sitedir-ltr ns-0 ns-subject page-LeabraTrain skin-vector action-view\">
		<div id=\"mw-page-base\" class=\"noprint\"></div>
		<div id=\"mw-head-base\" class=\"noprint\"></div>
		<div id=\"content\" class=\"mw-body\" role=\"main\">
			<a id=\"top\"></a>

						<div class=\"mw-indicators\">
</div>
			<h1 id=\"firstHeading\" class=\"firstHeading\" lang=\"en\">LeabraTrain</h1>
									<div id=\"bodyContent\" class=\"mw-body-content\">
									<div id=\"siteSub\">From emergent</div>
								<div id=\"contentSub\"></div>
												<div id=\"jump-to-nav\" class=\"mw-jump\">
					Jump to:					<a href=\"#mw-head\">navigation</a>, 					<a href=\"#p-search\">search</a>
				</div>
				<div id=\"mw-content-text\" lang=\"en\" dir=\"ltr\" class=\"mw-content-ltr\"><p>LeabraTrain is the standard <a href=\"/emergent/index.php/Program\" title=\"Program\">Program</a> for training <a href=\"/emergent/index.php/Leabra\" title=\"Leabra\">Leabra</a> networks.  It iterates over <a href=\"/emergent/index.php?title=LeabraEpoch&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"LeabraEpoch (page does not exist)\">LeabraEpoch</a> epochs, optionally until a training criterion has been met, or for a specified maximum number of epochs.
</p><p>You can easily customize this program to do different things at different points in the training process, for example by examining the network.epoch value (or the local copy of that value, epoch).
</p>
<!-- 
NewPP limit report
Cached time: 20160512070701
Cache expiry: 86400
Dynamic content: false
CPU time usage: 0.011 seconds
Real time usage: 0.014 seconds
Preprocessor visited node count: 1/1000000
Preprocessor generated node count: 4/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 1/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00%    0.000      1 - -total
-->

<!-- Saved in parser cache with key pdpwiki:pcache:idhash:2767-0!*!0!*!*!*!* and timestamp 20160512070701 and revision id 11266
 -->
</div>					<div class=\"printfooter\">
						Retrieved from \"<a dir=\"ltr\" href=\"https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266\">https://grey.colorado.edu/emergent/index.php?title=LeabraTrain&amp;oldid=11266</a>\"					</div>
				<div id=\"catlinks\" class=\"catlinks catlinks-allhidden\"></div>				<div class=\"visualClear\"></div>
							</div>
		</div>
		<div id=\"mw-navigation\">
			<h2>Navigation menu</h2>

			<div id=\"mw-head\">
									<div id=\"p-personal\" role=\"navigation\" class=\"\" aria-labelledby=\"p-personal-label\">
						<h3 id=\"p-personal-label\">Personal tools</h3>
						<ul>
							<li id=\"pt-userpage\"><a href=\"/emergent/index.php/User:Oreilly\" dir=\"auto\" title=\"Your user page [.]\" accesskey=\".\">Oreilly</a></li><li id=\"pt-mytalk\"><a href=\"/emergent/index.php/User_talk:Oreilly\" class=\"new\" title=\"Your talk page [n]\" accesskey=\"n\">Talk</a></li><li id=\"pt-preferences\"><a href=\"/emergent/index.php/Special:Preferences\" title=\"Your preferences\">Preferences</a></li><li id=\"pt-watchlist\"><a href=\"/emergent/index.php/Special:Watchlist\" title=\"A list of pages you are monitoring for changes [l]\" accesskey=\"l\">Watchlist</a></li><li id=\"pt-mycontris\"><a href=\"/emergent/index.php/Special:Contributions/Oreilly\" title=\"A list of your contributions [y]\" accesskey=\"y\">Contributions</a></li><li id=\"pt-logout\"><a href=\"/emergent/index.php?title=Special:UserLogout&amp;returnto=LeabraTrain\" title=\"Log out\">Log out</a></li>						</ul>
					</div>
									<div id=\"left-navigation\">
										<div id=\"p-namespaces\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-namespaces-label\">
						<h3 id=\"p-namespaces-label\">Namespaces</h3>
						<ul>
															<li id=\"ca-nstab-main\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\" title=\"View the content page [c]\" accesskey=\"c\">Page</a></span></li>
															<li id=\"ca-talk\" class=\"new\"><span><a href=\"/emergent/index.php?title=Talk:LeabraTrain&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [t]\" accesskey=\"t\" rel=\"discussion\">Discussion</a></span></li>
													</ul>
					</div>
										<div id=\"p-variants\" role=\"navigation\" class=\"vectorMenu emptyPortlet\" aria-labelledby=\"p-variants-label\">
												<h3 id=\"p-variants-label\">
							<span>Variants</span><a href=\"#\"></a>
						</h3>

						<div class=\"menu\">
							<ul>
															</ul>
						</div>
					</div>
									</div>
				<div id=\"right-navigation\">
										<div id=\"p-views\" role=\"navigation\" class=\"vectorTabs\" aria-labelledby=\"p-views-label\">
						<h3 id=\"p-views-label\">Views</h3>
						<ul>
															<li id=\"ca-view\" class=\"selected\"><span><a href=\"/emergent/index.php/LeabraTrain\">Read</a></span></li>
															<li id=\"ca-edit\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=edit\" title=\"Edit this page [e]\" accesskey=\"e\">Edit</a></span></li>
															<li id=\"ca-history\" class=\"collapsible\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=history\" title=\"Past revisions of this page [h]\" accesskey=\"h\">View history</a></span></li>
															<li id=\"ca-unwatch\" class=\"icon\"><span><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=unwatch&amp;token=c6d7363e22d4c0d44ac7ca2a8c59165157342b95%2B%5C\" title=\"Remove this page from your watchlist [w]\" accesskey=\"w\">Unwatch</a></span></li>
													</ul>
					</div>
										<div id=\"p-cactions\" role=\"navigation\" class=\"vectorMenu\" aria-labelledby=\"p-cactions-label\">
						<h3 id=\"p-cactions-label\"><span>More</span><a href=\"#\"></a></h3>

						<div class=\"menu\">
							<ul>
																	<li id=\"ca-delete\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=delete\" title=\"Delete this page [d]\" accesskey=\"d\">Delete</a>
									</li>
																	<li id=\"ca-move\">
										<a href=\"/emergent/index.php/Special:MovePage/LeabraTrain\" title=\"Move this page [m]\" accesskey=\"m\">Move</a>
									</li>
																	<li id=\"ca-protect\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=protect\" title=\"Protect this page [=]\" accesskey=\"=\">Protect</a>
									</li>
																	<li id=\"ca-purge\">
										<a href=\"/emergent/index.php?title=LeabraTrain&amp;action=purge\">Refresh</a>
									</li>
															</ul>
						</div>
					</div>
										<div id=\"p-search\" role=\"search\">
						<h3>
							<label for=\"searchInput\">Search</label>
						</h3>

						<form action=\"/emergent/index.php\" id=\"searchform\">
							<div id=\"simpleSearch\">
							<input type=\"search\" name=\"search\" placeholder=\"Search\" title=\"Search emergent [f]\" accesskey=\"f\" id=\"searchInput\"><input type=\"hidden\" value=\"Special:Search\" name=\"title\"><input type=\"submit\" name=\"fulltext\" value=\"Search\" title=\"Search the pages for this text\" id=\"mw-searchButton\" class=\"searchButton mw-fallbackSearchButton\"><input type=\"submit\" name=\"go\" value=\"Go\" title=\"Go to a page with this exact name if it exists\" id=\"searchButton\" class=\"searchButton\">							</div>
						</form>
					</div>
									</div>
			</div>
			<div id=\"mw-panel\">
				<div id=\"p-logo\" role=\"banner\"><a class=\"mw-wiki-logo\" href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page\"></a></div>
						<div class=\"portal\" role=\"navigation\" id=\"p-navigation\" aria-labelledby=\"p-navigation-label\">
			<h3 id=\"p-navigation-label\">Navigation</h3>

			<div class=\"body\">
									<ul>
						<li id=\"n-mainpage-description\"><a href=\"/emergent/index.php/Main_Page\" title=\"Visit the main page [z]\" accesskey=\"z\">Main page</a></li><li id=\"n-recentchanges\"><a href=\"/emergent/index.php/Special:RecentChanges\" title=\"A list of recent changes in the wiki [r]\" accesskey=\"r\">Recent changes</a></li><li id=\"n-Documentation\"><a href=\"/emergent/index.php/User_hub\">Documentation</a></li><li id=\"n-Submit-a-bug\"><a href=\"/emergent/index.php/How_to_submit_a_bug_report\">Submit a bug</a></li><li id=\"n-Bug-tracker\"><a href=\"//grey.colorado.edu/cgi-bin/bugzilla/index.cgi\" rel=\"nofollow\">Bug tracker</a></li><li id=\"n-Mailing-list\"><a href=\"//grey.colorado.edu/cgi-bin/mailman/listinfo/emergent-users\" rel=\"nofollow\">Mailing list</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-tb\" aria-labelledby=\"p-tb-label\">
			<h3 id=\"p-tb-label\">Tools</h3>

			<div class=\"body\">
									<ul>
						<li id=\"t-whatlinkshere\"><a href=\"/emergent/index.php/Special:WhatLinksHere/LeabraTrain\" title=\"A list of all wiki pages that link here [j]\" accesskey=\"j\">What links here</a></li><li id=\"t-recentchangeslinked\"><a href=\"/emergent/index.php/Special:RecentChangesLinked/LeabraTrain\" title=\"Recent changes in pages linked from this page [k]\" accesskey=\"k\">Related changes</a></li><li id=\"t-upload\"><a href=\"/emergent/index.php/Special:Upload\" title=\"Upload files [u]\" accesskey=\"u\">Upload file</a></li><li id=\"t-specialpages\"><a href=\"/emergent/index.php/Special:SpecialPages\" title=\"A list of all special pages [q]\" accesskey=\"q\">Special pages</a></li><li id=\"t-permalink\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;oldid=11266\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-info\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;action=info\" title=\"More information about this page\">Page information</a></li><li id=\"t-smwbrowselink\"><a href=\"/emergent/index.php/Special:Browse/LeabraTrain\" rel=\"smw-browse\">Browse properties</a></li>					</ul>
							</div>
		</div>
			<div class=\"portal\" role=\"navigation\" id=\"p-coll-print_export\" aria-labelledby=\"p-coll-print_export-label\">
			<h3 id=\"p-coll-print_export-label\">Print/export</h3>

			<div class=\"body\">
									<ul>
						<li id=\"coll-create_a_book\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=LeabraTrain\">Create a book</a></li><li id=\"coll-download-as-rl\"><a href=\"/emergent/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=LeabraTrain&amp;oldid=11266&amp;writer=rl\">Download as PDF</a></li><li id=\"t-print\"><a href=\"/emergent/index.php?title=LeabraTrain&amp;printable=yes\" title=\"Printable version of this page [p]\" accesskey=\"p\">Printable version</a></li>					</ul>
							</div>
		</div>
				</div>
		</div>
		<div id=\"footer\" role=\"contentinfo\">
							<ul id=\"footer-info\">
											<li id=\"footer-info-lastmod\"> This page was last modified on 12 May 2016, at 01:07.</li>
									</ul>
							<ul id=\"footer-places\">
											<li id=\"footer-places-about\"><a href=\"/emergent/index.php/emergent:About\" title=\"emergent:About\">About emergent</a></li>
									</ul>
										<ul id=\"footer-icons\" class=\"noprint\">
											<li id=\"footer-poweredbyico\">
							<a href=\"//www.mediawiki.org/\"><img src=\"/emergent/resources/assets/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\" srcset=\"/emergent/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /emergent/resources/assets/poweredby_mediawiki_176x62.png 2x\" width=\"88\" height=\"31\"></a><a href=\"https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki\"><img src=\"/emergent/extensions/SemanticMediaWiki/resources/images/smw_button.png\" alt=\"Powered by Semantic MediaWiki\" width=\"88\" height=\"31\"></a>						</li>
									</ul>
						<div style=\"clear:both\"></div>
		</div>
		<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({\"user\":\"ready\",\"user.groups\":\"ready\"});mw.loader.load([\"mediawiki.action.view.postEdit\",\"site\",\"mediawiki.user\",\"mediawiki.hidpi\",\"mediawiki.page.ready\",\"mediawiki.searchSuggest\",\"mediawiki.page.watch.ajax\",\"ext.headertabs\"]);
} );</script><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({\"wgBackendResponseTime\":155});
} );</script>
	

</body></html>";
    };
   };
   Program @["LeabraEpoch"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].doc$$;
     };
    };
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=2;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["step_on_err"] {
      user_data_=NULL;
      name="step_on_err";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="when you step at the Epoch level, this will automatically step through to the next point at which an error was made -- you can use the netview history to replay what happend";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects["bg"].networks["BgNet"].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=21;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$$;
      local_ctr_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      local_ctr_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="added in 8.0: essential for param_seqs";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network->Init_Epoch()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=Network::Init_Epoch;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Epoch()";
      meth_desc=" Initializes network state at the start of a new epoch -- updates parameters according to param_seq for example";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (PERMUTED):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrial(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"]$$;
	targ_ld_init="*LeabraTrial*";
       };
       If @[1] {
	user_data_=NULL;
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (step_on_err && network.sse > 0.0)";
	cond {
	 user_data_=NULL;
	 expr="step_on_err && network.sse > 0.0";
	};
	true_code {
	 user_data_=NULL;
	 name="ProgEl_List_100";
	 el_typ=ProgCode;
	 el_def=0;
	 StopStepPoint @[0] {
	  user_data_=NULL;
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="Stop_Step Point";
	  cond {
	   user_data_=NULL;
	   expr=;
	  };
	 };
	};
       };
      };
      data_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["input_data"]$$;
      index_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_index"]$$;
      order_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["data_loop_order"]$$;
      order=PERMUTED;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpoch"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrial"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].doc$$;
     };
    };
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarter(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"]$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitor(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrial"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarter"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].doc$$;
     };
    };
    name="LeabraQuarter";
    short_nm="Quarter";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$$;
      local_ctr_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="ApplyInputs(network, input_data)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=$.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="will be 25 if network times.cycle_qtr is true, else 1";
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraCycle"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraQuarter"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycle"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraCycle"].doc$$;
     };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing of activation updating -- either 1 cycle (1 msec) or 25 cycles if times.cycle_qtr is TRUE (default)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraCycle"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraCycle"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputs"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].doc$$;
     };
    };
    name="ApplyInputs";
    short_nm="Inputs";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["bg"].networks["BgNet"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="RandomSpec_7": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="RandomSpec_9": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="SNc";
	net_target=LAYER;
	layer_name="SNc";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["layer_writer_0"] {
      user_data_=NULL;
      name="layer_writer_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["ApplyInputs"].vars["layer_writer_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].doc$$;
     };
    };
    name="LeabraTrialMonitor";
    short_nm="TrialMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_cos_diff"] {
	user_data_=NULL;
	name="net_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="cos_diff";
	var_label="net_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_trial_cos_diff"] {
	user_data_=NULL;
	name="net_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="trial_cos_diff";
	var_label="net_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_act_diff";
	var_label="net_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_diff"] {
	user_data_=NULL;
	name="cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.cos_diff";
	var_label="cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_cos_diff"] {
	user_data_=NULL;
	name="trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.trial_cos_diff";
	var_label="trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act_diff"] {
	user_data_=NULL;
	name="avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_act_diff";
	var_label="avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["bg"].networks["BgNet"]$;
      data=$.projects["bg"].data.gp["OutputData"]["TrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["OutputData"]["TrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraTrialMonitor"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitor"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].doc$$;
     };
    };
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_cos_diff"] {
	user_data_=NULL;
	name="net_avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_cos_diff";
	var_label="net_avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_trial_cos_diff"] {
	user_data_=NULL;
	name="net_avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_trial_cos_diff";
	var_label="net_avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["net_avg_avg_act_diff"] {
	user_data_=NULL;
	name="net_avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_avg_act_diff";
	var_label="net_avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_diff"] {
	user_data_=NULL;
	name="avg_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_cos_diff";
	var_label="avg_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_trial_cos_diff"] {
	user_data_=NULL;
	name="avg_trial_cos_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_trial_cos_diff";
	var_label="avg_trial_cos_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_avg_act_diff"] {
	user_data_=NULL;
	name="avg_avg_act_diff";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_avg_act_diff";
	var_label="avg_avg_act_diff";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["hog_pct"] {
	user_data_=NULL;
	name="hog_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.hog_pct";
	var_label="hog_pct";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["dead_pct"] {
	user_data_=NULL;
	name="dead_pct";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.dead_pct";
	var_label="dead_pct";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netmax"] {
	user_data_=NULL;
	name="netmax";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_netin.max";
	var_label="netmax";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_act"] {
	user_data_=NULL;
	name="avg_act";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable=".layers.acts_p_avg";
	var_label="avg_act";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["netrel"] {
	user_data_=NULL;
	name="netrel";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="prjns.avg_netin_rel";
	var_label="netrel";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 2 0=0;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["bg"].networks["BgNet"]$;
      data=$.projects["bg"].data.gp["OutputData"]["EpochOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["OutputData"]["EpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["bg"].networks["BgNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["LeabraEpochMonitor"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     Comment @[6] {
      user_data_=NULL;
      desc="NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
      flags=CAN_REVERT_TO_CODE;
      code_string="// NOTE: if doing a TestEpoch and wanting to include test results in this train epoch log, then see these instructions:
http://grey.colorado.edu/emergent/index.php/Test_Programs
quick summary here:
* Add computed, data_agg, op = LAST items to epoch_netmon to grab from the EpochTestOutputData table.
* duplicate this program, call the new one LeabraEpochMonitor_postest, remove all netmon items for training, leaving only test,
  turn off rmv_orphan_cols flag, and set arg for UpdateMonitors in init_code to false
* in original LeabraEpochMonitor, click OFF flag for WriteClose() line
* in LeabraEpoch add call to LeabraEpochTest, then _posttest after the first LeabraEpochMonitor call.
This will ensure that training data is monitored first, right after the training epoch, and then the test epoch is run,
and the testing data is updated.  The first epoch monitor should have all the items, so that it formats the data table correctly.
 
";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["SaveWeights"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].doc$$;
     };
    };
    name="SaveWeights";
    short_nm="SavWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["tag"] {
      user_data_=NULL;
      name="tag";
      var_type=T_String;
      string_val="_gui";
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @["wts_subdir"] {
      user_data_=NULL;
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @["fname"] {
      user_data_=NULL;
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/emergent/test/leabra_std.00_0010.wts.gz";
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @["epoch_str"] {
      user_data_=NULL;
      name="epoch_str";
      var_type=T_String;
      string_val="0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["batch_str"] {
      user_data_=NULL;
      name="batch_str";
      var_type=T_String;
      string_val="00";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @["final_tag"] {
      user_data_=NULL;
      name="final_tag";
      var_type=T_String;
      string_val=".00_0010";
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     If @[0] {
      user_data_=NULL;
      desc=;
      flags=0;
      code_string=;
      cond {
       user_data_=NULL;
       expr="taMisc::dmem_proc > 0";
      };
      true_code {
       user_data_=NULL;
       name="true_code";
       el_typ=ProgCode;
       el_def=0;
       ReturnExpr @[0] {
	user_data_=NULL;
	desc=;
	flags=0;
	code_string=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
     };
     MiscCall @[1] {
      user_data_=NULL;
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=CAN_REVERT_TO_CODE;
      code_string="batch_str = taMisc::LeadingZeros(network.batch, 2)";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["batch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      user_data_=NULL;
      desc="get current epoch counter with leading zeros to length 4";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_str = taMisc::LeadingZeros(network.epoch, 4)";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["epoch_str"]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      user_data_=NULL;
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="final_tag = tag + \".\" + batch_str + \"_\" + epoch_str";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["final_tag"]$$;
      expr {
       user_data_=NULL;
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=CAN_REVERT_TO_CODE;
      code_string="fname = network->GetFileNameFmProject(\".wts.gz\", final_tag, wts_subdir, false)";
      result_var=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].vars["fname"]$$;
      obj=.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="ext";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="taString GetFileNameFmProject(taString& ext, taString& tag, taString& subdir, bool dmem_proc_no = false)";
      meth_desc=" get file name from project file name -- useful for saving files associated with the project; ext = extension; tag = additional tag; subdir = additional directory after any existing in project name; fname = proj->base_name (subdir) + tag + ext; if dmem_proc_no, add dmem proc no to file name. empty if project not found";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="save the weights to that file name";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->SaveWeights(fname, Network::NET_FMT)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Std"]["SaveWeights"].args["network"]$;
      method=Network::SaveWeights;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="fname";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="Network::NET_FMT";
	};
       };
      };
      meth_sig="void SaveWeights(taString& fname, Network::WtSaveFormat fmt = NET_FMT)";
      meth_desc=" write weight values out in a simple ordered list of weights (optionally in binary fmt) (leave fname empty to pull up file chooser)";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="SaveWeights";
     full_url="https://grey.colorado.edu/emergent/index.php/SaveWeights";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp["LeabraAll_Test"] {
   user_data_=NULL;
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   debug_mode=0;
   Program @["LeabraEpochTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].doc$$;
     };
    };
    name="LeabraEpochTest";
    short_nm="EpcTest";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @["data_loop_order"] {
      user_data_=NULL;
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @["trial"] {
      user_data_=NULL;
      name="trial";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["bg"].networks["BgNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @["data_loop_index"] {
      user_data_=NULL;
      name="data_loop_index";
      var_type=T_Int;
      int_val=6;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$$;
      local_ctr_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize trial counter (local variable and in the network)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: trial";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      local_ctr_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial"]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      user_data_=NULL;
      desc="set to testing mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TEST";
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get pointer to epoch timer object on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="start the epoch timer to record computation time per epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->StartTimer(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::StartTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void StartTimer(bool reset_used = true)";
      meth_desc=" record the current time as the starting time, and optionally reset the time used information";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["trial_mon_data"]$$;
      method=DataTable::ResetData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     NetDataLoop @[5] {
      user_data_=NULL;
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Data Loop (SEQUENTIAL):  table=input_data  index=data_loop_index  order_var=data_loop_order ";
      loop_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the trial program, passing network and input_data";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraTrialTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["input_data"]$$;
      index_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_index"]$$;
      order_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["data_loop_order"]$$;
      order=SEQUENTIAL;
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     If @[6] {
      user_data_=NULL;
      desc="if full batch mode, update only at end of epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.wt_update == Network::BATCH)";
      cond {
       user_data_=NULL;
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="final update of weights based on accumulated changes";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_EpochStats()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_EpochStats()";
      meth_desc=" compute epoch-level statistics; calls DMem_ComputeAggs (if dmem) and EpochSSE -- specific algos may add more compute epoch-level statistics, including SSE, AvgExtRew and AvgCycles";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="done with the computation in the epoch -- record time it took";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer->EndTimer()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].vars["epoch_timer"]$;
      method=TimeUsed::EndTimer;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void EndTimer()";
      meth_desc=" record the current time as the ending time, and compute difference as the time used";
     };
     ProgramCall @[9] {
      user_data_=NULL;
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraEpochMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      user_data_=NULL;
      desc="set back to training mode";
      flags=NEW_EL|CAN_REVERT_TO_CODE;
      code_string="network.train_mode = Network::TRAIN";
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochTest"].args["network"]$;
      path="train_mode";
      expr {
       user_data_=NULL;
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraEpoch";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraEpoch";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].doc$$;
     };
    };
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/output event or external information, over a single alpha frequency cycle (100 msec / 10 Hz) -- iterates over gamma-frequency (25 msec / 40 Hz) quarter-trials";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (1 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["qtr"] {
	user_data_=NULL;
	name="qtr";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     If @[1] {
      user_data_=NULL;
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=CAN_REVERT_TO_CODE;
      code_string="if (network.Compute_Weights_Test(network.trial+1))";
      cond {
       user_data_=NULL;
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       user_data_=NULL;
       name=;
       el_typ=ProgCode;
       el_def=0;
       MethodCall @[0] {
	user_data_=NULL;
	desc="update weights -- do this at start instead of end, so that dwt is valid";
	flags=CAN_REVERT_TO_CODE;
	code_string="network->Compute_Weights()";
	result_var=NULL;
	obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$$;
	method=Network::Compute_Weights;
	meth_args {
	 user_data_=NULL;
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void Compute_Weights()";
	meth_desc=" update weights for whole net: calls DMem_SumDWts before doing update if in dmem mode";
       };
      };
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="initializes various counters at start of trial";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     Comment @[3] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[5] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=CAN_REVERT_TO_CODE;
      code_string="ApplyInputsTest(network, input_data)";
      prog_args {
       user_data_=NULL;
       name="prog_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"]$$;
      targ_ld_init="*ApplyInputs*";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="for (qtr = 0; qtr < 4; qtr++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the quarter program (which iterates over cyles of network activation updating) for each quarter";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraQuarterTest(network, input_data)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  user_data_=NULL;
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="input_data";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"]$$;
	targ_ld_init="*LeabraQuarter*";
       };
      };
      init {
       user_data_=NULL;
       expr="qtr = 0";
      };
      test {
       user_data_=NULL;
       expr="qtr < 4";
      };
      iter {
       user_data_=NULL;
       expr="qtr++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="after the trial is over, do final computations";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Final()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Final()";
      meth_desc=" do final processing after trial: Compute_AbsRelNetin";
     };
     ProgramCall @[8] {
      user_data_=NULL;
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=CAN_REVERT_TO_CODE;
      code_string="LeabraTrialMonitorTest(network)";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      target=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update the network view(s) (only if update_net_view is true)";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraTrial";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraTrial";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraQuarterTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].doc$$;
     };
    };
    name="LeabraQuarterTest";
    short_nm="QrtTst";
    tags="Leabra, Std";
    desc="iterates over cycles of activation updating for a gamma-frequency (25 msec / 40 Hz) quarter of an alpha frequency (100 msec / 10 Hz) trial";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["cycle"] {
      user_data_=NULL;
      name="cycle";
      var_type=T_Int;
      int_val=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      user_data_=NULL;
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$$;
      local_ctr_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (2 vars)";
      local_vars {
       user_data_=NULL;
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @["cycle_max"] {
	user_data_=NULL;
	name="cycle_max";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @["cyc"] {
	user_data_=NULL;
	name="cyc";
	var_type=T_Int;
	int_val=0;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     Comment @[1] {
      user_data_=NULL;
      desc="== note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
      flags=CAN_REVERT_TO_CODE;
      code_string="// == note: can apply inputs once at start of trial, or at finer grain within LeabraQuarter, as needed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=Network::Init_InputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     ProgramCall @[3] {
      user_data_=NULL;
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="program_name()";
      prog_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	prev_expr="network";
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="grab_camera_img";
	required=1;
	def_val=;
	prev_expr="input_data";
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      target=NULL;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="cycle_max = network->CycleRunMax()";
      result_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].prog_code[0].local_vars["cycle_max"]$$;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::CycleRunMax;
      meth_args {
       user_data_=NULL;
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int CycleRunMax()";
      meth_desc=" max loop counter for running cycles in a gamma quarter of processing, taking into account the fact that threading can run multiple cycles per Cycle_Run call if quarter flag is set";
     };
     ForLoop @[6] {
      user_data_=NULL;
      desc="// the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="for (cyc=0; cyc<cycle_max; cyc++)";
      loop_code {
       user_data_=NULL;
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       ProgramCall @[0] {
	user_data_=NULL;
	desc="run the cycle program -- can run multiple cycles at a time due to threading";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleTest(network)";
	prog_args {
	 user_data_=NULL;
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  user_data_=NULL;
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   user_data_=NULL;
	   expr="network";
	  };
	 };
	};
	target=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"]$$;
	targ_ld_init="*LeabraCycle*";
       };
       AssignExpr @[1] {
	user_data_=NULL;
	desc="grab the updated cycle count";
	flags=CAN_REVERT_TO_CODE;
	code_string="cycle = network.cycle";
	result_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["cycle"]$;
	expr {
	 user_data_=NULL;
	 expr="network.cycle";
	};
       };
      };
      init {
       user_data_=NULL;
       expr="cyc=0";
      };
      test {
       user_data_=NULL;
       expr="cyc<cycle_max";
      };
      iter {
       user_data_=NULL;
       expr="cyc++";
      };
     };
     MethodCall @[7] {
      user_data_=NULL;
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[8] {
      user_data_=NULL;
      desc="compute appropriate stats for each phase (MinusStats, PlusStats)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PhaseStats()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      method=LeabraNetwork::Compute_PhaseStats;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PhaseStats()";
      meth_desc=" compute MinusStats at the end of the minus phase, and PlusStats at the end of the plus phase -- this is preferred over the previous implementation of calling TrialStats only at the end of the minus phase, which required targets to be present in the minus phase, which is not always the case";
     };
     NetUpdateView @[9] {
      user_data_=NULL;
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraQuarterTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraQuarter";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraQuarter";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraCycleTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].doc$$;
     };
    };
    name="LeabraCycleTest";
    short_nm="CycTest";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["update_net_view"] {
      user_data_=NULL;
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     NetUpdateView @[1] {
      user_data_=NULL;
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].args["network"]$;
      update_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraCycleTest"].vars["update_net_view"]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="LeabraCycle";
     full_url="https://grey.colorado.edu/emergent/index.php/LeabraCycle";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["ApplyInputsTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].doc$$;
     };
    };
    name="ApplyInputsTest";
    short_nm="InTest";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      data=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      network=$.projects["bg"].networks["BgNet"]$;
      layer_data {
       user_data_=NULL;
       name="layer_data";
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	user_data_=NULL;
	col_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=TARG;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	user_data_=NULL;
	col_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=0;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	user_data_=NULL;
	col_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	quiet=0;
	na_by_range=0;
	ext_flags=EXT;
	noise {user_data_=NULL: name="noise": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @["input_data"] {
      user_data_=NULL;
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["LayerWriter_0"] {
      user_data_=NULL;
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].objs["LayerWriter_0"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="configure to fit the network and input data -- this may cause spurious warning messages and problems in some cases so just turn it OFF if necessary";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->AutoConfig(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::AutoConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="remove_unused";
	required=0;
	def_val="true";
	prev_expr="true";
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void AutoConfig(bool remove_unused = true)";
      meth_desc=" do a 'best guess' configuration of items by matching up like-named data Channels and network Layers -- if remove_unused is true, then layer writer elements that existed previously but were not found in input data and network are removed";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=taList_impl::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->SetDataNetwork(input_data, network)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="db";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* db, Network* net)";
      meth_desc=" set the data table and network pointers -- convenience function for programs ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=CAN_REVERT_TO_CODE;
      code_string="LayerWriter_0->ApplyInputData()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["ApplyInputsTest"].vars["LayerWriter_0"]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="bool ApplyInputData()";
      meth_desc=" apply data to the layers, using the network's current context settings (TEST,TRAIN,etc) -- returns success";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="ApplyInputs";
     full_url="https://grey.colorado.edu/emergent/index.php/ApplyInputs";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraTrialMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].doc$$;
     };
    };
    name="LeabraTrialMonitorTest";
    short_nm="TrlMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["train_mode"] {
	user_data_=NULL;
	name="train_mode";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="train_mode";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group"] {
	user_data_=NULL;
	name="group";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="group";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial"] {
	user_data_=NULL;
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["tick"] {
	user_data_=NULL;
	name="tick";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="tick";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["time"] {
	user_data_=NULL;
	name="time";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="time";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["trial_name"] {
	user_data_=NULL;
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["group_name"] {
	user_data_=NULL;
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["output_name"] {
	user_data_=NULL;
	name="output_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="minus_output_name";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["rt_cycles"] {
	user_data_=NULL;
	name="rt_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="rt_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["sse"] {
	user_data_=NULL;
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["norm_err"] {
	user_data_=NULL;
	name="norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cos_err"] {
	user_data_=NULL;
	name="cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["ext_rew"] {
	user_data_=NULL;
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_sse"] {
	user_data_=NULL;
	name="lay_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.sse";
	var_label="lay_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_norm_err"] {
	user_data_=NULL;
	name="lay_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.norm_err";
	var_label="lay_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cos_err"] {
	user_data_=NULL;
	name="lay_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.cos_err";
	var_label="lay_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_net_sd"] {
	user_data_=NULL;
	name="lay_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.net_sd";
	var_label="lay_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["bg"].networks["BgNet"]$;
      data=$.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["trial_mon_data"] {
      user_data_=NULL;
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @["trial_netmon"] {
      user_data_=NULL;
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].objs["trial_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].vars["trial_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraTrialMonitorTest"].args["network"]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @["LeabraEpochMonitorTest"] {
    UserDataItem_List @*(.user_data_) {
     user_data_=NULL;
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @["DocLink"] {
      user_data_=NULL;
      name="DocLink";
      doc=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].doc$$;
     };
    };
    name="LeabraEpochMonitorTest";
    short_nm="EpcMonTst";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    version {
     user_data_=NULL;
     major=8;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     user_data_=NULL;
     expr=;
    };
    objs {
     user_data_=NULL;
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      items {
       user_data_=NULL;
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @["batch"] {
	user_data_=NULL;
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch"] {
	user_data_=NULL;
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_sse"] {
	user_data_=NULL;
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["cnt_err"] {
	user_data_=NULL;
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_cor"] {
	user_data_=NULL;
	name="pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="pct_cor";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["pct_err"] {
	user_data_=NULL;
	name="pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="pct_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_norm_err"] {
	user_data_=NULL;
	name="avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_norm_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cos_err"] {
	user_data_=NULL;
	name="avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_cos_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_ext_rew"] {
	user_data_=NULL;
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_cycles"] {
	user_data_=NULL;
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_tot"] {
	user_data_=NULL;
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["epoch_time_usr"] {
	user_data_=NULL;
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=INPUT_LAYERS|HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_sse"] {
	user_data_=NULL;
	name="lay_avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_sse";
	var_label="lay_avg_sse";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_cnt_err"] {
	user_data_=NULL;
	name="lay_cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.cnt_err";
	var_label="lay_cnt_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_cor"] {
	user_data_=NULL;
	name="lay_pct_cor";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.pct_cor";
	var_label="lay_pct_cor";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_pct_err"] {
	user_data_=NULL;
	name="lay_pct_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.pct_err";
	var_label="lay_pct_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_norm_err"] {
	user_data_=NULL;
	name="lay_avg_norm_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_norm_err";
	var_label="lay_avg_norm_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["lay_avg_cos_err"] {
	user_data_=NULL;
	name="lay_avg_cos_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_cos_err";
	var_label="lay_avg_cos_err";
	name_style=AUTO_NAME;
	max_name_len=6;
	options=OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name="agg_col";
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name="select_spec";
	 name="select_spec_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @["avg_net_sd"] {
	user_data_=NULL;
	name="avg_net_sd";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects["bg"].networks["BgNet"]$;
	variable="layers.avg_net_sd";
	var_label="avg_net_sd";
	name_style=AUTO_NAME;
	max_name_len=13;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 user_data_=NULL;
	 col_name=;
	};
	agg {user_data_=NULL: name="agg": op=NONE: rel={user_data_=NULL: name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 user_data_=NULL;
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {user_data_=NULL: name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {user_data_=NULL: name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {user_data_=NULL: name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects["bg"].networks["BgNet"]$;
      data=.projects["bg"].data.gp["OutputData"]["TestEpochOutputData"]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     user_data_=NULL;
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     user_data_=NULL;
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["network"] {
      user_data_=NULL;
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects["bg"].networks["BgNet"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     user_data_=NULL;
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @["epoch_mon_data"] {
      user_data_=NULL;
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects["bg"].data.gp["OutputData"]["TestEpochOutputData"]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @["epoch_netmon"] {
      user_data_=NULL;
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].objs["epoch_netmon"]$$;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @["epoch_timer"] {
      user_data_=NULL;
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects["bg"].networks["BgNet"].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     user_data_=NULL;
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     user_data_=NULL;
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     AssignExpr @[0] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="set data and network on NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->SetDataNetwork(epoch_mon_data, network)";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[2] {
      user_data_=NULL;
      desc="check configuration and emit errors/warnings for problems";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=taBase::CheckConfig;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     user_data_=NULL;
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      user_data_=NULL;
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[1] {
      user_data_=NULL;
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_netmon"]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     AssignExpr @[2] {
      user_data_=NULL;
      desc="get the epoch timer from current network";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_timer = network.epoch_time";
      result_var=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_timer"]$;
      expr {
       user_data_=NULL;
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      user_data_=NULL;
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetTotSecs(), \"epoch_time_tot\", -1, )";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[4] {
      user_data_=NULL;
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->SetValColName(epoch_timer.used.GetUsrSecs(), \"epoch_time_usr\", -1, )";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::SetValColName;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	user_data_=NULL;
	arg_type=const_Variant_ref;
	type="Variant&";
	name="val";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	user_data_=NULL;
	arg_type=const_taString_ref;
	type="taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	user_data_=NULL;
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr="-1";
	};
       };
       ProgArg @[3] {
	user_data_=NULL;
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 user_data_=NULL;
	 expr=;
	};
       };
      };
      meth_sig="bool SetValColName(Variant& val, taString& col_name, int row, bool quiet = false)";
      meth_desc=" set data of scalar type, in Variant form (any data type, use for Programs), for given column name, row; returns 'true' if valid access and set is successful -- quiet = fail quietly";
     };
     MethodCall @[5] {
      user_data_=NULL;
      desc="update after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="epoch_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.projects["bg"].programs.gp["LeabraAll_Test"]["LeabraEpochMonitorTest"].vars["epoch_mon_data"]$;
      method=DataTable::WriteClose;
      meth_args {
       user_data_=NULL;
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     user_data_=NULL;
     name="doc";
     desc=;
     web_doc=1;
     wiki="emergent";
     url="Monitor_Data";
     full_url="https://grey.colorado.edu/emergent/index.php/Monitor_Data";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  user_data_=NULL;
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @["Browser2"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_91";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["view_win_lft"] {
     user_data_=NULL;
     name="view_win_lft";
     value 8 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_top"] {
     user_data_=NULL;
     name="view_win_top";
     value 8 0=0.01755412;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_wd"] {
     user_data_=NULL;
     name="view_win_wd";
     value 8 0=0.9943895;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_ht"] {
     user_data_=NULL;
     name="view_win_ht";
     value 8 0=0.7963722;
     val_type_fixed=0;
    };
    UserDataItem @["view_win_iconified"] {
     user_data_=NULL;
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @["view_splitter_state"] {
     user_data_=NULL;
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAEAAAADAAABAAAAAfwAAAKMAQAAAAcBAAAAAQE=";
     val_type_fixed=0;
    };
   };
   name="Browser2";
   m_data=.projects["bg"]$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"bg\"] - bg.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    user_data_=NULL;
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @["Application"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_92";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_visible"] {
       user_data_=NULL;
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    user_data_=NULL;
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @["Navigator"] {
     user_data_=NULL;
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects["bg"]$;
    };
    PanelViewer @["Editor"] {
     user_data_=NULL;
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @["Visualizer"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_93";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_panel_selected"] {
       user_data_=NULL;
       name="view_panel_selected";
       value 1 0=1;
       val_type_fixed=0;
      };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      user_data_=NULL;
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @["BgNet"] {
       user_data_=NULL;
       name="BgNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @["BgNet_View"] {
	  user_data_=NULL;
	  name="BgNet_View";
	  m_data=$.projects["bg"].networks["BgNet"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=0;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=0.479756: y=0.4797564: z=0.4797564: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=-0.3004142: y=0.3874146: z=-0.9999923: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  hot_vars{ targ;ext;act;net;act_eq;act_m;act_p;act_dif;avg_m;avg_l;act_avg;r.wt;r.wt*act;s.wt;r.dwt;s.dwt;r.ntr;s.ntr;r.tr;s.tr;da_p;thal;deep_raw;deep_ctxt;deep_mod;deep_lrn;	  };
	  unit_src_path=".layers[0].units[5]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=15: y=3: z=1.5: };
	  max_size2d {x=30: y=49: z=1: };
	  eff_max_size {x=15: y=3: z=1.5: };
	  font_sizes {
	   user_data_=NULL;
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.04;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   user_data_=NULL;
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.4;
	   unit_trans=0.4;
	   laygp_width=1;
	   show_laygp=0;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.8;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   user_data_=NULL;
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   user_data_=NULL;
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    user_data_=NULL;
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    user_data_=NULL;
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    user_data_=NULL;
	    var_name="bias.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    user_data_=NULL;
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    user_data_=NULL;
	    var_name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    user_data_=NULL;
	    var_name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[6] {
	    user_data_=NULL;
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    user_data_=NULL;
	    var_name="act_q0";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    user_data_=NULL;
	    var_name="act_q1";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    user_data_=NULL;
	    var_name="act_q2";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    user_data_=NULL;
	    var_name="act_q3";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    user_data_=NULL;
	    var_name="act_q4";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    user_data_=NULL;
	    var_name="da_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    user_data_=NULL;
	    var_name="act_avg";
	    auto_scale=0;
	    min=-0.2;
	    max=0.2;
	   };
	   ScaleRange @[14] {
	    user_data_=NULL;
	    var_name="bias_wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[15] {
	    user_data_=NULL;
	    var_name="r.dwt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[16] {
	    user_data_=NULL;
	    var_name="r.wt*act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[17] {
	    user_data_=NULL;
	    var_name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=-1;SNc=-1;GPeNoGo=-1;GPi_Thalamus=-1;MatrixGo=-1;MatrixNoGo=-1;PFCout=-1;PFCout_deep=-1;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.8809531: z=1.631081: };
	 orient {x=-1.000008: y=0: z=0: rot=0.1879985: };
	 focal_dist=1.86299;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["StdInputData"] {
       user_data_=NULL;
       name="StdInputData";
       m_data=NULL;
       cur_font_size=14;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=14;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["StdInputData_Grid"] {
	  user_data_=NULL;
	  name="StdInputData_Grid";
	  m_data=$.projects["bg"].data.gp["InputData"]["StdInputData"]$;
	  cur_font_size=14;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["Name"] {
	    user_data_=NULL;
	    name="Name";
	    m_data=.projects["bg"].data.gp["InputData"]["StdInputData"].data["Name"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["Input"] {
	    user_data_=NULL;
	    name="Input";
	    m_data=.projects["bg"].data.gp["InputData"]["StdInputData"].data["Input"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["SNc"] {
	    user_data_=NULL;
	    name="SNc";
	    m_data=.projects["bg"].data.gp["InputData"]["StdInputData"].data["SNc"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=2;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=30;
	  view_range {min=0: max=29: };
	  page_rows=30;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=2: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.04: };
	  click_vals=1;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.45: z=1.510735: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.508235;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["EpochOutputData"] {
       user_data_=NULL;
       name="EpochOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @["EpochOutputData_Graph"] {
	  user_data_=NULL;
	  name="EpochOutputData_Graph";
	  m_data=$.projects["bg"].data.gp["OutputData"]["EpochOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_sse"] {
	    user_data_=NULL;
	    name="avg_sse";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["cnt_err"] {
	    user_data_=NULL;
	    name="cnt_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_cor"] {
	    user_data_=NULL;
	    name="pct_cor";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["pct_err"] {
	    user_data_=NULL;
	    name="pct_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_norm_err"] {
	    user_data_=NULL;
	    name="avg_norm_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cos_err"] {
	    user_data_=NULL;
	    name="avg_cos_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_ext_rew"] {
	    user_data_=NULL;
	    name="avg_ext_rew";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["avg_ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["avg_cycles"] {
	    user_data_=NULL;
	    name="avg_cycles";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["avg_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_tot"] {
	    user_data_=NULL;
	    name="epoch_time_tot";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_tot"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["epoch_time_usr"] {
	    user_data_=NULL;
	    name="epoch_time_usr";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["epoch_time_usr"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_avg_sse"] {
	    user_data_=NULL;
	    name="PFCout_lay_avg_sse";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_avg_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_cnt_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_cnt_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_cnt_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_pct_cor"] {
	    user_data_=NULL;
	    name="PFCout_lay_pct_cor";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_pct_cor"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_pct_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_pct_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_pct_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_avg_norm_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_avg_norm_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_avg_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_lay_avg_cos_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_avg_cos_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_lay_avg_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="net_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["net_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="net_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["net_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_avg_cos_diff"] {
	    user_data_=NULL;
	    name="GPeNoGo_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_avg_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_avg_cos_diff"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_avg_cos_diff"] {
	    user_data_=NULL;
	    name="MatrixGo_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_avg_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_avg_cos_diff"] {
	    user_data_=NULL;
	    name="MatrixNoGo_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_avg_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_avg_cos_diff"] {
	    user_data_=NULL;
	    name="PFCout_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_avg_cos_diff"] {
	    user_data_=NULL;
	    name="PFCout_deep_avg_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_avg_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="GPeNoGo_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_avg_trial_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="MatrixGo_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_avg_trial_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="MatrixNoGo_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_avg_trial_cos_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="PFCout_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_avg_trial_cos_diff"] {
	    user_data_=NULL;
	    name="PFCout_deep_avg_trial_cos_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_avg_trial_cos_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="GPeNoGo_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_avg_avg_act_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="MatrixGo_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_avg_avg_act_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="MatrixNoGo_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_avg_avg_act_diff"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="PFCout_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_avg_avg_act_diff"] {
	    user_data_=NULL;
	    name="PFCout_deep_avg_avg_act_diff";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_avg_avg_act_diff"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_avg_net_sd"] {
	    user_data_=NULL;
	    name="GPeNoGo_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_avg_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_avg_net_sd"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_avg_net_sd"] {
	    user_data_=NULL;
	    name="MatrixGo_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_avg_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_avg_net_sd"] {
	    user_data_=NULL;
	    name="MatrixNoGo_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_avg_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_avg_net_sd"] {
	    user_data_=NULL;
	    name="PFCout_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_avg_net_sd"] {
	    user_data_=NULL;
	    name="PFCout_deep_avg_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_avg_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_hog_pct"] {
	    user_data_=NULL;
	    name="GPeNoGo_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_hog_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_hog_pct"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_hog_pct"] {
	    user_data_=NULL;
	    name="MatrixGo_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_hog_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_hog_pct"] {
	    user_data_=NULL;
	    name="MatrixNoGo_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_hog_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_hog_pct"] {
	    user_data_=NULL;
	    name="PFCout_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_hog_pct"] {
	    user_data_=NULL;
	    name="PFCout_deep_hog_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_hog_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_dead_pct"] {
	    user_data_=NULL;
	    name="GPeNoGo_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_dead_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_dead_pct"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_dead_pct"] {
	    user_data_=NULL;
	    name="MatrixGo_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_dead_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_dead_pct"] {
	    user_data_=NULL;
	    name="MatrixNoGo_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_dead_pct"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_dead_pct"] {
	    user_data_=NULL;
	    name="PFCout_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_dead_pct"] {
	    user_data_=NULL;
	    name="PFCout_deep_dead_pct";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_dead_pct"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_netmax"] {
	    user_data_=NULL;
	    name="GPeNoGo_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_netmax"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_netmax"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_netmax"] {
	    user_data_=NULL;
	    name="MatrixGo_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_netmax"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_netmax"] {
	    user_data_=NULL;
	    name="MatrixNoGo_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_netmax"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_netmax"] {
	    user_data_=NULL;
	    name="PFCout_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_netmax"] {
	    user_data_=NULL;
	    name="PFCout_deep_netmax";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_netmax"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_avg_act"] {
	    user_data_=NULL;
	    name="GPeNoGo_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_avg_act"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_avg_act"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_avg_act"] {
	    user_data_=NULL;
	    name="MatrixGo_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_avg_act"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_avg_act"] {
	    user_data_=NULL;
	    name="MatrixNoGo_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_avg_act"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_avg_act"] {
	    user_data_=NULL;
	    name="PFCout_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_avg_act"] {
	    user_data_=NULL;
	    name="PFCout_deep_avg_act";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_avg_act"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPeNoGo_netrel"] {
	    user_data_=NULL;
	    name="GPeNoGo_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPeNoGo_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["GPi_Thalamus_netrel"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["GPi_Thalamus_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixGo_netrel"] {
	    user_data_=NULL;
	    name="MatrixGo_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixGo_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["MatrixNoGo_netrel"] {
	    user_data_=NULL;
	    name="MatrixNoGo_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["MatrixNoGo_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_netrel"] {
	    user_data_=NULL;
	    name="PFCout_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	   GraphColView @["PFCout_deep_netrel"] {
	    user_data_=NULL;
	    name="PFCout_deep_netrel";
	    m_data=.projects["bg"].data.gp["OutputData"]["EpochOutputData"].data["PFCout_deep_netrel"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {user_data_=NULL: min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  page_rows=412;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=1;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   user_data_=NULL;
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  z_axis {
	   user_data_=NULL;
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  tot_plots=16;
	  plots {
	   user_data_=NULL;
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_plot_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_sse";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="cnt_err";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="avg_cycles";
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.325586: fix_max=0: max=0.462465: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=1;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.921425: fix_max=0: max=0.998647: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=1;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_plot_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  errbars {
	   user_data_=NULL;
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @["EpochOutputData_Graph_err_1"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_2"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_3"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_4"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_5"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_6"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_7"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_8"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_9"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_10"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_11"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_12"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_13"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_14"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_15"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	   GraphPlotView @["EpochOutputData_Graph_err_16"] {
	    user_data_=NULL;
	    name="EpochOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	   };
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_axis {
	   user_data_=NULL;
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   user_data_=NULL;
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {user_data_=NULL: name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.465: y=0.5129999: z=1.637373: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.147373;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @["TestTrialOutputData"] {
       user_data_=NULL;
       name="TestTrialOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	user_data_=NULL;
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @["TestTrialOutputData_Grid"] {
	  user_data_=NULL;
	  name="TestTrialOutputData_Grid";
	  m_data=$.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @["batch"] {
	    user_data_=NULL;
	    name="batch";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["batch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["epoch"] {
	    user_data_=NULL;
	    name="epoch";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["epoch"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["train_mode"] {
	    user_data_=NULL;
	    name="train_mode";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["train_mode"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group"] {
	    user_data_=NULL;
	    name="group";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["group"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial"] {
	    user_data_=NULL;
	    name="trial";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["trial"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["tick"] {
	    user_data_=NULL;
	    name="tick";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["tick"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["time"] {
	    user_data_=NULL;
	    name="time";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["time"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["trial_name"] {
	    user_data_=NULL;
	    name="trial_name";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["trial_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["group_name"] {
	    user_data_=NULL;
	    name="group_name";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["group_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=0;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["output_name"] {
	    user_data_=NULL;
	    name="output_name";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["output_name"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["rt_cycles"] {
	    user_data_=NULL;
	    name="rt_cycles";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["rt_cycles"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["sse"] {
	    user_data_=NULL;
	    name="sse";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["norm_err"] {
	    user_data_=NULL;
	    name="norm_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["cos_err"] {
	    user_data_=NULL;
	    name="cos_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["ext_rew"] {
	    user_data_=NULL;
	    name="ext_rew";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["ext_rew"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["PFCout_lay_sse"] {
	    user_data_=NULL;
	    name="PFCout_lay_sse";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["PFCout_lay_sse"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["PFCout_lay_norm_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_norm_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["PFCout_lay_norm_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["PFCout_lay_cos_err"] {
	    user_data_=NULL;
	    name="PFCout_lay_cos_err";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["PFCout_lay_cos_err"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["GPeNoGo_lay_net_sd"] {
	    user_data_=NULL;
	    name="GPeNoGo_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["GPeNoGo_lay_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["GPi_Thalamus_lay_net_sd"] {
	    user_data_=NULL;
	    name="GPi_Thalamus_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["GPi_Thalamus_lay_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["MatrixGo_lay_net_sd"] {
	    user_data_=NULL;
	    name="MatrixGo_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["MatrixGo_lay_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["MatrixNoGo_lay_net_sd"] {
	    user_data_=NULL;
	    name="MatrixNoGo_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["MatrixNoGo_lay_net_sd"]$$;
	    cur_font_size=14;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["PFCout_lay_net_sd"] {
	    user_data_=NULL;
	    name="PFCout_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["PFCout_lay_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @["PFCout_deep_lay_net_sd"] {
	    user_data_=NULL;
	    name="PFCout_deep_lay_net_sd";
	    m_data=.projects["bg"].data.gp["OutputData"]["TestTrialOutputData"].data["PFCout_deep_lay_net_sd"]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   user_data_=NULL;
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   user_data_=NULL;
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10;
	  view_range {min=0: max=-1: };
	  page_rows=10;
	  display_on=1;
	  manip_ctrl_on=1;
	  view_cols=5;
	  page_cols=5;
	  col_range {min=0: max=4: };
	  need_scale_update=1;
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   user_data_=NULL;
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.002;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.4;
	  mat_size_range {min=4: max=16: };
	  text_size_range {user_data_=NULL: min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	  use_custom_paging=0;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {
	user_data_=NULL;
	field_of_view=45;
	near_distance=0.1;
	focal=5;
	far_distance=1000;
       };
       stereo_view=STEREO_NONE;
       saved_views {
	user_data_=NULL;
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @["Vw_0"] {
	 user_data_=NULL;
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.5: y=0.44875: z=1.401566: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.407816;
	};
	T3SavedView @["Vw_1"] {
	 user_data_=NULL;
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_2"] {
	 user_data_=NULL;
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_3"] {
	 user_data_=NULL;
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_4"] {
	 user_data_=NULL;
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_5"] {
	 user_data_=NULL;
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_6"] {
	 user_data_=NULL;
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_7"] {
	 user_data_=NULL;
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_8"] {
	 user_data_=NULL;
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @["Vw_9"] {
	 user_data_=NULL;
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    user_data_=NULL;
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @["Tools"] {
     UserDataItem_List @*(.user_data_) {
      user_data_=NULL;
      name="UserDataItem_List_94";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @["view_win_lft"] {
       user_data_=NULL;
       name="view_win_lft";
       value 8 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_top"] {
       user_data_=NULL;
       name="view_win_top";
       value 8 0=-0.01345816;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_wd"] {
       user_data_=NULL;
       name="view_win_wd";
       value 8 0=0.02706271;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_ht"] {
       user_data_=NULL;
       name="view_win_ht";
       value 8 0=0.7712113;
       val_type_fixed=0;
      };
      UserDataItem @["view_win_iconified"] {
       user_data_=NULL;
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @["view_visible"] {
       user_data_=NULL;
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Project updated on wiki: CCN changes: 8.0.4 svn 10466 update";
 tree_state{ .;.docs;.wizards;.wizards[0];.ctrl_panels;.param_sets;.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.gp[0];.programs.gp[1];.viewers[0];.viewers[0].frames[2];.networks;.networks[0];.networks[0].specs;.networks[0].specs[0];.networks[0].specs[2];.networks[0].specs.gp[0];.networks[0].specs.gp[0][0];.networks[0].specs.gp[0][1];.networks[0].specs.gp[0][1].children[0];.networks[0].specs.gp[0][4];.networks[0].specs.gp[0][4].children[2];.networks[0].layers;.networks[0].layers.gp[0];.networks[0].layers.gp[0][2];.networks[0].layers.gp[0][2].projections;.networks[0].layers.gp[0][3];.networks[0].layers.gp[0][3].projections; };
 networks {
  user_data_=NULL;
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @["BgNet"] {
   UserDataItem_List @*(.user_data_) {
    user_data_=NULL;
    name="UserDataItem_List_7";
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @["cos_err"] {
     user_data_=NULL;
     name="cos_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["norm_err"] {
     user_data_=NULL;
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ext_rew"] {
     user_data_=NULL;
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_output_name"] {
     user_data_=NULL;
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["rt_cycles"] {
     user_data_=NULL;
     name="rt_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tot_cycle"] {
     user_data_=NULL;
     name="tot_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase"] {
     user_data_=NULL;
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["quarter"] {
     user_data_=NULL;
     name="quarter";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["sse"] {
     user_data_=NULL;
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["output_name"] {
     user_data_=NULL;
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_name"] {
     user_data_=NULL;
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group_name"] {
     user_data_=NULL;
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["total_trials"] {
     user_data_=NULL;
     name="total_trials";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["time"] {
     user_data_=NULL;
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cycle"] {
     user_data_=NULL;
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["tick"] {
     user_data_=NULL;
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial"] {
     user_data_=NULL;
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["group"] {
     user_data_=NULL;
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["epoch"] {
     user_data_=NULL;
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["batch"] {
     user_data_=NULL;
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["trial_cos_diff"] {
     user_data_=NULL;
     name="trial_cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["avg_act_diff"] {
     user_data_=NULL;
     name="avg_act_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["cos_diff"] {
     user_data_=NULL;
     name="cos_diff";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["minus_cycles"] {
     user_data_=NULL;
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["ct_cycle"] {
     user_data_=NULL;
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["phase_no"] {
     user_data_=NULL;
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @["maxda"] {
     user_data_=NULL;
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="BgNet";
   desc=;
   specs {
    user_data_=NULL;
    name="specs";
    el_typ=LeabraLayerSpec;
    el_def=0;
    LeabraLayerSpec @["HiddenLayer"] {
     user_data_=NULL;
     name="HiddenLayer";
     is_used=0;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @["Input_Output"] {
       user_data_=NULL;
       name="Input_Output";
       is_used=1;
       desc=;
       unique{ lay_inhib;kwta;avg_act;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       lay_inhib {user_data_=NULL: on=1: gi=2: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
       lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
       avg_act {user_data_=NULL: targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
       inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
       inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
       clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
       decay {user_data_=NULL: trial=1: };
       del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
       lay_lrate=1;
       cos_diff {
	user_data_=NULL;
	avg_tau=100;
	lrate_mod=0;
	lrmod_fm_trc=0;
	lrmod_z_thr=-1.5;
	set_net_unlrn=0;
	avg_dt=0.01;
	avg_dt_c=0.99;
       };
       lstats {
	user_data_=NULL;
	hog_thr=0.3;
	dead_thr=0.01;
       };
      };
     };
     lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {user_data_=NULL: targ_init=0.1: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
     decay {user_data_=NULL: trial=1: };
     del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
     lay_lrate=1;
     cos_diff {
      user_data_=NULL;
      avg_tau=100;
      lrate_mod=0;
      lrmod_fm_trc=0;
      lrmod_z_thr=-1.5;
      set_net_unlrn=0;
      avg_dt=0.01;
      avg_dt_c=0.99;
     };
     lstats {
      user_data_=NULL;
      hog_thr=0.3;
      dead_thr=0.01;
     };
    };
    LeabraUnitSpec @["LeabraUnitSpec_0"] {
     user_data_=NULL;
     name="LeabraUnitSpec_0";
     is_used=0;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
     bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=.projects["bg"].networks["BgNet"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
     act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      user_data_=NULL;
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
     init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
     dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
     e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
     adapt {
      user_data_=NULL;
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      user_data_=NULL;
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {user_data_=NULL: on=0: minus=0: plus=0.1: };
     noise_type=NO_NOISE;
     noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      user_data_=NULL;
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    ClampDaUnitSpec @["ClampDaUnitSpec_1"] {
     user_data_=NULL;
     name="ClampDaUnitSpec_1";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=ClampDaUnitSpec;
      el_def=0;
     };
     act_range {user_data_=NULL: min=-1: max=1: range=2: scale=0.5: };
     bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs["LeabraConSpec_0"].children["LeabraBiasSpec_0"]$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
     act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
     spike_misc {
      user_data_=NULL;
      ex=0;
      exp_slope=0.02;
      spk_thr=1.2;
      vm_r=0.3;
      t_r=3;
      clamp_max_p=0.12;
      clamp_type=REGULAR;
      eff_spk_thr=0.5;
     };
     opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {user_data_=NULL: min=-1: max=1: range=2: scale=0.5: };
     vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
     init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
     dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
     e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
     adapt {
      user_data_=NULL;
      on=0;
      tau=144;
      vm_gain=0.04;
      spike_gain=0.00805;
      Ei_dyn=1;
      Ei_gain=0.001;
      Ei_tau=50;
      dt=0.006944444;
      Ei_dt=0.02;
     };
     stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {
      user_data_=NULL;
      on=0;
      delay=4;
     };
     deep_raw_qtr=Q4;
     deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
     da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
     noise_type=NO_NOISE;
     noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
     noise_sched {
      user_data_=NULL;
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
     send_da=CYCLE;
     da_val=DA_P;
    };
    LeabraConSpec @["LeabraConSpec_0"] {
     user_data_=NULL;
     name="LeabraConSpec_0";
     is_used=0;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @["LeabraBiasSpec_0"] {
       user_data_=NULL;
       name="LeabraBiasSpec_0";
       is_used=1;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;learn;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {user_data_=NULL: type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.08;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       dwt_thresh=0.1;
      };
      LeabraConSpec @["TopDownCons"] {
       user_data_=NULL;
       name="TopDownCons";
       is_used=0;
       desc="top-down connections from output layers down to hidden etc typically need to be weaker than bottom-up";
       unique{ wt_scale;       };
       children {
	user_data_=NULL;
	name="children";
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
       inhib=0;
       wt_scale {user_data_=NULL: abs=1: rel=0.2: no_plus_net=0: };
       learn=1;
       learn_qtr=Q4;
       lrate=0.04;
       use_lrate_sched=1;
       cur_lrate=0.04;
       lrs_mult=1;
       lrate_sched {
	user_data_=NULL;
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
       dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
       wt_bal {
	user_data_=NULL;
	on=1;
	hi_thr=0.4;
	hi_gain=4;
	lo_thr=0.2;
	lo_gain=4;
       };
       adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
      };
     };
     rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
     inhib=0;
     wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
     learn=1;
     learn_qtr=Q4;
     lrate=0.04;
     use_lrate_sched=1;
     cur_lrate=0.04;
     lrs_mult=1;
     lrate_sched {
      user_data_=NULL;
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
     dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
     wt_bal {
      user_data_=NULL;
      on=1;
      hi_thr=0.4;
      hi_gain=4;
      lo_thr=0.2;
      lo_gain=4;
     };
     adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
    };
    FullPrjnSpec @["FullPrjnSpec_0"] {
     user_data_=NULL;
     name="FullPrjnSpec_0";
     is_used=1;
     desc=;
     unique{      };
     children {
      user_data_=NULL;
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
    };
    BaseSpec_Group @.gp["PBWM"] {
     user_data_=NULL;
     name="PBWM";
     el_typ=LeabraUnitSpec;
     el_def=0;
     LeabraUnitSpec @["PBWMUnits"] {
      user_data_=NULL;
      name="PBWMUnits";
      is_used=0;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=MSNUnitSpec;
       el_def=0;
       MSNUnitSpec @["MatrixGoUnits"] {
	user_data_=NULL;
	name="MatrixGoUnits";
	is_used=1;
	desc=;
	unique{ act_misc;noise_type;noise;noise_adapt;dar;matrix_patch;dorsal_ventral;deep;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=MSNUnitSpec;
	 el_def=0;
	 MSNUnitSpec @["MatrixNoGoUnits"] {
	  user_data_=NULL;
	  name="MatrixNoGoUnits";
	  is_used=1;
	  desc=;
	  unique{ dar;matrix_patch;dorsal_ventral;matrix;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=MSNUnitSpec;
	   el_def=0;
	  };
	  act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	  bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	  act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=0.5: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {
	   user_data_=NULL;
	   ex=0;
	   exp_slope=0.02;
	   spk_thr=1.2;
	   vm_r=0.3;
	   t_r=3;
	   clamp_max_p=0.12;
	   clamp_type=REGULAR;
	   eff_spk_thr=0.5;
	  };
	  opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	  init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	  dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	  e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	  adapt {
	   user_data_=NULL;
	   on=0;
	   tau=144;
	   vm_gain=0.04;
	   spike_gain=0.00805;
	   Ei_dyn=1;
	   Ei_gain=0.001;
	   Ei_tau=50;
	   dt=0.006944444;
	   Ei_dt=0.02;
	  };
	  stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {
	   user_data_=NULL;
	   on=0;
	   delay=4;
	  };
	  deep_raw_qtr=Q2|Q4;
	  deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.2: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.8: trc_std_gain=0.8: };
	  da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	  noise_type=NETIN_NOISE;
	  noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	  noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   user_data_=NULL;
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  dar=D2R;
	  matrix_patch=MATRIX;
	  dorsal_ventral=DORSAL;
	  valence=APPETITIVE;
	  matrix {user_data_=NULL: out_ach_inhib=0: n_mnt_x=-1: };
	 };
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=0.5: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.2: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.8: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NETIN_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	dar=D1R;
	matrix_patch=MATRIX;
	dorsal_ventral=DORSAL;
	valence=APPETITIVE;
	matrix {user_data_=NULL: out_ach_inhib=0.2: n_mnt_x=-1: };
       };
       GPiInvUnitSpec @["ThalUnits"] {
	user_data_=NULL;
	name="ThalUnits";
	is_used=1;
	desc=;
	unique{ gpi;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=GPiInvUnitSpec;
	 el_def=0;
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gpi {user_data_=NULL: net_gain=3: nogo=0.4: gate_thr=0.5: thr_act=1: min_thal=0.2: tot_gain=3.4: thal_rescale=1: };
       };
       LeabraUnitSpec @["GPeNoGoUnits"] {
	user_data_=NULL;
	name="GPeNoGoUnits";
	is_used=1;
	desc=;
	unique{ deep;noise_type;noise;noise_adapt;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NETIN_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.002: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       PatchUnitSpec @["PatchUnits"] {
	user_data_=NULL;
	name="PatchUnits";
	is_used=0;
	desc=;
	unique{ 	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=PatchUnitSpec;
	 el_def=0;
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	shunt_factor=0.2;
	shunt_ach=1;
       };
       PFCUnitSpec @["PFCmntUnits"] {
	user_data_=NULL;
	name="PFCmntUnits";
	is_used=0;
	desc=;
	unique{ deep;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=PFCUnitSpec;
	 el_def=0;
	 PFCUnitSpec @["PFCmntdUnits"] {
	  user_data_=NULL;
	  name="PFCmntdUnits";
	  is_used=0;
	  desc=;
	  unique{ deep;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=PFCUnitSpec;
	   el_def=0;
	  };
	  act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	  bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	  act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {
	   user_data_=NULL;
	   ex=0;
	   exp_slope=0.02;
	   spk_thr=1.2;
	   vm_r=0.3;
	   t_r=3;
	   clamp_max_p=0.12;
	   clamp_type=REGULAR;
	   eff_spk_thr=0.5;
	  };
	  opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	  init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	  dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	  e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	  adapt {
	   user_data_=NULL;
	   on=0;
	   tau=144;
	   vm_gain=0.04;
	   spike_gain=0.00805;
	   Ei_dyn=1;
	   Ei_gain=0.001;
	   Ei_tau=50;
	   dt=0.006944444;
	   Ei_dt=0.02;
	  };
	  stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {
	   user_data_=NULL;
	   on=0;
	   delay=4;
	  };
	  deep_raw_qtr=Q2|Q4;
	  deep {user_data_=NULL: on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	  da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	  noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   user_data_=NULL;
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  gate {user_data_=NULL: out_gate=0: mnt_thal=1: gate_thr=0.2: prv_qtr=1: };
	  maint {user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=100: };
	  n_dyns=1;
	  dyn_table {
	   user_data_=NULL;
	   name="dyn_table";
	   desc=;
	   data {
	    user_data_=NULL;
	    name="data";
	    el_typ=String_Data;
	    el_def=0;
	    String_Data @["name"] {
	     user_data_=NULL;
	     name="name";
	     desc="name for this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=16;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] "maint_flat";	     };
	    };
	    String_Data @["desc"] {
	     user_data_=NULL;
	     name="desc";
	     desc="description of this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=16;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] "maintained, flat stable sustained activation";	     };
	    };
	    float_Data @["init"] {
	     user_data_=NULL;
	     name="init";
	     desc="initial value at point when gating starts";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=8;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 1;	     };
	    };
	    float_Data @["rise_tau"] {
	     user_data_=NULL;
	     name="rise_tau";
	     desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=8;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 0;	     };
	    };
	    float_Data @["decay_tau"] {
	     user_data_=NULL;
	     name="decay_tau";
	     desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=9;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 0;	     };
	    };
	   };
	   data_flags=SAVE_ROWS|AUTO_CALC;
	   auto_load=NO_AUTO_LOAD;
	   auto_load_file=;
	   row_height=1;
	   max_col_width=50;
	   keygen 4 0=0;
	   row_indexes {
	    user_data_=NULL;
	    name="row_indexes";
	   [1] 0;	   };
	   last_sort_spec {
	    user_data_=NULL;
	    name="last_sort_spec";
	    ops {
	     user_data_=NULL;
	     name="ops";
	     el_typ=DataSortEl;
	     el_def=0;
	    };
	   };
	   row_with_hilite=-1;
	   control_panel_cells {
	    user_data_=NULL;
	    name="control_panel_cells";
	    el_typ=DataTableCell;
	    el_def=0;
	   };
	  };
	 };
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gate {user_data_=NULL: out_gate=0: mnt_thal=1: gate_thr=0.2: prv_qtr=1: };
	maint {user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=100: };
	n_dyns=1;
	dyn_table {
	 user_data_=NULL;
	 name="dyn_table";
	 desc=;
	 data {
	  user_data_=NULL;
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @["name"] {
	   user_data_=NULL;
	   name="name";
	   desc="name for this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] "maint_flat";	   };
	  };
	  String_Data @["desc"] {
	   user_data_=NULL;
	   name="desc";
	   desc="description of this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] "maintained, flat stable sustained activation";	   };
	  };
	  float_Data @["init"] {
	   user_data_=NULL;
	   name="init";
	   desc="initial value at point when gating starts";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 1;	   };
	  };
	  float_Data @["rise_tau"] {
	   user_data_=NULL;
	   name="rise_tau";
	   desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 0;	   };
	  };
	  float_Data @["decay_tau"] {
	   user_data_=NULL;
	   name="decay_tau";
	   desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=9;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  user_data_=NULL;
	  name="row_indexes";
	 [1] 0;	 };
	 last_sort_spec {
	  user_data_=NULL;
	  name="last_sort_spec";
	  ops {
	   user_data_=NULL;
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	 control_panel_cells {
	  user_data_=NULL;
	  name="control_panel_cells";
	  el_typ=DataTableCell;
	  el_def=0;
	 };
	};
       };
       PFCUnitSpec @["PFCoutUnits"] {
	user_data_=NULL;
	name="PFCoutUnits";
	is_used=1;
	desc=;
	unique{ deep;deep_raw_qtr;gate;maint;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=PFCUnitSpec;
	 el_def=0;
	 PFCUnitSpec @["PFCoutdUnits"] {
	  user_data_=NULL;
	  name="PFCoutdUnits";
	  is_used=1;
	  desc=;
	  unique{ deep;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=PFCUnitSpec;
	   el_def=0;
	  };
	  act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	  bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	  sse_tol=0.5;
	  act_fun=NOISY_XX1;
	  act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	  act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	  spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	  spike_misc {
	   user_data_=NULL;
	   ex=0;
	   exp_slope=0.02;
	   spk_thr=1.2;
	   vm_r=0.3;
	   t_r=3;
	   clamp_max_p=0.12;
	   clamp_type=REGULAR;
	   eff_spk_thr=0.5;
	  };
	  opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	  clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	  vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	  init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	  dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	  act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	  avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	  avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	  g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	  e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	  adapt {
	   user_data_=NULL;
	   on=0;
	   tau=144;
	   vm_gain=0.04;
	   spike_gain=0.00805;
	   Ei_dyn=1;
	   Ei_gain=0.001;
	   Ei_tau=50;
	   dt=0.006944444;
	   Ei_dt=0.02;
	  };
	  stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	  syn_delay {
	   user_data_=NULL;
	   on=0;
	   delay=4;
	  };
	  deep_raw_qtr=Q1;
	  deep {user_data_=NULL: on=1: role=DEEP: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	  da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	  noise_type=NO_NOISE;
	  noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	  noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	  noise_sched {
	   user_data_=NULL;
	   name="noise_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=1;
	  };
	  gate {user_data_=NULL: out_gate=1: mnt_thal=1: gate_thr=0.2: prv_qtr=0: };
	  maint {user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=1: };
	  n_dyns=1;
	  dyn_table {
	   user_data_=NULL;
	   name="dyn_table";
	   desc=;
	   data {
	    user_data_=NULL;
	    name="data";
	    el_typ=String_Data;
	    el_def=0;
	    String_Data @["name"] {
	     user_data_=NULL;
	     name="name";
	     desc="name for this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=16;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] "maint_flat";	     };
	    };
	    String_Data @["desc"] {
	     user_data_=NULL;
	     name="desc";
	     desc="description of this dynamic profile";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=16;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] "maintained, flat stable sustained activation";	     };
	    };
	    float_Data @["init"] {
	     user_data_=NULL;
	     name="init";
	     desc="initial value at point when gating starts";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=8;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 1;	     };
	    };
	    float_Data @["rise_tau"] {
	     user_data_=NULL;
	     name="rise_tau";
	     desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=8;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 0;	     };
	    };
	    float_Data @["decay_tau"] {
	     user_data_=NULL;
	     name="decay_tau";
	     desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	     col_flags=SAVE_DATA|AUTO_WIDTH;
	     is_matrix=0;
	     cell_geom{ 	     };
	     calc_expr {
	      user_data_=NULL;
	      expr=;
	     };
	     dim_names {
	      user_data_=NULL;
	      name="dim_names";
	     [0] 	     };
	     width=9;
	     matrix_col_width=10;
	     ar {
	      user_data_=NULL;
	      name="ar";
	     [1] 0;	     };
	    };
	   };
	   data_flags=SAVE_ROWS|AUTO_CALC;
	   auto_load=NO_AUTO_LOAD;
	   auto_load_file=;
	   row_height=1;
	   max_col_width=50;
	   keygen 4 0=0;
	   row_indexes {
	    user_data_=NULL;
	    name="row_indexes";
	   [1] 0;	   };
	   last_sort_spec {
	    user_data_=NULL;
	    name="last_sort_spec";
	    ops {
	     user_data_=NULL;
	     name="ops";
	     el_typ=DataSortEl;
	     el_def=0;
	    };
	   };
	   row_with_hilite=-1;
	   control_panel_cells {
	    user_data_=NULL;
	    name="control_panel_cells";
	    el_typ=DataTableCell;
	    el_def=0;
	   };
	  };
	 };
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q1;
	deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=1: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
	gate {user_data_=NULL: out_gate=1: mnt_thal=1: gate_thr=0.2: prv_qtr=0: };
	maint {user_data_=NULL: s_mnt_min=0.3: s_mnt_max=0.5: mnt_net_max=0.5: clear=0.5: use_dyn=1: max_mnt=1: };
	n_dyns=1;
	dyn_table {
	 user_data_=NULL;
	 name="dyn_table";
	 desc=;
	 data {
	  user_data_=NULL;
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @["name"] {
	   user_data_=NULL;
	   name="name";
	   desc="name for this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] "maint_flat";	   };
	  };
	  String_Data @["desc"] {
	   user_data_=NULL;
	   name="desc";
	   desc="description of this dynamic profile";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] "maintained, flat stable sustained activation";	   };
	  };
	  float_Data @["init"] {
	   user_data_=NULL;
	   name="init";
	   desc="initial value at point when gating starts";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 1;	   };
	  };
	  float_Data @["rise_tau"] {
	   user_data_=NULL;
	   name="rise_tau";
	   desc="time constant for linear rise in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 0;	   };
	  };
	  float_Data @["decay_tau"] {
	   user_data_=NULL;
	   name="decay_tau";
	   desc="time constant for linear decay in maintenance activation (per quarter when deep is updated) -- use integers -- if both rise and decay then rise comes first";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=9;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [1] 0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  user_data_=NULL;
	  name="row_indexes";
	 [1] 0;	 };
	 last_sort_spec {
	  user_data_=NULL;
	  name="last_sort_spec";
	  ops {
	   user_data_=NULL;
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	 control_panel_cells {
	  user_data_=NULL;
	  name="control_panel_cells";
	  el_typ=DataTableCell;
	  el_def=0;
	 };
	};
       };
       LeabraUnitSpec @["PFCtrcUnits"] {
	user_data_=NULL;
	name="PFCtrcUnits";
	is_used=0;
	desc=;
	unique{ deep;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=1: role=TRC: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=1: trc_thal_gate=1: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
       LeabraUnitSpec @["PFCInputUnits"] {
	user_data_=NULL;
	name="PFCInputUnits";
	is_used=1;
	desc=;
	unique{ deep;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraUnitSpec;
	 el_def=0;
	};
	act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
	bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
	sse_tol=0.5;
	act_fun=NOISY_XX1;
	act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
	act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
	spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
	spike_misc {
	 user_data_=NULL;
	 ex=0;
	 exp_slope=0.02;
	 spk_thr=1.2;
	 vm_r=0.3;
	 t_r=3;
	 clamp_max_p=0.12;
	 clamp_type=REGULAR;
	 eff_spk_thr=0.5;
	};
	opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
	clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
	vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
	init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
	dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
	act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
	avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
	avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
	g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
	e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
	adapt {
	 user_data_=NULL;
	 on=0;
	 tau=144;
	 vm_gain=0.04;
	 spike_gain=0.00805;
	 Ei_dyn=1;
	 Ei_gain=0.001;
	 Ei_tau=50;
	 dt=0.006944444;
	 Ei_dt=0.02;
	};
	stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
	syn_delay {
	 user_data_=NULL;
	 on=0;
	 delay=4;
	};
	deep_raw_qtr=Q2|Q4;
	deep {user_data_=NULL: on=1: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
	da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
	noise_type=NO_NOISE;
	noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
	noise_sched {
	 user_data_=NULL;
	 name="noise_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=1;
	};
       };
      };
      act_range {user_data_=NULL: min=0: max=1: range=1: scale=1: };
      bias_spec {user_data_=NULL: type=LeabraBiasSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMFixedBias"]$: };
      sse_tol=0.5;
      act_fun=NOISY_XX1;
      act {user_data_=NULL: thr=0.5: gain=100: nvar=0.005: };
      act_misc {user_data_=NULL: rec_nd=1: avg_nd=1: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
      spike {user_data_=NULL: rise=0: decay=5: g_gain=9: window=3: eq_gain=8: eq_tau=50: eq_dt=0.02: };
      spike_misc {
       user_data_=NULL;
       ex=0;
       exp_slope=0.02;
       spk_thr=1.2;
       vm_r=0.3;
       t_r=3;
       clamp_max_p=0.12;
       clamp_type=REGULAR;
       eff_spk_thr=0.5;
      };
      opt_thresh {user_data_=NULL: send=0.1: delta=0.005: xcal_lrn=0.01: };
      clamp_range {user_data_=NULL: min=0: max=0.95: range=0.95: scale=1.052632: };
      vm_range {user_data_=NULL: min=0: max=2: range=2: scale=0.5: };
      init {user_data_=NULL: v_m=0.4: act=0: netin=0: };
      dt {user_data_=NULL: integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
      act_avg {user_data_=NULL: ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
      avg_l {user_data_=NULL: init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
      avg_l_2 {user_data_=NULL: err_mod=1: err_min=0.01: lay_act_thr=0.01: };
      g_bar {user_data_=NULL: e=1: l=0.1: i=1: };
      e_rev {user_data_=NULL: e=1: l=0.3: i=0.25: };
      adapt {
       user_data_=NULL;
       on=0;
       tau=144;
       vm_gain=0.04;
       spike_gain=0.00805;
       Ei_dyn=1;
       Ei_gain=0.001;
       Ei_tau=50;
       dt=0.006944444;
       Ei_dt=0.02;
      };
      stp {user_data_=NULL: on=0: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
      syn_delay {
       user_data_=NULL;
       on=0;
       delay=4;
      };
      deep_raw_qtr=Q2|Q4;
      deep {user_data_=NULL: on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: trc_p_only_m=0: trc_thal_gate=0: trc_avg_clamp=0: trc_deep_gain=0.2: mod_range=0.2: trc_std_gain=0.8: };
      da_mod {user_data_=NULL: on=0: minus=0: plus=0.01: };
      noise_type=NO_NOISE;
      noise {user_data_=NULL: name="noise": type=GAUSSIAN: mean=0: var=0.001: par=1: };
      noise_adapt {user_data_=NULL: trial_fixed=1: mode=FIXED_NOISE: };
      noise_sched {
       user_data_=NULL;
       name="noise_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=1;
      };
     };
     LeabraConSpec @["BgLrnCons"] {
      user_data_=NULL;
      name="BgLrnCons";
      is_used=0;
      desc=;
      unique{ lrate;learn_qtr;wt_limits;wt_bal;      };
      children {
       user_data_=NULL;
       name="children";
       el_typ=MSNConSpec;
       el_def=0;
       MSNConSpec @["MatrixConsGo"] {
	user_data_=NULL;
	name="MatrixConsGo";
	is_used=1;
	desc=;
	unique{ rnd;lrate;wt_sig;su_act_var;ru_act_var;learn_rule;slow_wts;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=MSNConSpec;
	 el_def=0;
	 MSNConSpec @["MatrixConsNoGo"] {
	  user_data_=NULL;
	  name="MatrixConsNoGo";
	  is_used=1;
	  desc=;
	  unique{ learn_rule;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.1: par=1: };
	  wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q2|Q4;
	  lrate=0.1;
	  use_lrate_sched=1;
	  cur_lrate=0.1;
	  lrs_mult=1;
	  lrate_sched {
	   user_data_=NULL;
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {user_data_=NULL: gain=1: off=1: soft_bound=1: };
	  dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	  wt_bal {
	   user_data_=NULL;
	   on=0;
	   hi_thr=0.4;
	   hi_gain=4;
	   lo_thr=0.2;
	   lo_gain=4;
	  };
	  adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {user_data_=NULL: on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	  deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
	  su_act_var=ACT_EQ;
	  ru_act_var=ACT_EQ;
	  learn_rule=DA_HEBB;
	  trace {user_data_=NULL: ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {user_data_=NULL: full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	 MSNConSpec @["MatrixConsFmPFC"] {
	  user_data_=NULL;
	  name="MatrixConsFmPFC";
	  is_used=0;
	  desc=;
	  unique{ wt_scale;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=MSNConSpec;
	   el_def=0;
	  };
	  rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.1: par=1: };
	  wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	  inhib=0;
	  wt_scale {user_data_=NULL: abs=1: rel=0.1: no_plus_net=0: };
	  learn=1;
	  learn_qtr=Q2|Q4;
	  lrate=0.1;
	  use_lrate_sched=1;
	  cur_lrate=0.02;
	  lrs_mult=1;
	  lrate_sched {
	   user_data_=NULL;
	   name="lrate_sched";
	   el_typ=SchedItem;
	   el_def=0;
	   default_val=1;
	   interpolate=0;
	  };
	  use_unlearnable=1;
	  xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	  wt_sig {user_data_=NULL: gain=1: off=1: soft_bound=1: };
	  dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	  wt_bal {
	   user_data_=NULL;
	   on=0;
	   hi_thr=0.4;
	   hi_gain=4;
	   lo_thr=0.2;
	   lo_gain=4;
	  };
	  adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	  slow_wts {user_data_=NULL: on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	  deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
	  su_act_var=ACT_EQ;
	  ru_act_var=ACT_EQ;
	  learn_rule=DA_HEBB;
	  trace {user_data_=NULL: ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	  tr_thal {user_data_=NULL: full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	  burst_da_gain=1;
	  dip_da_gain=1;
	 };
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.1: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.1;
	use_lrate_sched=1;
	cur_lrate=0.1;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=1: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=0;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=1: swt_pct=0.95: slow_tau=100: wt_tau=1: fwt_pct=0.05000001: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
	su_act_var=ACT_EQ;
	ru_act_var=ACT_EQ;
	learn_rule=DA_HEBB;
	trace {user_data_=NULL: ach_reset_thr=0.5: msn_deriv=1: max_vs_deep_mod=0.5: };
	tr_thal {user_data_=NULL: full_params=0: not_gated=0.7: gate_go_pos=1: gate_go_neg=1: gate_nogo_pos=0.1: gate_nogo_neg=1: not_go_pos=0.7: not_go_neg=0.7: not_nogo_pos=0.7: not_nogo_neg=0.7: };
	burst_da_gain=1;
	dip_da_gain=1;
       };
       LeabraDeltaConSpec @["ToTANs"] {
	user_data_=NULL;
	name="ToTANs";
	is_used=0;
	desc=;
	unique{ learn_qtr;lrate;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraDeltaConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.1;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=0;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
      };
      rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q2|Q4;
      lrate=0.01;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       user_data_=NULL;
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
      dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
      wt_bal {
       user_data_=NULL;
       on=0;
       hi_thr=0.4;
       hi_gain=4;
       lo_thr=0.2;
       lo_gain=4;
      };
      adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
     };
     LeabraConSpec @["PfcLrnCons"] {
      user_data_=NULL;
      name="PfcLrnCons";
      is_used=0;
      desc=;
      unique{ lrate;      };
      children {
       user_data_=NULL;
       name="children";
       el_typ=DeepCtxtConSpec;
       el_def=0;
       DeepCtxtConSpec @["PFCDeepCtxt"] {
	user_data_=NULL;
	name="PFCDeepCtxt";
	is_used=1;
	desc=;
	unique{ wt_scale;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=DeepCtxtConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.01;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
	delta_dwt=0;
       };
       LeabraConSpec @["ToPFC"] {
	user_data_=NULL;
	name="ToPFC";
	is_used=0;
	desc=;
	unique{ wt_scale;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       LeabraConSpec @["PFCfmTRC"] {
	user_data_=NULL;
	name="PFCfmTRC";
	is_used=0;
	desc=;
	unique{ wt_scale;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=0.1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       LeabraConSpec @["PFCtoTRC"] {
	user_data_=NULL;
	name="PFCtoTRC";
	is_used=0;
	desc=;
	unique{ 	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q2|Q4;
	lrate=0.01;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       LeabraConSpec @["PFCtoOutput"] {
	user_data_=NULL;
	name="PFCtoOutput";
	is_used=0;
	desc=;
	unique{ lrate;learn_qtr;wt_scale;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=4: rel=1: no_plus_net=0: };
	learn=1;
	learn_qtr=Q4;
	lrate=0.04;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
      };
      rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.5: var=0.25: par=1: };
      wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=1: sym_fm_top=0: };
      inhib=0;
      wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
      learn=1;
      learn_qtr=Q2|Q4;
      lrate=0.01;
      use_lrate_sched=1;
      cur_lrate=0.02;
      lrs_mult=1;
      lrate_sched {
       user_data_=NULL;
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
      dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
      wt_bal {
       user_data_=NULL;
       on=1;
       hi_thr=0.4;
       hi_gain=4;
       lo_thr=0.2;
       lo_gain=4;
      };
      adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
     };
     LeabraConSpec @["PBWMFixedCons"] {
      user_data_=NULL;
      name="PBWMFixedCons";
      is_used=1;
      desc=;
      unique{ rnd;wt_limits;lrate;learn;      };
      children {
       user_data_=NULL;
       name="children";
       el_typ=LeabraBiasSpec;
       el_def=0;
       LeabraBiasSpec @["PBWMFixedBias"] {
	user_data_=NULL;
	name="PBWMFixedBias";
	is_used=1;
	desc=;
	unique{ rnd;wt_limits;wt_scale;learn;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraBiasSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {user_data_=NULL: type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
	dwt_thresh=0.1;
       };
       MarkerConSpec @["PBWMMarkerCons"] {
	user_data_=NULL;
	name="PBWMMarkerCons";
	is_used=1;
	desc=;
	unique{ rnd;wt_limits;wt_scale;lrate;learn;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=MarkerConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=0: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       SendDeepModConSpec @["PFCSendDeepMod"] {
	user_data_=NULL;
	name="PFCSendDeepMod";
	is_used=1;
	desc=;
	unique{ learn;rnd;wt_limits;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=SendDeepModConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       LeabraConSpec @["PFCdMntToOut"] {
	user_data_=NULL;
	name="PFCdMntToOut";
	is_used=0;
	desc=;
	unique{ 	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0.02;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
       SendDeepRawConSpec @["PBWMDeepRawPlus"] {
	user_data_=NULL;
	name="PBWMDeepRawPlus";
	is_used=1;
	desc=;
	unique{ learn;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=SendDeepRawConSpec;
	 el_def=0;
	};
	rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
	wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
	inhib=0;
	wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
	learn=0;
	learn_qtr=Q4;
	lrate=0;
	use_lrate_sched=1;
	cur_lrate=0;
	lrs_mult=1;
	lrate_sched {
	 user_data_=NULL;
	 name="lrate_sched";
	 el_typ=SchedItem;
	 el_def=0;
	 default_val=1;
	 interpolate=0;
	};
	use_unlearnable=1;
	xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
	wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
	dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
	wt_bal {
	 user_data_=NULL;
	 on=1;
	 hi_thr=0.4;
	 hi_gain=4;
	 lo_thr=0.2;
	 lo_gain=4;
	};
	adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
	slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
	deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
       };
      };
      rnd {user_data_=NULL: name="rnd": type=UNIFORM: mean=0.800000011920929: var=0: par=1: };
      wt_limits {user_data_=NULL: type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
      inhib=0;
      wt_scale {user_data_=NULL: abs=1: rel=1: no_plus_net=0: };
      learn=0;
      learn_qtr=Q4;
      lrate=0;
      use_lrate_sched=1;
      cur_lrate=0;
      lrs_mult=1;
      lrate_sched {
       user_data_=NULL;
       name="lrate_sched";
       el_typ=SchedItem;
       el_def=0;
       default_val=1;
       interpolate=0;
      };
      use_unlearnable=1;
      xcal {user_data_=NULL: m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
      wt_sig {user_data_=NULL: gain=6: off=1: soft_bound=1: };
      dwt_zone {user_data_=NULL: on=0: con_norm=1: s_tau=50: l_tau=2: norm_tau=100: gain=2: lrate_mult=3: s_dt=0.02: l_dt=0.5: norm_dt=0.01: };
      wt_bal {
       user_data_=NULL;
       on=1;
       hi_thr=0.4;
       hi_gain=4;
       lo_thr=0.2;
       lo_gain=4;
      };
      adapt_scale {user_data_=NULL: on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
      slow_wts {user_data_=NULL: on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
      deep {user_data_=NULL: on=0: bg_lrate=1: fg_lrate=0: };
     };
     LeabraLayerSpec @["PBWMLayers"] {
      user_data_=NULL;
      name="PBWMLayers";
      is_used=0;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=LeabraLayerSpec;
       el_def=0;
       LeabraLayerSpec @["MatrixLayer"] {
	user_data_=NULL;
	name="MatrixLayer";
	is_used=1;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;inhib_misc;del_inhib;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {user_data_=NULL: on=1: gi=1.9: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {user_data_=NULL: on=1: gi=1.9: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {user_data_=NULL: targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0.3: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {user_data_=NULL: trial=1: };
	del_inhib {user_data_=NULL: on=1: prv_trl=0: prv_q=0: };
	lay_lrate=1;
	cos_diff {
	 user_data_=NULL;
	 avg_tau=100;
	 lrate_mod=0;
	 lrmod_fm_trc=0;
	 lrmod_z_thr=-1.5;
	 set_net_unlrn=0;
	 avg_dt=0.01;
	 avg_dt_c=0.99;
	};
	lstats {
	 user_data_=NULL;
	 hog_thr=0.3;
	 dead_thr=0.01;
	};
       };
       LeabraLayerSpec @["PatchLayer"] {
	user_data_=NULL;
	name="PatchLayer";
	is_used=0;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;inhib_misc;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	};
	lay_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {user_data_=NULL: on=1: gi=1: ff=1: fb=0: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {user_data_=NULL: targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0.4: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {user_data_=NULL: trial=1: };
	del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
	lay_lrate=1;
	cos_diff {
	 user_data_=NULL;
	 avg_tau=100;
	 lrate_mod=0;
	 lrmod_fm_trc=0;
	 lrmod_z_thr=-1.5;
	 set_net_unlrn=0;
	 avg_dt=0.01;
	 avg_dt_c=0.99;
	};
	lstats {
	 user_data_=NULL;
	 hog_thr=0.3;
	 dead_thr=0.01;
	};
       };
       LeabraLayerSpec @["ThalLayer"] {
	user_data_=NULL;
	name="ThalLayer";
	is_used=1;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @["GPeNoGoLayer"] {
	  user_data_=NULL;
	  name="GPeNoGoLayer";
	  is_used=1;
	  desc=;
	  unique{ lay_inhib;	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=1: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	  lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {user_data_=NULL: targ_init=1: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	  inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {user_data_=NULL: trial=1: };
	  del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
	  lay_lrate=1;
	  cos_diff {
	   user_data_=NULL;
	   avg_tau=100;
	   lrate_mod=0;
	   lrmod_fm_trc=0;
	   lrmod_z_thr=-1.5;
	   set_net_unlrn=0;
	   avg_dt=0.01;
	   avg_dt_c=0.99;
	  };
	  lstats {
	   user_data_=NULL;
	   hog_thr=0.3;
	   dead_thr=0.01;
	  };
	 };
	};
	lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=0.2: fb_tau=1.4: max_vs_avg=1: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {user_data_=NULL: targ_init=1: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {user_data_=NULL: trial=1: };
	del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
	lay_lrate=1;
	cos_diff {
	 user_data_=NULL;
	 avg_tau=100;
	 lrate_mod=0;
	 lrmod_fm_trc=0;
	 lrmod_z_thr=-1.5;
	 set_net_unlrn=0;
	 avg_dt=0.01;
	 avg_dt_c=0.99;
	};
	lstats {
	 user_data_=NULL;
	 hog_thr=0.3;
	 dead_thr=0.01;
	};
       };
       LeabraLayerSpec @["PFCLayer"] {
	user_data_=NULL;
	name="PFCLayer";
	is_used=1;
	desc=;
	unique{ lay_inhib;unit_gp_inhib;avg_act;decay;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=LeabraLayerSpec;
	 el_def=0;
	 LeabraLayerSpec @["PFCtrcLayer"] {
	  user_data_=NULL;
	  name="PFCtrcLayer";
	  is_used=0;
	  desc=;
	  unique{ 	  };
	  children {
	   user_data_=NULL;
	   name="children";
	   el_typ=LeabraLayerSpec;
	   el_def=0;
	  };
	  lay_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  unit_gp_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	  lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	  avg_act {user_data_=NULL: targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	  inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	  inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	  clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	  decay {user_data_=NULL: trial=0: };
	  del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
	  lay_lrate=1;
	  cos_diff {
	   user_data_=NULL;
	   avg_tau=100;
	   lrate_mod=0;
	   lrmod_fm_trc=0;
	   lrmod_z_thr=-1.5;
	   set_net_unlrn=0;
	   avg_dt=0.01;
	   avg_dt_c=0.99;
	  };
	  lstats {
	   user_data_=NULL;
	   hog_thr=0.3;
	   dead_thr=0.01;
	  };
	 };
	};
	lay_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	unit_gp_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
	lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
	avg_act {user_data_=NULL: targ_init=0.2: fixed=1: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
	inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
	inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
	clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
	decay {user_data_=NULL: trial=0: };
	del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
	lay_lrate=1;
	cos_diff {
	 user_data_=NULL;
	 avg_tau=100;
	 lrate_mod=0;
	 lrmod_fm_trc=0;
	 lrmod_z_thr=-1.5;
	 set_net_unlrn=0;
	 avg_dt=0.01;
	 avg_dt_c=0.99;
	};
	lstats {
	 user_data_=NULL;
	 hog_thr=0.3;
	 dead_thr=0.01;
	};
       };
      };
      lay_inhib {user_data_=NULL: on=1: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      unit_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      multi_gp_geom {user_data_=NULL: size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
      lay_gp_inhib {user_data_=NULL: on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
      avg_act {user_data_=NULL: targ_init=0.15: fixed=0: use_ext_act=0: tau=100: adjust=1: dt=0.01: };
      inhib_adapt {user_data_=NULL: on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
      inhib_misc {user_data_=NULL: net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
      clamp {user_data_=NULL: hard=1: gain=0.2: avg=0: avg_gain=0.2: };
      decay {user_data_=NULL: trial=1: };
      del_inhib {user_data_=NULL: on=0: prv_trl=0: prv_q=0: };
      lay_lrate=1;
      cos_diff {
       user_data_=NULL;
       avg_tau=100;
       lrate_mod=0;
       lrmod_fm_trc=0;
       lrmod_z_thr=-1.5;
       set_net_unlrn=0;
       avg_dt=0.01;
       avg_dt_c=0.99;
      };
      lstats {
       user_data_=NULL;
       hog_thr=0.3;
       dead_thr=0.01;
      };
     };
     FullPrjnSpec @["PBWMFullPrjn"] {
      user_data_=NULL;
      name="PBWMFullPrjn";
      is_used=0;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
     };
     OneToOnePrjnSpec @["PBWMOneToOne"] {
      user_data_=NULL;
      name="PBWMOneToOne";
      is_used=1;
      desc=;
      unique{ self_con;      };
      children {
       user_data_=NULL;
       name="children";
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     GpOneToOnePrjnSpec @["PBWMGpOneToOne"] {
      user_data_=NULL;
      name="PBWMGpOneToOne";
      is_used=1;
      desc=;
      unique{ self_con;      };
      children {
       user_data_=NULL;
       name="children";
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
      n_conns=-1;
      recv_start=0;
      send_start=0;
      use_gp=0;
     };
     BgPfcPrjnSpec @["BgPfcPrjn"] {
      user_data_=NULL;
      name="BgPfcPrjn";
      is_used=1;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=BgPfcPrjnSpec;
       el_def=0;
       BgPfcPrjnSpec @["BgPfcPrjnToOut"] {
	user_data_=NULL;
	name="BgPfcPrjnToOut";
	is_used=0;
	desc=;
	unique{ cross_connect;connect_as;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=BgPfcPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
	n_pfcs=2;
	bg_table {
	 user_data_=NULL;
	 name="bg_table";
	 desc=;
	 data {
	  user_data_=NULL;
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @["pfc_name"] {
	   user_data_=NULL;
	   name="pfc_name";
	   desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] "PFCmnt";"PFCout";	   };
	  };
	  int_Data @["size_x"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_240";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="size_x";
	   desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;-1;	   };
	  };
	  int_Data @["size_y"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_241";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="size_y";
	   desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;-1;	   };
	  };
	  int_Data @["start_x"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_242";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="start_x";
	   desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;0;	   };
	  };
	  int_Data @["start_y"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_243";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="start_y";
	   desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  user_data_=NULL;
	  name="row_indexes";
	 [2] 0;1;	 };
	 last_sort_spec {
	  user_data_=NULL;
	  name="last_sort_spec";
	  ops {
	   user_data_=NULL;
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	 control_panel_cells {
	  user_data_=NULL;
	  name="control_panel_cells";
	  el_typ=DataTableCell;
	  el_def=0;
	 };
	};
	cross_connect=1;
	connect_as="PFCout";
       };
       BgPfcPrjnSpec @["BgPfcPrjnToMnt"] {
	user_data_=NULL;
	name="BgPfcPrjnToMnt";
	is_used=0;
	desc=;
	unique{ cross_connect;connect_as;	};
	children {
	 user_data_=NULL;
	 name="children";
	 el_typ=BgPfcPrjnSpec;
	 el_def=0;
	};
	self_con=0;
	init_wts=0;
	set_scale=0;
	init_wt_val=1;
	add_rnd_var=0;
	renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
	n_pfcs=2;
	bg_table {
	 user_data_=NULL;
	 name="bg_table";
	 desc=;
	 data {
	  user_data_=NULL;
	  name="data";
	  el_typ=String_Data;
	  el_def=0;
	  String_Data @["pfc_name"] {
	   user_data_=NULL;
	   name="pfc_name";
	   desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=16;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] "PFCmnt";"PFCout";	   };
	  };
	  int_Data @["size_x"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_240";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="size_x";
	   desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;-1;	   };
	  };
	  int_Data @["size_y"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_241";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="size_y";
	   desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;-1;	   };
	  };
	  int_Data @["start_x"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_242";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="start_x";
	   desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;0;	   };
	  };
	  int_Data @["start_y"] {
	   UserDataItem_List @*(.user_data_) {
	    user_data_=NULL;
	    name="UserDataItem_List_243";
	    el_typ=UserDataItem;
	    el_def=0;
	    UserDataItem @["NARROW"] {
	     user_data_=NULL;
	     name="NARROW";
	     value 1 0=1;
	     val_type_fixed=0;
	    };
	   };
	   name="start_y";
	   desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	   col_flags=SAVE_DATA|AUTO_WIDTH;
	   is_matrix=0;
	   cell_geom{ 	   };
	   calc_expr {
	    user_data_=NULL;
	    expr=;
	   };
	   dim_names {
	    user_data_=NULL;
	    name="dim_names";
	   [0] 	   };
	   width=8;
	   matrix_col_width=10;
	   ar {
	    user_data_=NULL;
	    name="ar";
	   [2] 0;0;	   };
	  };
	 };
	 data_flags=SAVE_ROWS|AUTO_CALC;
	 auto_load=NO_AUTO_LOAD;
	 auto_load_file=;
	 row_height=1;
	 max_col_width=50;
	 keygen 4 0=0;
	 row_indexes {
	  user_data_=NULL;
	  name="row_indexes";
	 [2] 0;1;	 };
	 last_sort_spec {
	  user_data_=NULL;
	  name="last_sort_spec";
	  ops {
	   user_data_=NULL;
	   name="ops";
	   el_typ=DataSortEl;
	   el_def=0;
	  };
	 };
	 row_with_hilite=-1;
	 control_panel_cells {
	  user_data_=NULL;
	  name="control_panel_cells";
	  el_typ=DataTableCell;
	  el_def=0;
	 };
	};
	cross_connect=1;
	connect_as="PFCmnt";
       };
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
      n_pfcs=2;
      bg_table {
       user_data_=NULL;
       name="bg_table";
       desc=;
       data {
	user_data_=NULL;
	name="data";
	el_typ=String_Data;
	el_def=0;
	String_Data @["pfc_name"] {
	 name="pfc_name";
	 desc="name of the PFC layer -- layer must uniquely contain this name -- case sensitive maching is used";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  user_data_=NULL;
	  expr=;
	 };
	 dim_names {
	  user_data_=NULL;
	  name="dim_names";
	 [0] 	 };
	 width=16;
	 matrix_col_width=10;
	 ar {
	  user_data_=NULL;
	  name="ar";
	 [2] "PFCmnt";"PFCout";	 };
	};
	int_Data @["size_x"] {
	 UserDataItem_List @*(.user_data_) {
	  user_data_=NULL;
	  name="UserDataItem_List_240";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @["NARROW"] {
	   user_data_=NULL;
	   name="NARROW";
	   value 1 0=1;
	   val_type_fixed=0;
	  };
	 };
	 name="size_x";
	 desc="x (horizontal) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  user_data_=NULL;
	  expr=;
	 };
	 dim_names {
	  user_data_=NULL;
	  name="dim_names";
	 [0] 	 };
	 width=8;
	 matrix_col_width=10;
	 ar {
	  user_data_=NULL;
	  name="ar";
	 [2] 0;-1;	 };
	};
	int_Data @["size_y"] {
	 UserDataItem_List @*(.user_data_) {
	  user_data_=NULL;
	  name="UserDataItem_List_241";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @["NARROW"] {
	   user_data_=NULL;
	   name="NARROW";
	   value 1 0=1;
	   val_type_fixed=0;
	  };
	 };
	 name="size_y";
	 desc="y (vertical) size of this pfc layer in terms of unit groups (stripes) -- only needed if the PFC layers are NOT all the same size -- a -1 indicates that all pfc layers are the same size";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  user_data_=NULL;
	  expr=;
	 };
	 dim_names {
	  user_data_=NULL;
	  name="dim_names";
	 [0] 	 };
	 width=8;
	 matrix_col_width=10;
	 ar {
	  user_data_=NULL;
	  name="ar";
	 [2] 0;-1;	 };
	};
	int_Data @["start_x"] {
	 UserDataItem_List @*(.user_data_) {
	  user_data_=NULL;
	  name="UserDataItem_List_242";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @["NARROW"] {
	   user_data_=NULL;
	   name="NARROW";
	   value 1 0=1;
	   val_type_fixed=0;
	  };
	 };
	 name="start_x";
	 desc="starting x (horizontal) coordinate of the unit group of stripes for this pfc within the bg layer -- a -1 indicates that PFC layers are organized horizontally across, and position computed automatically from sizes";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  user_data_=NULL;
	  expr=;
	 };
	 dim_names {
	  user_data_=NULL;
	  name="dim_names";
	 [0] 	 };
	 width=8;
	 matrix_col_width=10;
	 ar {
	  user_data_=NULL;
	  name="ar";
	 [2] 0;0;	 };
	};
	int_Data @["start_y"] {
	 UserDataItem_List @*(.user_data_) {
	  user_data_=NULL;
	  name="UserDataItem_List_243";
	  el_typ=UserDataItem;
	  el_def=0;
	  UserDataItem @["NARROW"] {
	   user_data_=NULL;
	   name="NARROW";
	   value 1 0=1;
	   val_type_fixed=0;
	  };
	 };
	 name="start_y";
	 desc="starting y (vertical) coordinate of the unit group of stripes for this pfc within the bg layer -- layers organized horizontally across by default";
	 col_flags=SAVE_DATA|AUTO_WIDTH;
	 is_matrix=0;
	 cell_geom{ 	 };
	 calc_expr {
	  user_data_=NULL;
	  expr=;
	 };
	 dim_names {
	  user_data_=NULL;
	  name="dim_names";
	 [0] 	 };
	 width=8;
	 matrix_col_width=10;
	 ar {
	  user_data_=NULL;
	  name="ar";
	 [2] 0;0;	 };
	};
       };
       data_flags=SAVE_ROWS|AUTO_CALC;
       auto_load=NO_AUTO_LOAD;
       auto_load_file=;
       row_height=1;
       max_col_width=50;
       keygen 4 0=0;
       row_indexes {
	user_data_=NULL;
	name="row_indexes";
       [2] 0;1;       };
       last_sort_spec {
	user_data_=NULL;
	name="last_sort_spec";
	ops {
	 user_data_=NULL;
	 name="ops";
	 el_typ=DataSortEl;
	 el_def=0;
	};
       };
       row_with_hilite=-1;
       control_panel_cells {
	user_data_=NULL;
	name="control_panel_cells";
	el_typ=DataTableCell;
	el_def=0;
       };
      };
      cross_connect=0;
      connect_as=;
     };
     TiledGpRFPrjnSpec @["DeepToTRC"] {
      user_data_=NULL;
      name="DeepToTRC";
      is_used=0;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=1;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
      send_gp_size {x=1: y=1: };
      send_gp_skip {x=1: y=1: };
      send_gp_start {x=0: y=0: };
      wrap=1;
      reciprocal=0;
      share_cons=0;
      wts_type=GAUSSIAN;
      full_gauss {user_data_=NULL: on=1: sigma=1.2: wrap_wts=0: ctr_mv=0.8: };
      gp_gauss {user_data_=NULL: on=1: sigma=1.2: wrap_wts=0: ctr_mv=0.8: };
      full_send=BY_UNIT;
      full_recv=BY_UNIT;
      full_sig {user_data_=NULL: on=1: gain=0.02: ctr_mv=0.5: };
      gp_sig {user_data_=NULL: on=1: gain=0.02: ctr_mv=0.5: };
      wt_range {user_data_=NULL: min=0.3: max=0.7: range=0.4: scale=2.5: };
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TesselPrjnSpec @["TesselOneToOne"] {
      user_data_=NULL;
      name="TesselOneToOne";
      is_used=0;
      desc=;
      unique{       };
      children {
       user_data_=NULL;
       name="children";
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      set_scale=0;
      init_wt_val=1;
      add_rnd_var=0;
      renorm_wts {user_data_=NULL: on=0: mult_norm=1: avg_wt=0.5: };
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=1: y=1: };
      wrap=1;
      send_scale {x=1: y=1: };
      send_off {x=0: y=0: };
      send_offs {
       user_data_=NULL;
       name="send_offs";
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	user_data_=NULL;
	send_off {x=0: y=0: };
	wt_val=1;
       };
      };
      last_make_cmd="MakeRectangle(width=1, height=1, left=0, bottom=0)";
      last_weights_cmd=;
     };
    };
   };
   param_seqs {
    user_data_=NULL;
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    user_data_=NULL;
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=15: y=3: z=2: };
    max_disp_size2d {x=30: y=49: };
    LeabraLayer @["Input"] {
     user_data_=NULL;
     name="Input";
     desc=;
     flags=ABS_POS;
     layer_type=INPUT;
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=6: y=1: n_not_xy=0: n=6: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=6: y=1: n_not_xy=0: n=6: };
     disp_geom {x=6: y=1: n_not_xy=0: n=6: };
     scaled_disp_geom {x=6: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=3;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"].projections["Fm_Input"];
      Projection_Group @. = [1] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"].projections["Fm_Input"];
      Projection_Group @. = [2] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"].projections["Fm_Input"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCInputUnits"]$$: };
     dist {
      user_data_=NULL;
      fm_input=0;
      fm_output=2;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=.projects["bg"].networks["BgNet"].specs["HiddenLayer"].children["Input_Output"]$$: };
     adapt_gi=1;
    };
    LeabraLayer @["SNc"] {
     user_data_=NULL;
     name="SNc";
     desc=;
     flags=ABS_POS;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=1: y=1: n_not_xy=0: n=1: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     flat_geom {x=1: y=1: n_not_xy=0: n=1: };
     disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
     n_recv_prjns=0;
     n_send_prjns=2;
     projections {
      user_data_=NULL;
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      user_data_=NULL;
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"].projections["Marker_Fm_SNc"];
      Projection_Group @. = [1] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"].projections["Marker_Fm_SNc"];
     };
     units {
      user_data_=NULL;
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {user_data_=NULL: type=ClampDaUnitSpec: spec=.projects["bg"].networks["BgNet"].specs["ClampDaUnitSpec_1"]$$: };
     dist {
      user_data_=NULL;
      fm_input=0;
      fm_output=4;
     };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs["HiddenLayer"].children["Input_Output"]$: };
     adapt_gi=1;
    };
    Layer_Group @.gp["PBWM"] {
     user_data_=NULL;
     name="PBWM";
     el_typ=LeabraLayer;
     el_def=0;
     pos {x=4: y=0: z=0: };
     pos2d {x=0: y=21: };
     max_disp_size {x=11: y=3: z=2: };
     max_disp_size2d {x=30: y=28: };
     LeabraLayer @["GPeNoGo"] {
      user_data_=NULL;
      name="GPeNoGo";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=10: y=2: z=0: };
      pos_abs {x=14: y=2: z=0: };
      pos2d {x=21: y=3: };
      pos2d_abs {x=21: y=24: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=3;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_MatrixNoGo"] {
	user_data_=NULL;
	name="Fm_MatrixNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"]$$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=LeabraConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPi_Thalamus"].projections["Fm_GPeNoGo"];
       Projection_Group @. = [1] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"].projections["Deep_Raw_Fm_GPeNoGo"];
       Projection_Group @. = [2] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"].projections["Deep_Raw_Fm_GPeNoGo"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=LeabraUnitSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["GPeNoGoUnits"]$$: };
      dist {
       user_data_=NULL;
       fm_input=2;
       fm_output=3;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Substantia Nigra";
      voxel_fill_pct=1;
      acts_m_avg=1;
      acts_p_avg=1;
      acts_p_avg_eff=1;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["ThalLayer"].children["GPeNoGoLayer"]$: };
      adapt_gi=1;
     };
     LeabraLayer @["GPi_Thalamus"] {
      user_data_=NULL;
      name="GPi_Thalamus";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=10: y=0: z=0: };
      pos_abs {x=14: y=0: z=0: };
      pos2d {x=21: y=0: };
      pos2d_abs {x=21: y=21: };
      disp_scale=1;
      un_geom {x=1: y=1: n_not_xy=0: n=1: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=1: y=1: n_not_xy=0: n=1: };
      disp_geom {x=1: y=1: n_not_xy=0: n=4: };
      scaled_disp_geom {x=1: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=2;
      n_send_prjns=3;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Fm_MatrixGo"] {
	user_data_=NULL;
	name="Fm_MatrixGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"]$$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"]$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_GPeNoGo"] {
	user_data_=NULL;
	name="Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPeNoGo"]$$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"]$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"].projections["Marker_Fm_GPi_Thalamus"];
       Projection_Group @. = [1] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"].projections["Marker_Fm_GPi_Thalamus"];
       Projection_Group @. = [2] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"].projections["Marker_Fm_GPi_Thalamus"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=GPiInvUnitSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["ThalUnits"]$: };
      dist {
       user_data_=NULL;
       fm_input=2;
       fm_output=2;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Substantia Nigra";
      voxel_fill_pct=1;
      acts_m_avg=1;
      acts_p_avg=1;
      acts_p_avg_eff=1;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["ThalLayer"]$: };
      adapt_gi=1;
     };
     LeabraLayer @["MatrixGo"] {
      user_data_=NULL;
      name="MatrixGo";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=0: y=0: z=0: };
      pos_abs {x=4: y=0: z=0: };
      pos2d {x=0: y=0: };
      pos2d_abs {x=0: y=21: };
      disp_scale=1;
      un_geom {x=6: y=1: n_not_xy=0: n=6: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=6: y=1: n_not_xy=0: n=6: };
      disp_geom {x=6: y=1: n_not_xy=0: n=14: };
      scaled_disp_geom {x=6: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=1;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] {
	user_data_=NULL;
	name="Marker_Fm_GPi_Thalamus";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPi_Thalamus"]$$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=MarkerConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMMarkerCons"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Deep_Raw_Fm_GPeNoGo"] {
	user_data_=NULL;
	name="Deep_Raw_Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPeNoGo"]$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=SendDeepRawConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMDeepRawPlus"]$$: };
	recv_idx=1;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_Input"] {
	user_data_=NULL;
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers["Input"]$$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$$: };
	con_type=MSNCon;
	con_spec {user_data_=NULL: type=MSNConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$: };
	recv_idx=2;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_PFCout"] {
	user_data_=NULL;
	name="Fm_PFCout";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"]$$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=MSNCon;
	con_spec {user_data_=NULL: type=MSNConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"]$: };
	recv_idx=3;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Marker_Fm_SNc"] {
	user_data_=NULL;
	name="Marker_Fm_SNc";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers["SNc"]$$;
	spec {user_data_=NULL: type=FullPrjnSpec: spec=.projects["bg"].networks["BgNet"].specs["FullPrjnSpec_0"]$$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=MarkerConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMMarkerCons"]$: };
	recv_idx=4;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPi_Thalamus"].projections["Fm_MatrixGo"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=MSNUnitSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"]$: };
      dist {
       user_data_=NULL;
       fm_input=1;
       fm_output=3;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Caudate Body";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$: };
      adapt_gi=1;
     };
     LeabraLayer @["MatrixNoGo"] {
      user_data_=NULL;
      name="MatrixNoGo";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=0: y=2: z=0: };
      pos_abs {x=4: y=2: z=0: };
      pos2d {x=0: y=6: };
      pos2d_abs {x=0: y=27: };
      disp_scale=1;
      un_geom {x=6: y=1: n_not_xy=0: n=6: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=6: y=1: n_not_xy=0: n=6: };
      disp_geom {x=6: y=1: n_not_xy=0: n=14: };
      scaled_disp_geom {x=6: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=5;
      n_send_prjns=1;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] {
	user_data_=NULL;
	name="Marker_Fm_GPi_Thalamus";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPi_Thalamus"]$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=MarkerConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMMarkerCons"]$: };
	recv_idx=0;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Deep_Raw_Fm_GPeNoGo"] {
	user_data_=NULL;
	name="Deep_Raw_Fm_GPeNoGo";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPeNoGo"]$;
	spec {user_data_=NULL: type=GpOneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMGpOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=SendDeepRawConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMDeepRawPlus"]$: };
	recv_idx=1;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_Input"] {
	user_data_=NULL;
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers["Input"]$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=MSNCon;
	con_spec {user_data_=NULL: type=MSNConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"].children["MatrixConsNoGo"]$$: };
	recv_idx=2;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_PFCout"] {
	user_data_=NULL;
	name="Fm_PFCout";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"]$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=MSNCon;
	con_spec {user_data_=NULL: type=MSNConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgLrnCons"].children["MatrixConsGo"].children["MatrixConsNoGo"]$: };
	recv_idx=3;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Marker_Fm_SNc"] {
	user_data_=NULL;
	name="Marker_Fm_SNc";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers["SNc"]$;
	spec {user_data_=NULL: type=FullPrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs["FullPrjnSpec_0"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=MarkerConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMMarkerCons"]$: };
	recv_idx=4;
	send_idx=1;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPeNoGo"].projections["Fm_MatrixNoGo"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=MSNUnitSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["MatrixGoUnits"].children["MatrixNoGoUnits"]$$: };
      dist {
       user_data_=NULL;
       fm_input=1;
       fm_output=4;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=".*/.*/.*/.*/Caudate Body";
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["MatrixLayer"]$: };
      adapt_gi=1;
     };
     LeabraLayer @["PFCout"] {
      user_data_=NULL;
      name="PFCout";
      desc=;
      flags=ABS_POS;
      layer_type=HIDDEN;
      pos {x=4: y=0: z=1: };
      pos_abs {x=8: y=0: z=1: };
      pos2d {x=24: y=18: };
      pos2d_abs {x=24: y=39: };
      disp_scale=1;
      un_geom {x=6: y=1: n_not_xy=0: n=6: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=6: y=1: n_not_xy=0: n=6: };
      disp_geom {x=6: y=1: n_not_xy=0: n=14: };
      scaled_disp_geom {x=6: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=3;
      n_send_prjns=3;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Marker_Fm_GPi_Thalamus"] {
	user_data_=NULL;
	name="Marker_Fm_GPi_Thalamus";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["GPi_Thalamus"]$;
	spec {user_data_=NULL: type=BgPfcPrjnSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["BgPfcPrjn"]$$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=MarkerConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PBWMMarkerCons"]$: };
	recv_idx=0;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=LATERAL;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Deep_Mod_Fm_PFCout_deep"] {
	user_data_=NULL;
	name="Deep_Mod_Fm_PFCout_deep";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout_deep"]$$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=SendDeepModConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"].children["PFCSendDeepMod"]$$: };
	recv_idx=1;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_OUTPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
       LeabraPrjn @["Fm_Input"] {
	user_data_=NULL;
	name="Fm_Input";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers["Input"]$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=LeabraConSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMFixedCons"]$: };
	recv_idx=2;
	send_idx=2;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout_deep"].projections["Ctxt_Fm_PFCout"];
       Projection_Group @. = [1] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixGo"].projections["Fm_PFCout"];
       Projection_Group @. = [2] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["MatrixNoGo"].projections["Fm_PFCout"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=PFCUnitSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCoutUnits"]$: };
      dist {
       user_data_=NULL;
       fm_input=1;
       fm_output=1;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["PFCLayer"]$: };
      adapt_gi=1;
     };
     LeabraLayer @["PFCout_deep"] {
      user_data_=NULL;
      name="PFCout_deep";
      desc=;
      flags=ABS_POS;
      layer_type=TARGET;
      pos {x=4: y=2: z=1: };
      pos_abs {x=8: y=2: z=1: };
      pos2d {x=24: y=27: };
      pos2d_abs {x=24: y=48: };
      disp_scale=1;
      un_geom {x=6: y=1: n_not_xy=0: n=6: };
      unit_groups=1;
      virt_groups=1;
      gp_geom {x=1: y=1: n_not_xy=0: n=1: };
      gp_spc {x=1: y=1: };
      flat_geom {x=6: y=1: n_not_xy=0: n=6: };
      disp_geom {x=6: y=1: n_not_xy=0: n=14: };
      scaled_disp_geom {x=6: y=1: n_not_xy=0: n=1: };
      n_recv_prjns=1;
      n_send_prjns=1;
      projections {
       user_data_=NULL;
       name="projections";
       el_typ=LeabraPrjn;
       el_def=0;
       LeabraPrjn @["Ctxt_Fm_PFCout"] {
	user_data_=NULL;
	name="Ctxt_Fm_PFCout";
	off=0;
	disp=1;
	from_type=CUSTOM;
	from=$.projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"]$;
	spec {user_data_=NULL: type=OneToOnePrjnSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMOneToOne"]$: };
	con_type=LeabraCon;
	con_spec {user_data_=NULL: type=DeepCtxtConSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PfcLrnCons"].children["PFCDeepCtxt"]$$: };
	recv_idx=0;
	send_idx=0;
	recv_n=1;
	send_n=1;
	projected=1;
	dir_fixed=0;
	direction=FM_INPUT;
	prjn_clr {r=1: g=0.9: b=0.5: a=1: };
       };
      };
      send_prjns {
       user_data_=NULL;
       name="send_prjns";
       el_typ=LeabraPrjn;
       el_def=0;
       Projection_Group @. = [0] = LeabraPrjn .projects["bg"].networks["BgNet"].layers.gp["PBWM"]["PFCout"].projections["Deep_Mod_Fm_PFCout_deep"];
      };
      units {
       user_data_=NULL;
       name="units";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       output_name=;
      };
      unit_spec {user_data_=NULL: type=PFCUnitSpec: spec=.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMUnits"].children["PFCoutUnits"].children["PFCoutdUnits"]$$: };
      dist {
       user_data_=NULL;
       fm_input=2;
       fm_output=0;
      };
      units_lesioned=0;
      gp_unit_names_4d=0;
      brain_area=;
      voxel_fill_pct=1;
      acts_m_avg=0.2;
      acts_p_avg=0.2;
      acts_p_avg_eff=0.2;
      spec {user_data_=NULL: type=LeabraLayerSpec: spec=$.projects["bg"].networks["BgNet"].specs.gp["PBWM"]["PBWMLayers"].children["PFCLayer"]$: };
      adapt_gi=1;
     };
    };
   };
   weights {
    user_data_=NULL;
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=MANUAL_POS|ABS_POS|NETIN_PER_PRJN|BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {
    user_data_=NULL;
    sse_unit_avg=0;
    sse_sqrt=0;
    cnt_err_tol=0;
    prerr=0;
   };
   threads {
    user_data_=NULL;
    run_time {user_data_=NULL: name="TimeUsedHR_3": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    sync_time {user_data_=NULL: name="TimeUsedHR_4": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    total_time {user_data_=NULL: name="TimeUsedHR_5": s_used=0: n_used=0: avg_used={user_data_=NULL: avg=0: sum=0: n=0: }: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=2.298735696848069e-314;
   };
   cuda {
    user_data_=NULL;
    sync_units=0;
    sync_cons=0;
    min_threads=32;
    max_threads=1024;
    cons_per_thread=2;
    timers_on=0;
    n_threads=32;
   };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=34;
   n_cons=97;
   max_prjns=5;
   max_disp_size {x=15: y=3: z=2: };
   max_disp_size2d {x=30: y=49: };
   times {
    user_data_=NULL;
    quarter=25;
    gate_cyc=18;
    deep_cyc=5;
    time_inc=0.001;
    wt_bal_int=10;
    minus=75;
    plus=25;
    total_cycles=100;
   };
   lstats {
    user_data_=NULL;
    trg_max_act_crit=0.5;
    off_errs=1;
    on_errs=1;
    agg_unlearnable=0;
    wt_bal=0;
   };
   net_misc {
    user_data_=NULL;
    spike=0;
    deep=0;
    bias_learn=0;
    trial_decay=1;
    diff_scale_p=0;
    diff_scale_q1=0;
    wt_bal=1;
    lay_gp_inhib=0;
    inhib_cons=0;
   };
   deep {
    user_data_=NULL;
    on=1;
    ctxt=1;
    raw_net=1;
    mod_net=1;
    raw_qtr=Q1|Q2|Q4;
   };
   rel_netin {
    user_data_=NULL;
    on=1;
    trl_skip=10;
    epc_skip=10;
   };
  };
 };
};
